<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tango with code]]></title>
  <link href="http://PicoleDeLimao.github.io/atom.xml" rel="self"/>
  <link href="http://PicoleDeLimao.github.io/"/>
  <updated>2014-12-24T13:23:41-03:00</updated>
  <id>http://PicoleDeLimao.github.io/</id>
  <author>
    <name><![CDATA[Abner Matheus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taking Photos From Webcam Using HTML5]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/12/24/taking-photos-from-webcam-using-html5/"/>
    <updated>2014-12-24T11:57:06-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/12/24/taking-photos-from-webcam-using-html5</id>
    <content type="html"><![CDATA[<p>In today&rsquo;s tutorial I&rsquo;ll teach how to take snapshots from webcam using only HTML5.</p>

<p>On the past, accessing user webcam was something onerous, sometimes falling back on Flash. Gladly, HTML5 brought an innovation to this area, thanks to the <code>&lt;video&gt;</code> tag.</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/webcam-snapshot.png" alt="" /></p>

<!-- more -->


<h2>Getting webcam access</h2>

<p>On our demo we&rsquo;re going to create a tag to display the live stream of webcam, a tag to display a webcam snapshot, and two buttons: One to take a snapshot and another to save (download) the photo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;video&quot;</span> <span class="na">width=</span><span class="s">&quot;640&quot;</span> <span class="na">height=</span><span class="s">&quot;480&quot;</span> <span class="na">autoplay</span><span class="nt">&gt;&lt;/video&gt;</span> <span class="c">&lt;!-- Live stream of webcam --&gt;</span>
</span><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span> <span class="na">width=</span><span class="s">&quot;640&quot;</span> <span class="na">height=</span><span class="s">&quot;480&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span> <span class="c">&lt;!-- Snapshot of webcam --&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;snap&quot;</span><span class="nt">&gt;</span>Take snapshot<span class="nt">&lt;/button&gt;</span> <span class="c">&lt;!-- Button to take snapshot --&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">&quot;save&quot;</span> <span class="na">download</span><span class="nt">&gt;&lt;button&gt;</span>Download photo<span class="nt">&lt;/button&gt;&lt;/a&gt;</span> <span class="c">&lt;!-- Button to download photo --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, that alone will not performe anything. We need a bit of Javascript to do the magic.</p>

<p>There are three ways to get access to the user webcam, depending on his browser: getUserMedia (for IE and alike), webkitGetUserMedia (for Chrome and Safari) and mozGetUserMedia (for Firefox), so we need to handle all them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">video</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;video&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>First I&rsquo;m creating a listener to when content is loaded. It&rsquo;s important, otherwise Javascript won&rsquo;t be able to find the tags! :-)</p>

<p>Inside the listener there are three &ldquo;if&rdquo;, for compatibility reasons described above.</p>

<p>Each &ldquo;if&rdquo; is similar, just some changes here and there: We are setting &ldquo;video.src&rdquo; to webcam stream (remember: video variable is the <code>&lt;video&gt;</code> tag we set previously) and immediately playing it through the function &ldquo;play()&rdquo;. We also need to pass a callback function in case of error (permission not given or webcam not found, for example).</p>

<h2>Taking a snapshot</h2>

<p>Now we&rsquo;re going to implement the take snapshot functionality. First thing: Create a listener to when button &ldquo;Take snapshot&rdquo; is clicked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;snap&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This listener must be inside &ldquo;DOMContentLoaded&rdquo; listener created previously.</p>

<p>Now, inside this new listener that we&rsquo;ve created, let&rsquo;s draw a webcam frame inside the <code>&lt;canvas&gt;</code> tag that we created on first section of this tutorial. To be able to draw an image inside a canvas, we first need to get its &ldquo;context&rdquo; and through it call the function &ldquo;drawImage(x, y, width, height)&rdquo;, where x, y representates the origin of source image (if you need to translate it&hellip;) and width, height the area you are going to take from source image (if you need to crop it&hellip;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;snap&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">video</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aaaaaand it&rsquo;s done! Pretty easy, huh? :-)</p>

<h2>Downloading a photo</h2>

<p>Now we just need to implement the &ldquo;Download photo&rdquo; button. That is easy too. Inside the listener of &ldquo;Take snapshot&rdquo; button, add the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;save&quot;</span><span class="p">).</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s2">&quot;image/jpeg&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;toDataURL()&rdquo; convert canvas image to a URL. We can also define the image extension.</p>

<p>It&rsquo;s simple like that! :)</p>

<p>Now the complete code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;video&quot;</span> <span class="na">width=</span><span class="s">&quot;640&quot;</span> <span class="na">height=</span><span class="s">&quot;480&quot;</span> <span class="na">autoplay</span><span class="nt">&gt;&lt;/video&gt;</span> <span class="c">&lt;!-- Live stream of webcam --&gt;</span>
</span><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;canvas&quot;</span> <span class="na">width=</span><span class="s">&quot;640&quot;</span> <span class="na">height=</span><span class="s">&quot;480&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span> <span class="c">&lt;!-- Snapshot of webcam --&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;snap&quot;</span><span class="nt">&gt;</span>Take snapshot<span class="nt">&lt;/button&gt;</span> <span class="c">&lt;!-- Button to take snapshot --&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">&quot;save&quot;</span> <span class="na">download</span><span class="nt">&gt;&lt;button&gt;</span>Download photo<span class="nt">&lt;/button&gt;&lt;/a&gt;</span> <span class="c">&lt;!-- Button to download photo --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">video</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;video&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span><span class="p">({</span> <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">video</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Video capture error: &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;snap&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">video</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;save&quot;</span><span class="p">).</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s2">&quot;image/jpeg&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/webcam-snapshot.png" alt="" /></p>

<p>I hope you&rsquo;ve enjoyed and Merry Christmas! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Death Button]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/12/19/death-button/"/>
    <updated>2014-12-19T08:57:25-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/12/19/death-button</id>
    <content type="html"><![CDATA[<p>On past days I spent my free time developing a very simple app called Death Button.</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/death_button_1.png" alt="" /></p>

<p style="text-align:center;"><a href="https://play.google.com/store/apps/details?id=io.github.picoledelimao.deathbutton">Click here to access it on Play Store</a></p>

<!-- more -->


<p>The concept of this game is to kill a random person from your contacts on pressing a red button. The object is to kill the most quantity of people in less time.</p>

<p>It can seem silly, and it&rsquo;s indeed is! But it was fun developing! Hahana</p>

<p>Some screenshots:</p>

<p><img src="http://PicoleDeLimao.github.io/images/posts/death_button_2.png" style="display:inline; width: 30%;" />
<img src="http://PicoleDeLimao.github.io/images/posts/death_button_1.png" style="display:inline; width: 30%;" />
<img src="http://PicoleDeLimao.github.io/images/posts/death_button_3.png" style="display:inline; width: 30%;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Sessions in PHP]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/11/12/managing-sessions-in-php/"/>
    <updated>2014-11-12T20:40:47-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/11/12/managing-sessions-in-php</id>
    <content type="html"><![CDATA[<p>HTTP is a stateless protocol. However, sometimes we <em>do</em> want to keep some state of the application, like, for example, some information about the current user who is browsing your site. In PHP and most backend languages in general, there are two ways to do that:</p>

<ul>
<li>Cookies</li>
<li>Sessions</li>
</ul>


<p>There are some differences between the two techniques:</p>

<!-- more -->


<ul>
<li>Cookies are kept on user&rsquo;s machine while sessions stay on server;</li>
<li>Usually, cookies last longer than sessions, where the latter lasts until the user closes the browser;</li>
<li>Sessions support a bigger quantity of data.</li>
</ul>


<p>On this tutorial we&rsquo;re going to focus in sessions.</p>

<h2>Starting a session</h2>

<p>To start a session, use the method session_start()</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="c1">//$_SESSION says: USE MEEE!!!</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Sessions are accessible through the superglobal variable $_SESSION. This variable is a simple array, wherein its values are persisted on a file on the server machine. To identify each user, sessions use a small cookie called session_id.</p>

<p>Generally sessions are started automatically after the first time use start them. This behavior is defined on the parameter <em>session.auto_start</em> on the config file <em>php.ini</em>. Because of that, it&rsquo;s a good pratice to check if a session is already started before you start it again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since version 5.3, PHP will print an error message whenever you start an already started session.</p>

<h2>Creating session variables</h2>

<p>Create session variables is pretty simple. You just need to assign a value to a array key. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Abner&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Accessing variables</h2>

<p>In order to access session variables, you first need to start a session. After that, all variables are accessible through the superglobal variable $_SESSION. That&rsquo;s that simple. :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span> <span class="c1">//Abner</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modify variables</h2>

<p>That follows the same principle of create. Just override the old value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Ana&quot;</span><span class="p">;</span> <span class="c1">//overrided what was there before</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deleting variables or the entire session</h2>

<p>To delete a session variable, use the method unset, as you&rsquo;d do with any other variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]);</span> <span class="c1">//variable is deleted from session</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you wish to delete all variables at once, the way to do that is using the method session_unset.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_unset</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Notice this method is deprecated. The correct way to do that is simply setting a new array to $_SESSION.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$_SESSION</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the Garbage Collect will free the memory allocation for the old variables.</p>

<p>Even so, if you really wish to destroy the session by complete and not just clean it, you can use session_destroy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_destroy</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>While this method destroys the session file on server machine, the session (and its variables) still exists on memory and will keep existing until the user go to another page. Because of that, it&rsquo;s recommended you clean the session before destroying it.</p>

<p>Well, that&rsquo;s it folks! :)</p>

<p>I hope you appreciated today&rsquo;s tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Experience on Information Systems I]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/10/27/my-experience-on-information-systems-i/"/>
    <updated>2014-10-27T00:35:50-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/10/27/my-experience-on-information-systems-i</id>
    <content type="html"><![CDATA[<p>On Information Systems I we learn about project design and web systems.</p>

<p>There, we utilize a framework called Play!, that is done for Java and Scala.</p>

<p>Play! Framework is excellent, and the integration part with Scala really helps, turning things smoother.</p>

<p>Here are some web systems I developed during this discipline:</p>

<h2>#Partiu</h2>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/play-partiu.png" alt="" /></p>

<!-- more -->


<p></p>

<center>Link: <a href="http://si1-partiu.herokuapp.com">http://si1-partiu.herokuapp.com</a>/<br/><br/>
Github repository: <a href="https://github.com/felipemdrs/Partiu_Projeto_SI1">https://github.com/felipemdrs/Partiu_Projeto_SI1</a></center>


<p><br/></p>

<p>That was the discipline&rsquo;s final project and it was made together with a classmate, <a href="https://github.com/felipemdrs">Felipe Miranda</a>.
Basically, it is a &ldquo;social network&rdquo; of travels, where you create a group for you travel and call people to share information about it, very much like Facebook groups. You can set you travels as public or private.</p>

<h2>CCFest</h2>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/play-ccfest.png" alt="" />
Link: <a href="http://cchackfest.herokuapp.com/">http://cchackfest.herokuapp.com/</a><br/>
Github repository: <a href="https://github.com/PicoleDeLimao/hackfest2">https://github.com/PicoleDeLimao/hackfest2</a></p>

<p>Originally made by <a href="https://github.com/felipemdrs">Felipe Miranda</a>, the challenge was deal with a complete system and evolve it (of course, I couldn&rsquo;t be able to create such beautiful GUI :p).</p>

<p>I was responsible for user validation (previously there wasn&rsquo;t a signup option), possibility to add an event place and check it as priority for experienced programmer. Another thing I learned during this project was how to work with AJAX technology.</p>

<h2>Final thoughts</h2>

<p>My experience while on this discipline was very positive. My knowledge with web systems was from zero to now the possibility to create pretty complex sites. :P</p>

<p>I learnt many technologies (Play!, MVC, Heroku, Hibernate, AJAX, Javascript, just to quote few :P) and there&rsquo;s still many to learn! Well&hellip; That&rsquo;s a programmer life. But it&rsquo;s better that way.</p>

<p>That&rsquo;s it. See ya!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) Mesquita]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/10/18/python-2-dot-7-mesquita/"/>
    <updated>2014-10-18T18:30:35-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/10/18/python-2-dot-7-mesquita</id>
    <content type="html"><![CDATA[<p>Ahhh, and good and old (or not so old) statistics.</p>

<p>I create this software to help with my homework. In the end, just by doing it I was able to learn much more about statistical models. :)</p>

<p>Also, this software was my first attempt in create something with Python GUI, Tkinter. Wow, compared to Swing this one is like heaven!</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/mesquita.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/PicoleDeLimao/e51ffc7453acf0af3426/raw/8ce4b37a0b809c7cafdb432f961ca808d7664a60/Mesquita.py" download="Mesquita.py">Click here to download</a></center>




<!-- more -->


<p>You can see the source code below. Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/e51ffc7453acf0af3426.js?file=Mesquita.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------------
# Mesquita v1.0
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------------
import math

class MatematicaException(Exception): pass
class ProbabilidadeException(Exception): pass
class BinomialException(ProbabilidadeException): pass
class HipergeometricoException(ProbabilidadeException): pass
class GeometricoException(ProbabilidadeException): pass
class PoissonException(ProbabilidadeException): pass
class UniformeException(ProbabilidadeException): pass
class ExponencialException(ProbabilidadeException): pass
class NormalException(ProbabilidadeException): pass

class Matematica:
    #combina dois numeros inteiros, n &gt; p
    @staticmethod
    def combinacao(n, p):
        if n &lt; p or p &lt; 0 or not(isinstance(n, int) and isinstance(p, int)):
            raise MatematicaException(&quot;Parâmetros inválidos na combinação&quot;)
        n_fatorado = reduce(lambda x, y: x * y, [x for x in range(n, n-p, -1)] + [1])
        try:
            return float(n_fatorado)/math.factorial(p)
        except: return n_fatorado/math.factorial(p)

#----------------------------------------------------------------
# Modelos discretos
#----------------------------------------------------------------
class ModeloDiscreto:
    #variacao do &#39;x&#39; na reta real
    def variacao(self, x):
        raise NotImplementedError()
    #funcao de probabilidade
    def f(self):
        raise NotImplementedError()
    #funcao de probabilidade acumulada
    def F(self):
        raise NotImplementedError()
    #esperanca da v.a.
    def e(self):
        raise NotImplementedError()
    #variancia da v.a.
    def var(self):
        raise NotImplementedError()
#=================================================================
class Bernoulli(ModeloDiscreto):
    #p: chance de sucesso
    def __init__(self, p):
        try:
            self.p = float(p)
            if not 0 &lt;= self.p &lt;= 1:
                raise ProbabilidadeException(&quot;Parametro p não é uma probabilidade&quot;)
        except:
            raise ProbabilidadeException(&quot;Parametro p não é uma probabilidade&quot;)
    def fp(self):
        return self.p
    def e(self):
        return self.p
    def var(self):
        return self.p*(1-self.p)
    
class Binomial(Bernoulli):
    #n: numero de repeticoes, p: chance de sucesso
    def __init__(self, n, p):
        try:
            self.n = int(n)
        except:
            raise BinomialException(&quot;Parâmetro n deve ser um numero inteiro&quot;)
        Bernoulli.__init__(self, p)
    def variacao(self):
        return [x for x in range(0, self.n + 1)]
    def fp(self, x):
        if not x in self.variacao():
            raise BinomialException(&quot;x está fora da variação da v.a.&quot;)
        combinacao = Matematica.combinacao(self.n, x)
        chance_sucesso = math.pow(self.p, x)
        chance_fracasso = math.pow(1 - self.p, self.n - x)
        return combinacao*chance_sucesso*chance_fracasso
    def F(self, x):
        if x &lt; 0:
            return 0
        elif x &gt;= self.n:
            return 1
        count = 0
        for p in range(0, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.n*self.p
    def var(self):
        return self.n*self.p*(1-self.p)
        
class Hipergeometrico(ModeloDiscreto):
    #N: tamanho da populacao
    #n: tamanho da amostra
    #r: numero de elementos favoraveis
    def __init__(self, N, r, n):
        try:
            self.N = int(N)
            self.r = int(r)
            self.n = int(n)
            if self.N &lt; self.n or self.N &lt; self.r:
                raise HipergeometricoException(&quot;Parâmetros inválidos&quot;)
        except:
            raise HipergeometricoException(&quot;Parâmetros inválidos&quot;)
    def variacao(self):
        return [x for x in range(max(0, self.n-(self.N-self.r)), min(self.r, self.n) + 1)]
    def fp(self, x):
        if not x in self.variacao():
            raise HipergeometricoException(&quot;x está fora da variação da v.a.&quot;)
        a = Matematica.combinacao(self.r, x)
        b = Matematica.combinacao(self.N - self.r, self.n - x)
        c = Matematica.combinacao(self.N, self.n)
        return a*b/c
    def F(self, x):
        if x &lt; max(0, self.n-(self.N-self.r)):
            return 0
        elif x &gt;= min(self.r, self.n):
            return 1
        count = 0
        for p in range(max(0, self.n-(self.N-self.r)), int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.n*(self.r/float(self.N))
    def var(self):
        return self.n*(self.r/float(self.N))*(1-self.r/float(self.N))*(self.N-self.n)/float(self.N-1)

class Geometrico(Bernoulli):
    #p: chance de sucesso
    def __init__(self, p):
        Bernoulli.__init__(self, p)
    def variacao(self, x):
        return isinstance(x, int) and x &gt;= 1
    def fp(self, x):
        if not self.variacao(x):
            raise GeometricoException(&quot;x está fora da variação da v.a.&quot;)
        return math.pow(1-self.p, x-1)*self.p
    def F(self, x):
        if x &lt;= 1:
            return 0
        count = 0
        for p in range(1, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return 1/float(self.p)
    def var(self):
        return (1-self.p)/float(math.pow(self.p, 2))

class Poisson(ModeloDiscreto):
    #alfa: media
    def __init__(self, alfa):
        try:
            self.alfa = float(alfa)
        except:
            raise PoissonException(&quot;Parâmetro inválido&quot;)
    def variacao(self, x):
        return isinstance(x, int) and x &gt;= 0
    def fp(self, x):
        if not self.variacao(x):
            raise PoissonException(&quot;x está fora da variação da v.a.&quot;)
        return math.pow(math.e, -self.alfa)*math.pow(self.alfa, x)/float(math.factorial(x))
    def F(self, x):
        if x &lt;= 0:
            return 0
        count = 0
        for p in range(0, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.alfa
    def var(self):
        return self.alfa
    

#----------------------------------------------------------------
# Modelos continuos
#----------------------------------------------------------------
class ModeloContinuo:
    #funcao distribuicao de probabilidade entre dois pontos
    def fdp(self, x, y):
        raise NotImplementedError()
    #funcao de probabilidade acumulada de -infinito ate o ponto
    def F(self, x):
        raise NotImplementedError()
    #esperanca da v.a.
    def e(self):
        raise NotImplementedError()
    #variancia da v.a.
    def var(self):
        raise NotImplementedError()
#=================================================================    
class Uniforme(ModeloContinuo):
    def __init__(self, a, b):
        try:
            self.a = float(a)
            self.b = float(b)
            if self.a &gt;= self.b:
                raise UniformeException(&quot;Parametro a é maior ou igual que o b&quot;)
        except: raise UniformeException(&quot;Parâmetros inválidos&quot;)
    def F(self, x):
        if x &lt;= self.a:
            return 0
        elif x &gt;= self.b:
            return 1
        return (x-self.a)/float(self.b-self.a)
    def fdp(self, x, y):
        if y &lt; x:
            raise UniformeException(&quot;Ponto final é menor que ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return (self.a + self.b)/2.0
    def var(self):
        return math.pow(self.b - self.a, 2)/12.0

class Exponencial(ModeloContinuo):
    #alfa: o inverso da media
    def __init__(self, alfa):
        try:
            self.alfa = float(alfa)
        except: raise ExponencialException(&quot;Parâmetro inválido&quot;)
        if self.alfa &lt; 0:
                raise ExponencialException(&quot;Parâmetro deve ser maior que 0&quot;)
    def F(self, x):
        if x &lt;= 0:
            return 0
        return 1 - math.pow(math.e, -self.alfa*x)
    def fdp(self, x, y):
        if y &lt; x:
            raise ExponencialException(&quot;Ponto final é menor que o ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return 1/float(self.alfa)
    def var(self):
        return 1/float(math.pow(self.alfa, 2))


class Normal(ModeloContinuo):
    #u: media
    #o2: variancia
    def __init__(self, u, o2):
        try:
            self.u = float(u)
            self.o2 = float(o2)
        except:
            raise NormalException(&quot;Parâmetros inválidos&quot;)
        #tabela abaixo
        self.tabela = {0.0: 0.5, 0.25: 0.5987, 2.0: 0.9772, 3.0: 0.9987, 0.5: 0.6915, 1.0: 0.8413, 3.37: 0.9996, 0.75: 0.7734, 2.83: 0.9977, 1.17: 0.879, 0.67: 0.7486, 2.28: 0.9887, 3.29: 0.9995, 3.21: 0.9993, 0.83: 0.7967, 0.6: 0.7257, 2.91: 0.9982, 3.5: 0.9998, 1.34: 0.9099, 2.25: 0.9878, 0.85: 0.8023, 3.51: 0.9998, 0.96: 0.8315, 0.66: 0.7454, 3.27: 0.9995, 0.78: 0.7823, 3.45: 0.9997, 1.67: 0.9525, 1.43: 0.9236, 2.65: 0.996, 2.03: 0.9788, 3.54: 0.9998, 2.36: 0.9909, 3.46: 0.9997, 0.14: 0.5557, 0.37: 0.6443, 1.2: 0.8849, 0.4: 0.6554, 2.62: 0.9956, 3.55: 0.9998, 2.04: 0.9793, 1.29: 0.9015, 0.46: 0.6772, 3.49: 0.9998, 0.56: 0.7123, 1.73: 0.9582, 1.51: 0.9345, 0.36: 0.6406, 3.41: 0.9997, 0.22: 0.5871, 1.09: 0.8621, 0.95: 0.8289, 0.26: 0.6026, 1.61: 0.9463, 3.24: 0.9994, 1.84: 0.9671, 2.06: 0.9803, 0.63: 0.7357, 1.81: 0.9649, 3.3: 0.9995, 1.54: 0.9382, 2.02: 0.9783, 1.95: 0.9744, 2.57: 0.9949, 2.4: 0.9918, 2.73: 0.9968, 1.9: 0.9713, 2.31: 0.9896, 0.42: 0.6628, 3.58: 0.9998, 2.52: 0.9941, 2.76: 0.9971, 2.84: 0.9977, 2.64: 0.9959, 2.17: 0.985, 2.97: 0.9985, 3.23: 0.9994, 1.94: 0.9738, 1.88: 0.9699, 3.33: 0.9996, 2.75: 0.997, 1.68: 0.9535, 2.43: 0.9925, 1.33: 0.9082, 1.85: 0.9678, 2.35: 0.9906, 2.27: 0.9884, 2.19: 0.9857, 1.77: 0.9616, 0.31: 0.6217, 1.96: 0.975, 3.14: 0.9992, 2.51: 0.994, 2.22: 0.9868, 0.73: 0.7673, 1.04: 0.8508, 1.49: 0.9319, 1.18: 0.881, 1.58: 0.9429, 1.01: 0.8438, 1.62: 0.9474, 0.1: 0.5398, 2.6: 0.9953, 1.72: 0.9573, 2.15: 0.9842, 1.76: 0.9608, 0.47: 0.6808, 1.05: 0.8531, 2.92: 0.9982, 1.1: 0.8643, 1.47: 0.9292, 3.13: 0.9991, 3.28: 0.9995, 0.09: 0.5359, 3.31: 0.9995, 0.76: 0.7764, 2.47: 0.9932, 1.63: 0.9484, 0.15: 0.5596, 3.07: 0.9989, 1.37: 0.9147, 0.7: 0.758, 2.85: 0.9978, 2.54: 0.9945, 1.23: 0.8907, 2.32: 0.9898, 0.97: 0.834, 0.74: 0.7704, 0.51: 0.695, 0.64: 0.7389, 2.55: 0.9946, 0.45: 0.6736, 2.78: 0.9973, 0.54: 0.7054, 1.44: 0.9251, 0.55: 0.7088, 0.01: 0.504, 3.39: 0.9997, 2.89: 0.9981, 2.81: 0.9975, 1.14: 0.8729, 1.8: 0.9641, 3.18: 0.9993, 1.22: 0.8888, 1.86: 0.9686, 3.16: 0.9992, 1.99: 0.9767, 3.02: 0.9987, 1.98: 0.9761, 3.26: 0.9994, 0.04: 0.516, 3.08: 0.999, 2.07: 0.9808, 0.34: 0.6331, 0.61: 0.7291, 3.11: 0.9991, 2.14: 0.9838, 3.03: 0.9988, 2.41: 0.992, 0.16: 0.5636, 0.41: 0.6591, 0.48: 0.6844, 1.36: 0.9131, 0.98: 0.8365, 3.19: 0.9993, 3.06: 0.9989, 3.43: 0.9997, 2.98: 0.9986, 3.35: 0.9996, 2.9: 0.9981, 1.5: 0.9332, 0.89: 0.8133, 1.64: 0.9495, 0.24: 0.5948, 0.52: 0.6985, 2.05: 0.9798, 1.59: 0.9441, 1.25: 0.8944, 0.3: 0.6179, 2.56: 0.9948, 2.63: 0.9957, 0.21: 0.5832, 2.71: 0.9966, 0.23: 0.591, 2.79: 0.9974, 2.12: 0.983, 0.71: 0.7611, 0.19: 0.5753, 1.87: 0.9693, 2.45: 0.9929, 1.45: 0.9265, 3.52: 0.9998, 1.89: 0.9706, 3.44: 0.9997, 3.36: 0.9996, 3.22: 0.9994, 0.07: 0.5279, 1.06: 0.8554, 3.53: 0.9998, 2.59: 0.9952, 1.53: 0.937, 3.47: 0.9997, 0.58: 0.719, 2.7: 0.9965, 3.56: 0.9998, 2.94: 0.9984, 0.28: 0.6103, 0.99: 0.8389, 1.41: 0.9207, 3.48: 0.9997, 1.7: 0.9554, 0.38: 0.648, 1.74: 0.9591, 1.78: 0.9625, 0.11: 0.5438, 1.38: 0.9162, 2.38: 0.9913, 1.92: 0.9726, 0.92: 0.8212, 1.82: 0.9656, 1.71: 0.9564, 0.35: 0.6368, 1.11: 0.8665, 0.13: 0.5517, 0.94: 0.8264, 1.12: 0.8686, 2.46: 0.9931, 1.55: 0.9394, 1.75: 0.9599, 0.68: 0.7517, 1.97: 0.9756, 0.44: 0.67, 2.68: 0.9963, 1.15: 0.8749, 2.09: 0.9817, 0.77: 0.7794, 1.28: 0.8997, 2.01: 0.9778, 0.53: 0.7019, 3.4: 0.9997, 3.57: 0.9998, 1.26: 0.8962, 2.3: 0.9893, 2.33: 0.9901, 1.31: 0.9049, 2.39: 0.9916, 0.82: 0.7939, 2.99: 0.9986, 0.84: 0.7995, 0.79: 0.7852, 0.81: 0.791, 0.59: 0.7224, 0.33: 0.6293, 2.26: 0.9881, 2.42: 0.9922, 0.86: 0.8051, 1.79: 0.9633, 1.03: 0.8485, 0.88: 0.8106, 2.34: 0.9904, 1.66: 0.9515, 0.05: 0.5199, 2.74: 0.9969, 2.21: 0.9864, 1.93: 0.9732, 2.61: 0.9955, 1.57: 0.9418, 2.2: 0.9861, 0.06: 0.5239, 3.17: 0.9992, 0.49: 0.6879, 0.2: 0.5793, 2.29: 0.989, 0.62: 0.7324, 1.13: 0.8708, 2.37: 0.9911, 2.13: 0.9834, 2.5: 0.9938, 3.2: 0.9993, 0.8: 0.7881, 1.3: 0.9032, 0.29: 0.6141, 2.48: 0.9934, 2.24: 0.9875, 2.44: 0.9927, 1.19: 0.883, 0.69: 0.7549, 0.87: 0.8078, 2.08: 0.9812, 2.82: 0.9976, 1.21: 0.8869, 2.95: 0.9984, 1.39: 0.9177, 1.91: 0.9719, 3.04: 0.9988, 3.15: 0.9992, 0.18: 0.5714, 1.52: 0.9357, 0.39: 0.6517, 0.93: 0.8238, 2.53: 0.9943, 1.24: 0.8925, 2.11: 0.9826, 2.16: 0.9846, 2.96: 0.9985, 2.49: 0.9936, 0.91: 0.8186, 2.67: 0.9962, 0.27: 0.6064, 0.72: 0.7642, 2.69: 0.9964, 2.18: 0.9854, 2.77: 0.9972, 2.87: 0.9979, 1.65: 0.9505, 2.1: 0.9821, 2.93: 0.9983, 0.65: 0.7422, 0.9: 0.8159, 1.07: 0.8577, 1.08: 0.8599, 1.32: 0.9066, 3.38: 0.9996, 3.09: 0.999, 2.8: 0.9974, 0.02: 0.508, 3.01: 0.9987, 2.23: 0.9871, 0.17: 0.5675, 0.43: 0.6664, 3.1: 0.999, 1.27: 0.898, 1.4: 0.9192, 2.66: 0.9961, 1.16: 0.877, 3.12: 0.9991, 2.58: 0.9951, 1.46: 0.9279, 0.08: 0.5319, 0.12: 0.5478, 1.69: 0.9545, 1.48: 0.9306, 1.42: 0.9222, 1.02: 0.8461, 1.56: 0.9406, 1.83: 0.9664, 3.42: 0.9997, 2.88: 0.998, 0.03: 0.512, 3.32: 0.9995, 3.25: 0.9994, 3.34: 0.9996, 3.05: 0.9989, 1.6: 0.9452, 2.86: 0.9979, 0.32: 0.6255, 1.35: 0.9115, 0.57: 0.7157, 2.72: 0.9967}
    def F(self, x):
        xNormalizada = (x - self.u)/float(math.sqrt(self.o2))
        if xNormalizada &lt; -3.5:
            return 0
        elif xNormalizada &gt; 3.5:
            return 1
        chave = float(&quot;%.2f&quot; % math.fabs(xNormalizada))
        if xNormalizada &lt; 0:
            return 1 - self.tabela[chave]
        else:
            return self.tabela[chave]
    def fdp(self, x, y):
        if y &lt; x:
            raise NormalException(&quot;Ponto final é menor que o ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return self.u
    def var(self):
        return self.o2

#----------------------------------------------------------------
# Interface gráfica
#----------------------------------------------------------------  
if __name__ == &#39;__main__&#39;:
    from Tkinter import *
    import tkMessageBox
    class JanelaPrincipal:
        def __init__(self, top_level):
            self.frame1 = Frame(top_level)
            self.frame1.pack(side=LEFT)
            self.frame2 = Frame(top_level)
            self.frame2.pack(side=RIGHT)
            
            width = 50
            height = 5
            Label(self.frame1, text=&quot;Modelos discretos:&quot;).pack()
            self.binomial = Button(self.frame1, text=&quot;Modelo binomial&quot;)
            self.binomial[&#39;width&#39;] = width
            self.binomial[&#39;height&#39;] = height
            self.hipergeometrico = Button(self.frame1, text=&quot;Modelo hipergeométrico&quot;)
            self.hipergeometrico[&#39;width&#39;] = width
            self.hipergeometrico[&#39;height&#39;] = height
            self.geometrico = Button(self.frame1, text=&quot;Modelo geométrico&quot;)
            self.geometrico[&#39;width&#39;] = width
            self.geometrico[&#39;height&#39;] = height
            self.poisson = Button(self.frame1, text=&quot;Modelo de Poisson&quot;)
            self.poisson[&#39;width&#39;] = width
            self.poisson[&#39;height&#39;] = height
            Label(self.frame2, text=&quot;Modelos contínuos:&quot;).pack()
            self.uniforme = Button(self.frame2, text=&quot;Modelo uniforme&quot;)
            self.uniforme[&#39;width&#39;] = width
            self.uniforme[&#39;height&#39;] = height
            self.exponencial = Button(self.frame2, text=&quot;Modelo exponencial&quot;)
            self.exponencial[&#39;width&#39;] = width
            self.exponencial[&#39;height&#39;] = height
            self.normal = Button(self.frame2, text=&quot;Modelo normal&quot;)
            self.normal[&#39;width&#39;] = width
            self.normal[&#39;height&#39;] = height
            
            self.binomial.pack()
            self.hipergeometrico.pack()
            self.geometrico.pack()
            self.poisson.pack()
            self.uniforme.pack()
            self.exponencial.pack()
            self.normal.pack()

            self.binomial.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.hipergeometrico.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.geometrico.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.poisson.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.uniforme.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.exponencial.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.normal.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
        def clica_botao(self, event):
            janela = Tk()
            if event.widget == self.binomial:
                janela.title(&quot;Modelo binomial&quot;)
                JanelaBinomial(janela)
            elif event.widget == self.hipergeometrico:
                janela.title(&quot;Modelo hipergeométrico&quot;)
                JanelaHipergeometrico(janela)
            elif event.widget == self.geometrico:
                janela.title(&quot;Modelo geométrico&quot;)
                JanelaGeometrico(janela)
            elif event.widget == self.poisson:
                janela.title(&quot;Modelo de Poisson&quot;)
                JanelaPoisson(janela)
            elif event.widget == self.uniforme:
                janela.title(&quot;Modelo uniforme&quot;)
                JanelaUniforme(janela)
            elif event.widget == self.exponencial:
                janela.title(&quot;Modelo exponencial&quot;)
                JanelaExponencial(janela)
            elif event.widget == self.normal:
                janela.title(&quot;Modelo normal&quot;)
                JanelaNormal(janela)
            janela.mainloop()

    class Grafico:
        def __init__(self, raiz):
            self.width = 400
            self.height = 400
            self.canvas = Canvas(raiz, width=self.width, height=self.height)
            self.canvas.pack()
        def set_modelo(self, modelo_discreto, funcao, limiteX1, limiteX2, acumulada):
            self.modelo = modelo_discreto
            self.funcao = funcao
            self.desenha(limiteX1, limiteX2, acumulada)
            
    class GraficoDiscreto(Grafico):
        def desenha(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            try:
                variacao = self.modelo.variacao()
            except:
                if isinstance(self.modelo, Geometrico):
                    i = 1
                    while(self.modelo.F(i) &lt; 0.95):
                        i += 1
                        if i &gt; 100:
                            break
                    variacao = [x for x in range(1, i + 1)]
                elif isinstance(self.modelo, Poisson):
                    i = 0
                    while(self.modelo.F(i) &lt; 0.95):
                        i += 1
                        if i &gt; 100:
                            break
                    variacao = [x for x in range(0, i + 1)]
            variacao.insert(0, variacao[0] - 1)
            variacao.insert(0, variacao[0] - 2)
            variacao.append(variacao[-1] + 1)
            variacao.append(variacao[-1] + 2)
            #retas x e y, respectivamente
            reta_y_posicao_x = self.width/float(len(variacao)) * (math.fabs(0 - variacao[0])) + 20
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            if 0 in variacao:
                self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            else:
                reta_y_posicao_x = 20
            #desenha os pontos
            for ponto in variacao:
                try:
                    probabilidade = self.funcao(ponto)
                    x = self.width/float(len(variacao)) * (math.fabs(ponto - variacao[0])) + 20
                    y = (self.height - 40) * probabilidade
                    if limiteX1 != None and limiteX2 != None:
                        if limiteX1 &lt;= ponto &lt;= limiteX2:
                            self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;red&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;red&#39;)
                        else:
                            self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;black&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                    else:
                        self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;black&#39;)
                        self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                except: pass
            limite = 11
            if limite &gt; len(variacao):
                limite = len(variacao)
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * (len(variacao) / float(limite))
                if index != int(index):
                    index += 1
                index = int(index)
                x = self.width/float(len(variacao)) * (math.fabs(variacao[index] - variacao[0])) + 20
                self.canvas.create_text(x, self.height - 10, text=str(variacao[index]))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height * i/11.0 
                self.canvas.create_text(reta_y_posicao_x - 10, self.height - y - 20, text=str(0.1 * i))

    class JanelaDiscreta:
        def __init__(self, top_level, *parametros):
            self.top_level = top_level
            self.frame_left = Frame(top_level)
            self.frame_left.pack(side=LEFT)
            self.frame_right = Frame(top_level)
            self.frame_right.pack(side=RIGHT)
            self.frame_params = {}
            self.entries = {}
            for i in range(len(parametros)):
                parametro = parametros[i]
                self.frame_params[parametro] = Frame(self.frame_left)
                self.frame_params[parametro].pack()
                Label(self.frame_params[parametro], text=parametro).pack(side=LEFT)
                self.entries[parametro] = Entry(self.frame_params[parametro])
                self.entries[parametro].pack()
            self.frame_botao_ok = Frame(self.frame_left)
            self.frame_botao_ok.pack()
            self.botao_ok = Button(self.frame_botao_ok, text=&quot;Gerar&quot;)
            self.botao_ok[&#39;width&#39;] = 30
            self.botao_ok.pack()
            self.botao_ok.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_ok)
            self.frame_fp = Frame(self.frame_right)
            self.frame_fp.pack(side=LEFT)
            self.frame_fda = Frame(self.frame_right)
            self.frame_fda.pack(side=LEFT)
            Label(self.frame_fp, text=&quot;Função de probabilidade:&quot;).pack()
            self.graficoFd = GraficoDiscreto(self.frame_fp)
            Label(self.frame_fda, text=&quot;Função de distribuição acumulada:&quot;).pack()
            self.graficoF = GraficoDiscreto(self.frame_fda)
            self.frame_1 = Frame(self.frame_left)
            self.frame_2 = Frame(self.frame_1)
            self.frame_2.pack()
            Label(self.frame_2, text=&quot;       P(X = x):&quot;).pack(side=LEFT)
            self.x = Entry(self.frame_2)
            self.x.pack()
            self.frame_3 = Frame(self.frame_1)
            self.frame_3.pack()
            Label(self.frame_3, text=&quot;             F(x):&quot;).pack(side=LEFT)
            self.F = Entry(self.frame_3)
            self.F.pack()
            self.frame_4 = Frame(self.frame_1)
            self.frame_4.pack()
            self.botao_calcula = Button(self.frame_4, text=&quot;Calcular&quot;)
            self.botao_calcula[&#39;width&#39;] = 30
            self.botao_calcula.pack()
            self.botao_calcula.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_calcula)
            self.frame_5 = Frame(self.frame_1)
            self.frame_5.pack()
            self.labelE = Label(self.frame_5, text=&quot;E(X): &quot;)
            self.labelE.pack()
            self.labelVar = Label(self.frame_5, text=&quot;Var(X): &quot;)
            self.labelVar.pack()
            self.labelP = Label(self.frame_5)
            self.labelP.pack()
            self.labelF = Label(self.frame_5)
            self.labelF.pack()
        def clica_botao_ok(self, event):
            self.graficoFd.set_modelo(self.modelo, self.modelo.fp, None, None, False)
            self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
            self.frame_1.pack()
            try:
                self.labelE.setParent(None)
                self.labelVar.setParent(None)
            except: pass
            self.labelE[&#39;text&#39;] = &quot;E(X): %.5f&quot; % self.modelo.e()
            self.labelVar[&#39;text&#39;] = &quot;Var(X): %.5f&quot; % self.modelo.var()
        def clica_botao_calcula(self, event):
            try:
                x = int(self.x.get())
                try:
                    self.labelP[&#39;text&#39;] = &quot;P(X = %d) = %.5f&quot; % (x, self.modelo.fp(x))
                    self.graficoFd.set_modelo(self.modelo, self.modelo.fp, x, x, False)
                except Exception, e:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
            except:
                if self.x.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot;:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, &quot;x deve ser um número inteiro&quot;, parent=self.top_level)
                self.graficoFd.set_modelo(self.modelo, self.modelo.fp, None, None, False)
                self.labelP[&#39;text&#39;] = &quot;&quot;
            try:
                x = float(self.F.get())
                self.labelF[&#39;text&#39;] = &quot;F(%.2f) = %.5f&quot; % (x, self.modelo.F(x))
                self.graficoF.set_modelo(self.modelo, self.modelo.F, 0, x, True)
            except:
                self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
                self.labelF[&#39;text&#39;] = &quot;&quot;
        
    class JanelaBinomial(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro n&quot;, &quot;Parâmetro p&quot;)
        def clica_botao_ok(self, event):
            n = self.entries[&quot;Parâmetro n&quot;].get()
            p = self.entries[&quot;Parâmetro p&quot;].get()
            try:
                self.modelo = Binomial(n, p)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaHipergeometrico(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro N&quot;, &quot;Parâmetro r&quot;, &quot;Parâmetro n&quot;)
        def clica_botao_ok(self, event):
            N = self.entries[&quot;Parâmetro N&quot;].get()
            r = self.entries[&quot;Parâmetro r&quot;].get()
            n = self.entries[&quot;Parâmetro n&quot;].get()
            try:
                self.modelo = Hipergeometrico(N, r, n)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaGeometrico(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro p&quot;)
        def clica_botao_ok(self, event):
            p = self.entries[&quot;Parâmetro p&quot;].get()
            try:
                self.modelo = Geometrico(p)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaPoisson(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro λ&quot;)
        def clica_botao_ok(self, event):
            alfa = self.entries[&quot;Parâmetro λ&quot;].get()
            try:
                self.modelo = Poisson(alfa)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)


    class GraficoContinuo(Grafico):
        def desenha(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            if isinstance(self.modelo, Uniforme):
                a = self.modelo.a
                b = self.modelo.b + 1
            elif isinstance(self.modelo, Exponencial):
                a = -1
                b = 0
                while self.modelo.F(b) &lt; 0.995:
                    b += 1
                    if b &gt; 100:
                        break
            elif isinstance(self.modelo, Normal):
                a = 0
                while self.modelo.F(a) &gt; 0:
                    a -= 1
                b = 0
                while self.modelo.F(b) &lt; 1:
                    b += 1
            l = math.fabs(b-a)/1000.0 
            tamanho = math.fabs(b-a) 
            variacao = [x*l+a for x in range(0, 1000)]
            #retas x e y, respectivamente
            reta_y_posicao_x = self.width/float(tamanho) * (math.fabs(0 - variacao[0])) + 20
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            if variacao[0] &lt;= 0 &lt;= variacao[-1]:
                self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            else:
                reta_y_posicao_x = 20
            #desenha os pontos
            for indice, ponto in enumerate(variacao):
                try:
                    if acumulada:
                        probabilidade = self.funcao(ponto)
                    else:
                        probabilidade = self.funcao(variacao[indice], variacao[indice+1]) * 100
                    x = self.width/float(tamanho) * (math.fabs(ponto - variacao[0])) + 20
                    y = (self.height - 40) * probabilidade
                    if limiteX1 != None and limiteX2 != None:
                        if limiteX1 &lt;= ponto &lt;= limiteX2:
                            self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;red&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;red&#39;)
                        else:
                            self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;black&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                    else:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;black&#39;)
                        self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                except: pass
            limite = 11
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * len(variacao) / float(limite)
                index = int(index) 
                tamanhoInicial = math.fabs(variacao[index] - variacao[0])
                tamanhoTotal = math.fabs(variacao[-1] - variacao[0])
                factor = tamanhoInicial / float(tamanhoTotal) 
                x = self.width * factor + 20
                self.canvas.create_text(x, self.height - 10, text=str(variacao[index]))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height * i/11.0 
                self.canvas.create_text(reta_y_posicao_x - 10, self.height - y - 20, text=str(0.1 * i))

        def desenha22(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            if isinstance(self.modelo, Uniforme):
                variacao = [x for x in range(int(self.modelo.a * 100), int((self.modelo.b + 1) * 100 ))]
            elif isinstance(self.modelo, Exponencial):
                variacao = [x for x in range(0, 10 * 100)]
            elif isinstance(self.modelo, Normal):
                inflexao = 3.5 * self.modelo.o2 + self.modelo.u
                inicial = (self.modelo.u - inflexao) * 100
                final = (self.modelo.u + inflexao) * 100
                variacao = [x for x in range(int(inicial), int(final))]
            #retas x e y, respectivamente
            reta_y_posicao_x = (self.width - 20)/float(len(variacao)) * (math.fabs(0 - variacao[0])) + 40
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            #desenha os pontos
            for ponto in variacao:
                if acumulada:
                    probabilidade = self.funcao(ponto/100.0)
                else:
                    probabilidade = self.funcao(ponto/100.0, ponto/100.0 + 1)
                x = (self.width+40)/float(len(variacao)) * (math.fabs(ponto - variacao[0])) + 40
                y = (self.height - 30) * probabilidade
                if limiteX1 != None and limiteX2 != None:
                    if limiteX1 &lt;= ponto/100.0 + 0.5 &lt;= limiteX2:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;red&#39;)
                    else:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;black&#39;)
                else:
                    self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;black&#39;)
            limite = 11
            if limite &gt; len(variacao):
                limite = len(variacao)
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * (len(variacao) / float(limite))
                if index != int(index):
                    index += 1
                index = int(index)
                x = (self.width - 20)/float(len(variacao)) * (math.fabs(variacao[index] - variacao[0])) + 40
                self.canvas.create_text(x, self.height - 10, text=&quot;%.2f&quot; % (variacao[index]/100.0))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height / 11.0 * i 
                self.canvas.create_text(reta_y_posicao_x - 20, self.height - y - 10, text=str(0.1 * i))

    class JanelaContinua:
        def __init__(self, top_level, *parametros):
            self.top_level = top_level
            self.frame_left = Frame(top_level)
            self.frame_left.pack(side=LEFT)
            self.frame_right = Frame(top_level)
            self.frame_right.pack(side=RIGHT)
            self.frame_params = {}
            self.entries = {}
            for i in range(len(parametros)):
                parametro = parametros[i]
                self.frame_params[parametro] = Frame(self.frame_left)
                self.frame_params[parametro].pack()
                Label(self.frame_params[parametro], text=&quot;        &quot; +parametro).pack(side=LEFT)
                self.entries[parametro] = Entry(self.frame_params[parametro])
                self.entries[parametro].pack()
            self.frame_botao_ok = Frame(self.frame_left)
            self.frame_botao_ok.pack()
            self.botao_ok = Button(self.frame_botao_ok, text=&quot;Gerar&quot;)
            self.botao_ok[&#39;width&#39;] = 35
            self.botao_ok.pack()
            self.botao_ok.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_ok)
            self.frame_fp = Frame(self.frame_right)
            self.frame_fp.pack(side=LEFT)
            self.frame_fda = Frame(self.frame_right)
            self.frame_fda.pack(side=LEFT)
            Label(self.frame_fp, text=&quot;Função distribuição de probabilidade:&quot;).pack()
            self.graficoFd = GraficoContinuo(self.frame_fp)
            Label(self.frame_fda, text=&quot;Função de distribuição acumulada:&quot;).pack()
            self.graficoF = GraficoContinuo(self.frame_fda)
            self.frame_1 = Frame(self.frame_left)
            self.frame_2 = Frame(self.frame_1)
            self.frame_2.pack()
            Label(self.frame_2, text=&quot;P(a &lt;= x &lt;= b):&quot;).pack(side=LEFT)
            self.x1 = Entry(self.frame_2)
            self.x1.pack()
            self.x2 = Entry(self.frame_2)
            self.x2.pack(side=RIGHT)
            self.frame_3 = Frame(self.frame_1)
            self.frame_3.pack()
            Label(self.frame_3, text=&quot;                  F(x):&quot;).pack(side=LEFT)
            self.F = Entry(self.frame_3)
            self.F.pack()
            self.frame_4 = Frame(self.frame_1)
            self.frame_4.pack()
            self.botao_calcula = Button(self.frame_4, text=&quot;Calcular&quot;)
            self.botao_calcula[&#39;width&#39;] = 35
            self.botao_calcula.pack()
            self.botao_calcula.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_calcula)
            self.frame_5 = Frame(self.frame_1)
            self.frame_5.pack()
            self.labelE = Label(self.frame_5, text=&quot;E(X): &quot;)
            self.labelE.pack()
            self.labelVar = Label(self.frame_5, text=&quot;Var(X): &quot;)
            self.labelVar.pack()
            self.labelP = Label(self.frame_5)
            self.labelP.pack()
            self.labelF = Label(self.frame_5)
            self.labelF.pack()
        def clica_botao_ok(self, event):
            self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, None, None, False)
            self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
            self.frame_1.pack()
            try:
                self.labelE.setParent(None)
                self.labelVar.setParent(None)
            except: pass
            self.labelE[&#39;text&#39;] = &quot;E(X): %.5f&quot; % self.modelo.e()
            self.labelVar[&#39;text&#39;] = &quot;Var(X): %.5f&quot; % self.modelo.var()
        def clica_botao_calcula(self, event):
            try:
                x = float(self.x1.get())
                y = float(self.x2.get())
                try:
                    self.labelP[&#39;text&#39;] = &quot;P(%.2f &lt;= X &lt;= %.2f) = %.5f&quot; % (x, y, self.modelo.fdp(x, y))
                    self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, x, y, False)
                except Exception, e:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
            except:
                if self.x1.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot; or self.x2.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot;:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, &quot;x deve ser um número inteiro&quot;, parent=self.top_level)
                self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, None, None, False)
                self.labelP[&#39;text&#39;] = &quot;&quot;
            try:
                x = float(self.F.get())
                self.labelF[&#39;text&#39;] = &quot;F(%.2f) = %.5f&quot; % (x, self.modelo.F(x))
                self.graficoF.set_modelo(self.modelo, self.modelo.F, -9999999999999, x, True)
            except:
                self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
                self.labelF[&#39;text&#39;] = &quot;&quot;
        
    class JanelaUniforme(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Parâmetro a&quot;, &quot;Parâmetro b&quot;)
        def clica_botao_ok(self, event):
            a = self.entries[&quot;Parâmetro a&quot;].get()
            b = self.entries[&quot;Parâmetro b&quot;].get()
            try:
                self.modelo = Uniforme(a, b)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
                
    class JanelaExponencial(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Parâmetro α&quot;)
        def clica_botao_ok(self, event):
            a = self.entries[&quot;Parâmetro α&quot;].get()
            try:
                self.modelo = Exponencial(a)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaNormal(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Parâmetro μ&quot;, &quot;Parâmetro σ²&quot;)
        def clica_botao_ok(self, event):
            u = self.entries[&quot;Parâmetro μ&quot;].get()
            o2 = self.entries[&quot;Parâmetro σ²&quot;].get()
            try:
                self.modelo = Normal(u, o2)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e: 
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
                
    raiz = Tk()
    raiz.title(&quot;Mesquita 1.0&quot;)
    JanelaPrincipal(raiz)
    raiz.mainloop()
</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Things That Can Make Your Java Programs Better]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/10/18/little-things-that-can-make-your-java-programs-better/"/>
    <updated>2014-10-18T11:17:45-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/10/18/little-things-that-can-make-your-java-programs-better</id>
    <content type="html"><![CDATA[<p>On the past months I&rsquo;ve been reading this incredible book called <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672">Refactoring: Improving the design of existing code</a>, by Martin Fowler.</p>

<p>This one is classic on Software Engineering, and somewhat changed the way I think about software design in general.</p>

<p>In the book there are dozens or hundreds of examples and tips. I gathered <strong>five</strong> that I consider easier and simpler to be applied but still have some impact on final product. Those tips, though inspired in the book, are also product of my own experience.</p>

<p>I picked Java cause that&rsquo;s my more familiar language and it&rsquo;s also the book language choice.</p>

<!-- more -->


<h2>1. Do not create a &ldquo;set&rdquo; method for an attribute that can&rsquo;t change</h2>

<p>This tip seems a bit foolish, and it really is, but you won&rsquo;t believe the amount of times this mistake is done over and over again.</p>

<p>But, wait! Does an attribute that can&rsquo;t change really make sense? It does! It&rsquo;s too common nowadays to use some form of ORM (Object Relation Mapping), where some attribute will become the primary key. Allowing the programmer to change the attribute that representates the primary key may lead to some form of inconsistency in some extreme cases.</p>

<p>If you aren&rsquo;t still convinced, just remember: Why wasting time doing something unnecessary? Less lines = better!</p>

<h2>2. Do not allow classes modify other classes collections</h2>

<p>This tip seems bit &ldquo;fishy&rdquo; at first. Actually, classes can indeed modify other classes collections, the problem here is the way it&rsquo;s done. Let me show you by example:</p>

<figure class='code'><figcaption><span>System.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsers</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>PrivacyInvader.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivacyInvader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">System</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">getUsers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">getUsers</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What&rsquo;s the problem of this design?</p>

<p>The problem is that the &ldquo;PrivacyInvader&rdquo; class is adding and removing elements of &ldquo;users&rdquo; collection from System in a direct way. Let&rsquo;s suppose you are using this collection to persist into your database from times to times. Now imagine that any class can insert any user, not respecting any constraint you put in this process, as, for example, a repeated user login. What will happen? Yea, you guessed right&hellip;</p>

<p>Another problem, this way a bit more subtile, is that &ldquo;User&rdquo; is being created in an inappropriated place. If we allow such things to happen, the User construtor will be called all over the code. What if now you want to change its signature? That&rsquo;s a classic problem of coupling. PrivacyInvader is knowing too much about User, where the only one who should know that much is that one that will really use it, in this case, &ldquo;System&rdquo;.</p>

<p>Now how do we fix all that? Let&rsquo;s start fixing the second problem listed.</p>

<figure class='code'><figcaption><span>System.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsers</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>PrivacyInvader.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivacyInvader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">System</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Much better now! Now User class coupling was reduced to System class. So what do we do now to avoid direct access to our collection? One way would be to remove the &ldquo;get&rdquo; method, but this is a sub-optimal solution, since sometimes we do really need to access the collection.</p>

<p>Happily, Java provides us an elegant solution to solve this problem: Collections.unmodifiable!</p>

<p>Collections.unmodifiable is a set of methods which receive a collection and return this collection modified in such way that it doesn&rsquo;t allow any insert or delete method, only search methods as &ldquo;get&rdquo;! Awesome, isn&rsquo;t it? :P</p>

<p>Here is some supported methods:</p>

<ul>
<li>Collections.unmodifiableList(originalList);</li>
<li>Collections.unmodifiableSet(originalSet);</li>
<li>Collections.unmodifiableMap(originalMap);</li>
<li>Collections.unmodifiableCollection(originalCollection);</li>
</ul>


<p>And that&rsquo;s our solution using this little trick:</p>

<figure class='code'><figcaption><span>Sistema.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also notice we removed the &ldquo;set&rdquo; method for the collection. The reason was explained in topic #1 :P</p>

<h2>3. Let a method be public only if really necessary</h2>

<p>Some OOPs gurus say that the worth of a class is its interface. And I can&rsquo;t agree more. Simpler interfaces are easier to use, you don&rsquo;t need to search the method that does &ldquo;this&rdquo; or &ldquo;that&rdquo; because they are fewer.</p>

<p>Of course, I&rsquo;m not saying: Create as less methods as possible. What I&rsquo;m saying is: Create as much methods as possible (indeed, it&rsquo;s even encouraged, since more methods lead to smaller methods and smaller methods are easier to understand), but let all the auxiliar methods <strong>private</strong>.</p>

<h2>4. Know when to use Enum and when to use Inheritance</h2>

<p>That&rsquo;s a trick one, isn&rsquo;t it? Enum is a big ally. It saves times. But enums are almost always followed by switch statements. And switch statements are evil. Why? Because they are not flexible enough to change. If you want to add a new enum value, for example, you must have to change ALL the switch statements that use that enum. And it&rsquo;s <strong>bad</strong>! Changes like that almost always lead to bugs. Here is an example:</p>

<figure class='code'><figcaption><span>Role.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TRAINEE</span><span class="o">,</span> <span class="n">JUNIOR</span><span class="o">,</span> <span class="n">EXPERT</span><span class="o">,</span> <span class="n">SENIOR</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Developer.java </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Developer</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Role</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">TRAINEE:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">JUNIOR:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">EXPERT:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">2000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">SENIOR:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">4000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">RoleException</span><span class="o">(</span><span class="s">&quot;Invalid role.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">TRAINEE:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">JUNIOR</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">JUNIOR:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">EXPERT</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">EXPERT:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">SENIOR</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could be done is a similar way using Inheritance and polymorphism:</p>

<figure class='code'><figcaption><span>Role.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Role</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Trainee.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Trainee</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Junior</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Junior.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Junior</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Expert</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Expert.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Expert</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Senior</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Senior.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Senior</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">4000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Developer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Developer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Role</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setRole</span><span class="o">(</span><span class="n">Role</span> <span class="n">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">getSalary</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">promote</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very similar to <em>State</em> pattern from the Gange Of Four.</p>

<p>But anyway, what&rsquo;s the advantages of one over another?</p>

<p>The advantage of the second solution in comparison to the first is that, if we want to add a new role in the hierarchy, we don&rsquo;t need to modify any line of code other than the new class itself.</p>

<p>But, hey! I&rsquo;m not saying to throw the Enum in the gargabe and never use it again. Far from it. What I&rsquo;m trying to say is that there are situations where the enum is not really appropriate. A role of thumb is: Never use enum to representate a hierarchy that can change. Use inheritance instead!</p>

<h2>5. Use affirmatives instead of negatives sentences in conditionals</h2>

<p>This tip is really simple. It won&rsquo;t affect your code quality directly, but it may make your code more readable, and that&rsquo;s so important that I can&rsquo;t emphasize it enough!</p>

<p>But why are affirmatives sentences more readable than negatives? Well, just try to read the following sentences:</p>

<blockquote><p>I do not want to not to go to Shopping</p></blockquote>

<p>And then compare to this:</p>

<blockquote><p>I want to go to Shopping</p></blockquote>

<p>Because in the core they mean the same things, with the difference the second contains redundant informations. Most of negatives sentences contain some kind of redundant information.</p>

<h2>Final thoughts</h2>

<p>Some tips were quite obvious and intuitives, and some weren&rsquo;t. Well, but so is life&hellip; I don&rsquo;t expect you to agree with all I said here, neither you should! It&rsquo;s through discussion we can grow up, so, if you have a different opinion from mine, don&rsquo;t hesitate to comment! See ya!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating User Authentification With Code Igniter]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/30/creating-user-authentification-with-code-igniter/"/>
    <updated>2014-09-30T07:45:45-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/30/creating-user-authentification-with-code-igniter</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a complete n00b in PHP. My first sites were done without a framework, I even got them to work, but the experience was a bit.. traumatizing, to say the least :P</p>

<p>I badly needed a framework to help me, but that wasn&rsquo;t necessary to spend more time learning how to use it than to developing the site. Oh boy, Code Igniter <em>is</em> that framework!</p>

<p>It&rsquo;s totally clean and intuitive, and it contains the only necessary to put it together.</p>

<p>In today&rsquo;s post I show you how to make a simple code authentification using it. Let&rsquo;s go!</p>

<p style="text-align:center;"> <a href="http://PicoleDeLimao.github.io/downloads/code/auth.zip">Click here to download the complete example</a></p>

<!-- more -->


<p>I designed this tutorial to a completly novice person. So if you already know a bit about this framework, I apologize in advance.</p>

<p>And was a prerequisite I assume that you aready have a HTTP local server that supports PHP. If you don&rsquo;t, don&rsquo;t worry, you can do it with a <a href="https://www.apachefriends.org/pt_br/index.html">LAMP software</a>.</p>

<h2>&ldquo;Installing&rdquo; the framework</h2>

<p>Now let&rsquo;s download the CodeIgniter! :D</p>

<p>Go to <a href="https://ellislab.com/codeigniter">CodeIgniter site</a> and click on Download.</p>

<p>To create a new project with it, you just need to copy and paste the CodeIgniter folder. Damn, the simplicity makes me want to cry! T_T</p>

<h2>Creating our database</h2>

<p>Our first task is to create our database. We are going to need a User containing name, login and password, so our database will have only one table, and it&rsquo;s pretty simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='SQL'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="k">User</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">login</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">password</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
</span><span class='line'>  <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="o">`</span><span class="n">login</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">login</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">latin1</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">1</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To link your database to the CodeIgniter, go to your project&rsquo;s folder > application > config > database.php</p>

<p>In the lines 52 to 54, you can find the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$db</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">][</span><span class="s1">&#39;username&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">][</span><span class="s1">&#39;password&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">][</span><span class="s1">&#39;database&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
You just need to fill it with the informations related to your database.</p>

<h2>Creating the Views</h2>

<p>CodeIgniter, as most frameworks, use the MVC pattern. It separates the visualization of the data (views: HTML, CSS, &hellip;) from the business logic (models: PHP itself, including database queries) and it has a controller that serves as a bridge between the two.</p>

<p>Let&rsquo;s start creating the views, and right after the models and for last the controller.</p>

<p>To create a new view, go to your project&rsquo;s folder > views and create a new HTML or PHP file right there. It&rsquo;s cool to make subfolders, to keep it well organized, you know?</p>

<p>Because of it, we are going to create the login and register views inside a subfolder called &ldquo;<em>auth</em>&rdquo;.</p>

<p>Inside this subfolder, create four files: <em>login.php</em>, <em>register.php</em>, <em>success.php</em> and <em>fail.php</em>.</p>

<p>At first, you could think in each file containing the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>But here&rsquo;s where the framework comes at the play! You don&rsquo;t need to repeat any HTML structure. You can refactor it into a file apart and reuse it in all files.</p>

<p>Because of that, we are going to create two other files: <em>header.php</em> and <em>footer.php</em>. The first containing the HTML header and the second containg the tags closure.</p>

<figure class='code'><figcaption><span>header.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">HTML</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">CodeIgniter</span> <span class="nx">User</span> <span class="nx">Auth</span><span class="o">&lt;/</span><span class="nx">title</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>footer.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s come back to the other four files we had created previously, starting with <em>login.php</em>:</p>

<figure class='code'><figcaption><span>login.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nx">form_open</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;input type=&quot;text&quot; name=&quot;login&quot; placeholder=&quot;Login&quot; required /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Password&quot; required /&gt;</span>
</span><span class='line'><span class="x">  &lt;button type=&quot;submit&quot;&gt;Log in&lt;/button&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;     </span>
</span><span class='line'><span class="x">&lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">base_url</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">index.php/register&quot;&gt;Click here to register!&lt;/a&gt;    </span>
</span></code></pre></td></tr></table></div></figure>


<p>This file is basically a form contaning two input fields: One for the login and another for the password.</p>

<p>Now there&rsquo;s a strange file in this file. Can you notice it? Actually two!</p>

<p>The first one is the <strong>echo form_open(&lsquo;login)</strong> statement. What does it do?</p>

<p>It basically creates a new form with the tag <code>&lt;form&gt;</code>, but with the difference it already set the action with the correct route. Don&rsquo;t worry, we&rsquo;ll talk about rotes later.</p>

<p>And the second strange thing is the <strong>echo base_url()</strong> statement right below the <code>&lt;/form&gt;</code>. It simply print the base url of our website. For example, in the case of this blog, it would print <em><a href="http://picoledelimao.github.io/">http://picoledelimao.github.io/</a></em>. It&rsquo;s important because sometimes you want to put a link based on the absolute path, but you don&rsquo;t want to say your site domain explicitly.</p>

<p><em>Take a breath now</em></p>

<p>Rested? Now let&rsquo;s go to the <em>register.php</em> file:</p>

<figure class='code'><figcaption><span>register.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nx">form_open</span><span class="p">(</span><span class="s1">&#39;new_register&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;Name&quot; required maxlength=&quot;100&quot; autofocus /&gt; </span>
</span><span class='line'><span class="x">  &lt;input type=&quot;text&quot; name=&quot;login&quot; placeholder=&quot;Login&quot; required maxlength=&quot;30&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Password&quot; required maxlength=&quot;30&quot; /&gt;</span>
</span><span class='line'><span class="x">  &lt;button type=&quot;submit&quot;&gt;Cadastrar&lt;/button&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It follows the same logic of the login.php file. Just noticed the additional attribute &ldquo;<em>maxlength</em>&rdquo; on the input fields. I put it so it can match the constraints I defined on our database. It&rsquo;s not really essential.</p>

<p>And, for last, the <em>success.php</em> and <em>fail.php</em> files, that will show messages to ther user based on his success in logging in. They don&rsquo;t have any trick:</p>

<figure class='code'><figcaption><span>fail.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nx">Fail</span> <span class="nx">to</span> <span class="nb">log</span> <span class="nx">in</span><span class="o">.</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;index&quot;</span><span class="o">&gt;</span><span class="k">Try</span> <span class="nx">again</span><span class="o">.&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>success.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nx">Hello</span><span class="p">,</span> <span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nv">$user</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">. You are logged in!</span>
</span><span class='line'><span class="x">&lt;a href=&quot;logout&quot;&gt;Click here to log out.&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>Hey!! You said it didn&rsquo;t have any trick! So what about this variable $user?</p></blockquote>

<p>Yea, I lied&hellip; Sorry about that :P</p>

<p>You can send some data to the views through the controllers (remember I said the controller was a bridge between models and views?). In this case, $user variable representates the user name. But don&rsquo;t worry, we&rsquo;ll use how it works with more details later.</p>

<p><strong>Done</strong>! Your views folder must have the following structure:</p>

<ul>
<li>views

<ul>
<li>auth

<ul>
<li>header.php</li>
<li>footer.php</li>
<li>login.php</li>
<li>register.php</li>
<li>fail.php</li>
<li>success.php</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Creating the models</h2>

<p>The models, in CodeIgniter, stand in the application > models folder. Let&rsquo;s start creating our own. We are just going to need one, and to it we will delegate all the database queries.</p>

<p>Create a file called <strong>usermodel.php</strong>. Every model in CodeIgniter has the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">NAME</span> <span class="k">extends</span> <span class="nx">CI_Model</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In our case, it&rsquo;d be something like that:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">CI_Model</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Another important thing is, before we use our database, we need to load it! We can do it in the own class constructor:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">CI_Model</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">database</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>
Our simple model will have only two methods: <em>login</em> and <em>register</em>.</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">CI_Model</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">database</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">function</span> <span class="nf">register</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s start with the <em>login</em> method. What it does is basically pretty simple: It looks the User table searching for a user containg the same login and password passed through the parameters. In case it finds it, it returns true.</p>

<p>Of course, we aren&rsquo;t fool to the point to put the original password on our database. We need some kind of encryption to store the password. I will use a famous one called <a href="http://pt.wikipedia.org/wiki/MD5">MD5</a>.</p>

<p>Now to search the table for a user containg the same login and password, we are going to need a SELECT clausure. Gladly, CodeIgniter gives us a simpler way to do that, using <a href="https://ellislab.com/codeigniter/user-guide/database/active_record.html">Active Record</a>.</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">function</span> <span class="nf">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$password</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Active Record is called that way because some queries are kept in the memory, avoiding double work in case you use the same query again later.</p>

<p>The above block statement is selecting all columns where its login is equals to the passed login and its password is equals to the passed <strong>encrypted</strong> password.</p>

<p>Now to get the resulting rows, we just need to apply the method &ldquo;<em>get</em>&rdquo;. We don&rsquo;t need to get any other information other than if there is any resulting row or not (if there&rsquo;s, it means the passed user is valid and so it can login). To check the number of resulting rows, we can use the method &ldquo;<em>num_rows</em>&rdquo;:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">function</span> <span class="nf">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$password</span><span class="p">));</span>
</span><span class='line'>  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">num_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so the method login is ready! It wasn&rsquo;t complicated, was it?</p>

<p>Now let&rsquo;s go to the register method now. It works in a similiar way, but now we aren&rsquo;t interesting in selecting rows, but inserting them. Gladly, there&rsquo;s also a magical method for this task:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">function</span> <span class="nf">register</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exists</span><span class="p">(</span><span class="nv">$login</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="nv">$login</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$password</span><span class="p">)</span>
</span><span class='line'>  <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The magical method I&rsquo;m talking about is the &ldquo;<em>$this->db->insert</em>&rdquo;. It receives two arguments: A string containing the table name, and an associative array containing the columns name and their values.</p>

<p>In the above example, I&rsquo;m inserting a new row to the <strong>User</strong> table with the name, login and password passed through the parameters.</p>

<p>There&rsquo;s another thing in our code: The method &ldquo;<em>exists</em>&rdquo;. What it does is to search the table for an user containing the given login and returns true if it finds it. Remember! The login is unique. So we need to check it before to insert it.</p>

<p>However, it is not a built-in method. Therefore, here is its code:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">exists</span><span class="p">(</span><span class="nv">$login</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">num_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think you can figure it out from the <em>login</em> method, since they are both very similar.</p>

<p>And it&rsquo;s <strong>done</strong>! Our complete model is here:</p>

<figure class='code'><figcaption><span>usermodel.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">CI_Model</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">database</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$password</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">num_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">private</span> <span class="k">function</span> <span class="nf">exists</span><span class="p">(</span><span class="nv">$login</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">num_rows</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">register</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exists</span><span class="p">(</span><span class="nv">$login</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="nv">$login</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$password</span><span class="p">)</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating the controller</h2>

<p>Finally! Let&rsquo;s work on the controller. Let&rsquo;s start creating a file called <strong>user.php</strong> on application > controllers folder. This file has the following structure:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, as you assumed, the default structure of a controller in CodeIginiter. All them inherit from CI_Controller.</p>

<p>We can also define which models we are going to use. It must be done inside your controller constructor in the following way:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span> 
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">model</span><span class="p">(</span><span class="s2">&quot;usermodel&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need more models, just copy/paste the &ldquo;<em>$this->load->model</em>&rdquo; statement and pass to it the name of the file where the model is.</p>

<p>We also need to load some utils:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">helper</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="s1">&#39;form&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">model</span><span class="p">(</span><span class="s2">&quot;usermodel&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create the <strong>view</strong> method, that will receive a file inside the views folder and will join it with the header and the footer to make the complete page. CodeIgniter gives us an interesting method to do that, called &ldquo;<em>$this->load->view</em>&rdquo;.</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/header&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/footer&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now we already have a method to visualize our pages, let&rsquo;s start creating methods to show those pages.</p>

<p>The first one is the &ldquo;<em>index</em>&rdquo; method, that will show the initial page.</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/login&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmmmm&hellip; Quite easy. :)
It just call the method &ldquo;view&rdquo; passing as argument the page &ldquo;auth/login&rdquo; we had create on the beginning of this tutorial.</p>

<p>Now let&rsquo;s do the same thing to the pages &ldquo;<em>register</em>&rdquo;, &ldquo;<em>fail</em>&rdquo; and &ldquo;<em>success</em>&rdquo;:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">register</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/register&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">fail</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/fail&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">success</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/success&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are cool methods, but how do we access them through a URL? It&rsquo;s time to talk about routing. Routing is just like that: The process of associate a method to an URL!</p>

<p>By default, each public method inside the controller is accessible through the following link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;url_base&gt;</span>/index.php/<span class="nt">&lt;controller_name&gt;</span>/<span class="nt">&lt;method_name&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what do we really want is to reduce the URL to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;url_base&gt;</span>/index.php/<span class="nt">&lt;method_name&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because it&rsquo;s simpler! :)</p>

<p>In order to do that, go to application > config > routes.php. On line 41, change &ldquo;default_controller&rdquo; to &ldquo;user&rdquo;:</p>

<figure class='code'><figcaption><span>routes.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;default_controller&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now let&rsquo;s define the routes to the methods we created in the controller:</p>

<figure class='code'><figcaption><span>routes.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;index&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/index&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;success&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/success&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;fail&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/fail&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;register&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/register&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s simple to understand: The key of the <em>$route</em> array is actually the link after the base url. For example:</p>

<p><code>$route["success"] will turn into base_url/success</code></p>

<p>And its value is the method of the controller that it&rsquo;s associated. In the case of success, for example, it&rsquo;s associated with the method &ldquo;success&rdquo; of the controller &ldquo;user&rdquo;.</p>

<p>Gotcha? Good! :)</p>

<p>We also need to define some other routes necessary for our site. They are: <strong>login</strong> (route that will allow us to login), <strong>logout</strong> (routes that will allow us to log out) and <strong>new_register</strong> (route that will allow us to register a new user).</p>

<figure class='code'><figcaption><span>routes.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;login&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/login&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;logout&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/logout&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$route</span><span class="p">[</span><span class="s1">&#39;new_register&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;user/new_register&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those routes are a bit different from the others we created previously. They are not intended to show any page, but to proccess some information passed through the forms (a POST requisition). If you scroll up, remember we used the statement &ldquo;<em>form_open(&rdquo;&hellip;&ldquo;)</em>&rdquo; to create a new form? The passed argument to this method now representates a route here.</p>

<p>Of course, they, like any other route, are associate with a controller method, methods we didn&rsquo;t create yet, so let&rsquo;s do it!</p>

<p>Let&rsquo;s start with the login method. We know the form will send a <strong>POST</strong> requisition to this method. Let&rsquo;s get the fields data through the method &ldquo;<em>$this->input->post</em>&rdquo;, where the passed argument is the field name.</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is getting the values of the login and password fields.</p>

<p>Now we have them, we can use the <strong>UserModel</strong> model to validate those informations and check if the user is valid:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As showed, to use a model method, you use the following syntax; &ldquo;<em>$this->modelname->methodName(&hellip;)</em>&rdquo;.</p>

<p>Even more interesting: We didn&rsquo;t instanciate any model! So how can we use its methods? It&rsquo;s simple: When we load a model, CodeIgniter implicity create a class attribute named with the same name of the model but in lowercase and set it to a new instance of this model. That&rsquo;s why we can use &ldquo;<em>$this->modelname</em>&rdquo; without problems.</p>

<p>Now let&rsquo;s go back to our method. We know if the code enter on if block, the user is valid so it can login. But which actions should we do to indicate to the user that he is logged in? More importantly, how to notify the system that the <em>which</em> user is logged in?</p>

<p>We are going to need the information that which user is logged in in a PHP session. CodeIgniter provides us utility methods to ease the managment of sessions. In order to use them, we need to load the library on the controller constructor:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">library</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To raise the security level, CodeIgniter forces us to use a encription key to our sessions. To define it, go to application > config > config.php, on line 227, and set the value of the variable <strong>$config[&lsquo;encription_key&rsquo;]</strong> to any really long number.</p>

<p>Now back to our controller, add the following lines to our &ldquo;<em>login</em>&rdquo; method:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">set_userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Basically, it&rsquo;s setting a new variable to our session named &ldquo;user&rdquo; and its value containing the login of the logged user. We can access the stored value through the following statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This way we can now know which user is logged in, or null if there&rsquo;s any user logged in at the moment.</p>

<p>If you also need to store more informations about the user, we can follow the same logic, just by replacing &ldquo;user&rdquo; by another variable you want to use.</p>

<p>Now we already store the user, let&rsquo;s redirect the user to the success page.</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">set_userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
And you need to redirect the user to the fail page in case the login is incorrect:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">set_userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;fail&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you remember, there was a little trick on &ldquo;sucess.php&rdquo; view page. The variable &ldquo;<em>$user</em>&rdquo;! From where did it come from? We&rsquo;ll work on it now.</p>

<p>Before that, modify the method &ldquo;view&rdquo; on the controller to now receive an array called $data. This parameter will be optional, so set it as false as default value. On &ldquo;$this->load->view&rdquo; statement inside this method, pass the array too, so the pages can access it.</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">,</span> <span class="nv">$data</span><span class="o">=</span><span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/header.php&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/footer.php&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now, on &ldquo;success&rdquo; method, add the following method before calling the &ldquo;view&rdquo; method:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">success</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$data</span><span class="p">[</span><span class="s2">&quot;user&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now modify the method call right below to pass this array too:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">success</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$data</span><span class="p">[</span><span class="s2">&quot;user&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/success.php&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way the array $data containing the key &ldquo;user&rdquo; is passed to the page &ldquo;<em>success.php</em>&rdquo;, but there each array key is accessible through independent variables. For example, $data[&ldquo;user&rdquo;] becomes $user there. :)</p>

<p>Now we just need to add a little defailt on &ldquo;index&rdquo; method. If the user is already logged in, instead of showing the initial page where he can log in, it redirects him to the success page. It can be done easily through the &ldquo;redirect&rdquo; method:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/login&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As said previously, &ldquo;<em>$this->session->userdata</em>&rdquo; stores the user that is currently logged or null if there isn&rsquo;t any. Therefore, if there&rsquo;s a user logged in, this expression will evaluates true.</p>

<p>The &ldquo;<em>new_register</em>&rdquo; method is very similar to login method:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">new_register</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And now, for last, the logout method:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">unset_userdata</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">session_destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;refresh&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It basically destroys the session and redirects to the initial page.</p>

<p>And it&rsquo;s <strong>done</strong>! Our complete controller is this way:</p>

<figure class='code'><figcaption><span>user.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">helper</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="s1">&#39;form&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">model</span><span class="p">(</span><span class="s2">&quot;usermodel&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">library</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">function</span> <span class="nf">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">,</span> <span class="nv">$data</span><span class="o">=</span><span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/header.php&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="nv">$page</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/footer.php&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/login&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">register</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/register&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">fail</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/fail&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">success</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$data</span><span class="p">[</span><span class="s2">&quot;user&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s2">&quot;auth/success&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">login</span><span class="p">(</span><span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">set_userdata</span><span class="p">(</span><span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="nv">$login</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;fail&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">new_register</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$login</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;password&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">usermodel</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="s2">&quot;refresh&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>   <span class="k">public</span> <span class="k">function</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">session</span><span class="o">-&gt;</span><span class="na">unset_userdata</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">session_destroy</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;refresh&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>Wehoo!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Java) Hashboom]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/28/java-hashboom/"/>
    <updated>2014-09-28T15:19:25-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/28/java-hashboom</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s some fool game I made some time ago in an attempt to learn about Swing. Have fun!</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/hashboom.png" alt="" /></p>

<p style="text-align:center;"><a href="http://PicoleDeLimao.github.io/downloads/code/Hashboom.jar">Click here to download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PyInvaders]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/27/python-2-dot-7-pyinvaders/"/>
    <updated>2014-09-27T12:16:32-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/27/python-2-dot-7-pyinvaders</id>
    <content type="html"><![CDATA[<p>The last game of terminal games series, this time a copy of Space Invaders.</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/pyinvaders.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/PicoleDeLimao/05364c4b67d5ed265871/raw/20d1232a80ba6d335d78acb6f277d3855cb82395/PyInvaders.py" download="PyInvaders.py">Click here to download</a></center>




<!-- more -->


<p>Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/05364c4b67d5ed265871.js?file=PyInvaders.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------
# PyInvaders v3.0
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------
import time, os, platform, random, sys, select

class GameObject(object):
    def __init__(self, life, x, y, char):
        self.life = life
        self.x = x
        self.y = y
        self.char = char
    def getX(self):
        return self.x
    def getY(self):
        return self.y
    def getChar(self):
        return self.char
    def getLife(self):
        return self.life
    def setX(self, x):
        self.x = x
    def setY(self, y):
        self.y = y
    def damage(self):
        self.life -= 1
    def dead(self):
        return self.life &lt;= 0
    
class Game(object):
    def __init__(self):
        self.new_game()
    def new_game(self):
        self.spacecraft = GameObject(3, 13, 8, &quot;^&quot;)
        self.aliens = []
        self.create_aliens()
        self.walls = []
        self.create_walls()
        self.shoots = []
        self.shoots_aliens = []
        self.terrain = []
        self.create_terrain()
        self.score = 0
        self.cooldown = False
        self.start_screen = False
        self.mode_screen = False
        self.difficulty = 0
    def create_aliens(self):
        for x in range(5):
            for y in range(10):
                alien = GameObject(5-x, x+1, 4+y, &quot;@&quot;)
                self.aliens.append(alien)
    def create_walls(self):
        for i in range(4):
            wall = GameObject(1, 12, 3+i*3, &quot;~&quot;)
            self.walls.append(wall)
    def create_terrain(self):
        for x in range(15):
            self.terrain.append([])
            for y in range(15):
                self.terrain[-1].append(&quot; &quot;)
    def clear_terrain(self):
        for x in range(15):
            for y in range(15):
                self.terrain[x][y] = &quot; &quot;
    def draw_spacecraft(self):
        self.terrain[self.spacecraft.getX()][self.spacecraft.getY()] = self.spacecraft.getChar()
    def find_alien(self, x, y):
        for i in range(len(self.aliens)):
            alien = self.aliens[i]
            if alien.getX() == x and alien.getY() == y:
                return i
    def find_wall(self, x, y):
        for i in range(len(self.walls)):
            wall = self.walls[i]
            if wall.getX() == x and wall.getY() == y:
                return i
    def destroy_shoot(self, i):
        self.shoots.pop(i)
    def draw_shoots(self):
        for i in range(len(self.shoots) - 1, -1, -1):
            shoot = self.shoots[i]
            x = shoot.getX()
            y = shoot.getY()
            a = self.find_alien(x, y)
            if a != None:
                self.aliens[a].damage()
                if self.aliens[a].dead():
                    self.aliens.pop(a)
                    self.score += 10
                self.destroy_shoot(i)
            else:
                if x &gt; 0:
                    shoot.setX(x - 1)
                else:
                    self.destroy_shoot(i)
        for shoot in self.shoots:
            self.terrain[shoot.getX()][shoot.getY()] = shoot.getChar()
    def destroy_shoot_aliens(self, i):
        self.shoots_aliens.pop(i)
    def alien_shoot(self):
        x = random.randint(0, len(self.aliens)-1)
        alien = self.aliens[x]
        shoot = GameObject(1, alien.getX()+1, alien.getY(), &quot;:&quot;)
        self.shoots_aliens.append(shoot)
    def draw_shoots_aliens(self):
        if int(time.localtime().tm_sec) % (4-self.difficulty) == 0:
            self.alien_shoot()
        for i in range(len(self.shoots_aliens) - 1, -1, -1):
            shoot = self.shoots_aliens[i]
            x = shoot.getX()
            y = shoot.getY()
            m = self.find_wall(x, y)
            if m != None:
                self.walls[m].damage()
                if self.walls[m].dead():
                    self.walls.pop(m)
                self.destroy_shoot_aliens(i)
            elif x == self.spacecraft.getX() and y == self.spacecraft.getY():
                self.spacecraft.damage()
                if self.spacecraft.dead():
                    self.game_over()
                self.destroy_shoot_aliens(i)
            else:
                if x &lt; 14:
                    shoot.setX(x + 1)
                else:
                    self.destroy_shoot_aliens(i)
        for shoot in self.shoots_aliens:
            self.terrain[shoot.getX()][shoot.getY()] = shoot.getChar()
    def draw_aliens(self):
        for alien in self.aliens:
            self.terrain[alien.getX()][alien.getY()] = alien.getChar()
    def draw_walls(self):
        for wall in self.walls:
            self.terrain[wall.getX()][wall.getY()] = wall.getChar()
    def draw_terrain(self):
        for x in range(15):
            print &quot;&quot;.join(self.terrain[x])
    def update(self):
        if int(time.localtime().tm_sec) % self.difficulty == 0:
            self.cooldown = False
        print (&quot;SCORE&lt;%d&gt;&quot; % self.score).center(20)
        self.clear_terrain()
        self.draw_spacecraft()
        self.draw_shoots()
        self.draw_shoots_aliens()
        self.draw_aliens()
        self.draw_walls()
        self.draw_terrain()
        print (&quot;LIVES: %d&quot; % self.spacecraft.getLife()).center(20)
        if len(self.aliens) == 0:
            self.win()
            return False 
        elif self.spacecraft.dead():
            return False 
        return True 
    def move_right(self):
        if self.spacecraft.getY() &lt; 14:
            self.spacecraft.setY(self.spacecraft.getY() + 1)
    def move_left(self):
        if self.spacecraft.getY() &gt; 0:
            self.spacecraft.setY(self.spacecraft.getY() - 1)
    def shoot(self):
        if not self.cooldown:
            shoot = GameObject(1, 12, self.spacecraft.getY(), &quot;|&quot;)
            self.shoots.append(shoot)
            self.cooldown = True
    def game_over(self):
        clear_screen()
        print &quot;GAME OVER!!&quot;
        time.sleep(3)
    def win(self):
        clear_screen()
        print &quot;YOU ROCK!!&quot;
        time.sleep(3)
    def is_start_screen(self):
        return self.start_screen
    def start(self):
        if not self.mode_screen:
            print &quot;&quot;&quot;
                              ##          ##
                                ##      ##           
                              ##############
                            ####  ######  ####
                          ######################
                          ##  ##############  ##        
                          ##  ##          ##  ##
                                ####  ####
                                    ##
                                  ##
                                    ##
                                      ##
                                    ##
                                  ##
                                    ## &quot;&quot;&quot;
            print &quot;\n&quot;
            print &quot;PYINVADERS&quot;.center(70)
            print &quot;========= CREATED BY: =========&quot;.center(70)
            print &quot;ABNER MATHEUS (abner.math.c@gmail.com)&quot;.center(70)
            print &quot;\n&quot;
            print &quot;PRESS &#39;N&#39; TO START A NEW GAME OR &#39;ESC&#39; TO EXIT GAME.&quot;.center(70)
        else:
            if self.difficulty == 0:
                print &quot;&quot;&quot;DIFFICULTY:
1. EASY
2. AVERAGE
3. HARD

===================================
GAME CONTROLS:
===================================
&#39;A&#39; AND &#39;D&#39; TO MOVE THE SPACECRAFT.
&#39;S&#39; TO SHOOT.
                &quot;&quot;&quot;
            else:
                self.start_screen = True
    def new(self):
        self.mode_screen = True
    def set_difficulty(self, n):
        self.difficulty = n
       
def clear_screen():
    if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
    else: os.system(&quot;clear&quot;) 
    
#-------------------------------
# IO MANAGER
#--------------------------------
def controller_windows():
    import Tkinter
    class Controller:
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, key):
            event = key.keysym.lower()
            if event == &quot;escape&quot;:
                self.console.destroy()
            elif event == &quot;d&quot;:
                self.game.move_right()
            elif event == &quot;a&quot;:
                self.game.move_left()
            elif event == &quot;s&quot;:
                self.game.shoot()
            elif event == &quot;n&quot;:
                self.game.new()
            elif event == &quot;1&quot;:
                self.game.set_difficulty(1)
            elif event == &quot;2&quot;:
                self.game.set_difficulty(2)
            elif event == &quot;3&quot;:
                self.game.set_difficulty(3)
            return True
        def loop(self): 
            clear_screen()
            if not self.game.is_start_screen():
                self.game.start()
            else:
                self.game.update()
            self.console.after(250, loop)
        def start_game(self):
            self.game.start()
            self.console = Tkinter.Tk()
            self.console.bind_all(&#39;&lt;Key&gt;&#39;, self.press_key)
            self.console.withdraw()
            try:
                self.console.after(250, loop)
                self.console.mainloop()
            except KeyboardInterrupt: pass
    Controller()
    
def controller_unix():
    import termios, tty, thread
    class NonBlockingConsole(object):
        def __enter__(self):
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            return self
        def __exit__(self, type, value, traceback):
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        def get_data(self):
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                return sys.stdin.read(1)
            return False
     
    class Controller:
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, nbc):
            event = str(nbc.get_data())
            if event == &#39;\x1b&#39;:
                return False
            elif event == &quot;d&quot;:
                self.game.move_right()
            elif event == &quot;a&quot;:
                self.game.move_left()
            elif event == &quot;s&quot;:
                self.game.shoot()
            elif event == &quot;n&quot;:
                self.game.new()
            elif event == &quot;1&quot;:
                self.game.set_difficulty(1)
            elif event == &quot;2&quot;:
                self.game.set_difficulty(2)
            elif event == &quot;3&quot;:
                self.game.set_difficulty(3)
            return True
        def loop(self, threadName): 
            while self.running:
                time.sleep(250/1000.0)
                clear_screen()
                if not self.game.is_start_screen():
                    self.game.start()
                else:
                    if not self.game.update():
                        self.game = Game()
        def start_game(self):
            self.running = True
            thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
            try:
                with NonBlockingConsole() as nbc:
                    while self.press_key(nbc): pass
            except KeyboardInterrupt: pass
            self.running = False
    Controller()
    
if __name__ == &#39;__main__&#39;:
    if platform.system() == &quot;Windows&quot;:
        controller_windows()
    else:
        controller_unix()
</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Unit Tests With PHPUnit]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/26/creating-unit-tests-with-phpunit/"/>
    <updated>2014-09-26T19:04:37-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/26/creating-unit-tests-with-phpunit</id>
    <content type="html"><![CDATA[<p>Hi there, people and aliens (I&rsquo;m hoping that this post was preserved as humanity&rsquo;s historic treasure and it&rsquo;s being read by extraterrestrials civilizations right now. Joking, obviously :P).</p>

<p>In today&rsquo;s post we&rsquo;ll learn about something that everybody likes, it&rsquo;s just like cakes (whoever doesn&rsquo;t like cakes?! I dare you!). I&rsquo;m talking about TESTS, obviously! Wehooo! It chills me just by talking about.</p>

<p>Our focus, however, will be tests in PHP using a tool called PHPUnit. Don&rsquo;t worry, it&rsquo;s like taking candy from a baby. Follow me!</p>

<!-- more -->


<h2>Installing the environment</h2>

<p>Install is easy&hellip;</p>

<p>I&rsquo;m assuming here that you already have PHP installed, along with a HTTP server and all those stuff.</p>

<p>In order to install PHPUnit, we&rsquo;ll use the awesome <strong>Composer</strong>, a dependency manager very popular in PHPUnit community.</p>

<p>Download the composer through <a href="https://getcomposer.org/download/">this link</a> (scroll down, on Manual Download section), and place it inside your project&rsquo;s folder.</p>

<p>Now create a file inside your project&rsquo;s folder called <strong>composer.json</strong>, and write in it the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;require-dev&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;phpunit/phpunit&quot;</span><span class="o">:</span> <span class="s2">&quot;4.2.*&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;phpunit/php-invoker&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to install the dependencies (in this case, PHPUnit), the Composer receives a file in JSON format, where you just need to put the name of your dependencies and their version as a node of &ldquo;<em>require-dev</em>&rdquo; and it will magically install it for you. :) Fantastic, isn&rsquo;t it?</p>

<p>Now open the terminal, go to your project&rsquo;s folder, and type the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php composer.phar install
</span></code></pre></td></tr></table></div></figure>


<p>Done! The composer will now install it for you.</p>

<p>To run the downloaded tool, you just need to type it in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php ./vendor/bin/phpunit &lt;Unit_Test_File&gt;
</span></code></pre></td></tr></table></div></figure>


<p>But, of course, we don&rsquo;t have any unit test file yet! Let&rsquo;s fix it on next section.</p>

<h2>Creating unit tests</h2>

<p>Now here is the interesting part. Creating unit tests is an easy task with PHPHUnit. Whoever used some unit test tool will feel at ease.</p>

<blockquote><p>Hey! I don&rsquo;t have anything to test!</p></blockquote>

<p>Slow down, young man. I already took it for you. For didatic reasons, we are going to test some simple class that representates a number in scientific notation.</p>

<figure class='code'><figcaption><span> (ScientificNotation.php)</span> <a href='http://PicoleDeLimao.github.io/downloads/code/ScientificNotation.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotation</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">private</span> <span class="nv">$mantissa</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$exponent</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">,</span> <span class="nv">$exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setMantissa</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setExponent</span><span class="p">(</span><span class="nv">$exponent</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getMantissa</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setMantissa</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">=</span> <span class="nv">$mantissa</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getExponent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setExponent</span><span class="p">(</span><span class="nv">$exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">=</span> <span class="nv">$exponent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">()</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Can&#39;t add two numbers with different exponents.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">+=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">subtract</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">()</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Can&#39;t subtract two numbers with different exponents.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">-=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">multiply</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">*=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">+=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">divide</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">/=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">-=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">normalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this is indeed a very simple class. I assume here it was long ago since you&rsquo;ve been on high-school, so I&rsquo;ll refresh your memory about some simple operations that can be done with scientific notation&hellip; (<a href="#tests">Click here</a> if you wish to cut the explanation off).</p>

<p>First, every number in scientific notation is composed by two parts: The mantissa (the &ldquo;literal&rdquo; part of the number) and the exponent. For example, in the number:</p>

<p>2,5 x 10<sup>8</sup></p>

<p>Mantissa is 2,5 and exponent is 8.</p>

<p>Second, in order to multiply two numbers in scientific notation, we multiply the mantissas and sum the exponents. For example:</p>

<p>(2,5 x 10<sup>8</sup>) x (2,0 x 10<sup>2</sup>) = (5,0 x 10<sup>10</sup>)</p>

<p>And the division follows the same principle, we divide the mantissas and subtract the exponents.</p>

<p>The addition and subtraction is a bit troublesome, because it&rsquo;s just allowed between numbers that have the same exponent. In this case, we simply add or subtract the mantissas and keep the exponents.</p>

<p>The normalization of a number into scientific notation format is basically turning the mantissa in a single digit number. Doing this, we increment or decrement its exponent.</p>

<div id="tests"></div>


<p><strong>Done</strong>! Now get to work!</p>

<p>Create a file called <strong>ScientificNotationTest.php</strong>. This file will have the following template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotationTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the default template of an unit test in PHPUnit. Notice it must inherit from <strong>PHPUnit_Framework_TestCase</strong> class.</p>

<p>Also, it&rsquo;s important to import the class or file that is being tested. Usually it&rsquo;s done inside the <strong>setUp</strong> method, a special method that is called every time a test is about to be runned. Therefore, our classe will now include this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotationTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">require_once</span> <span class="s1">&#39;ScientificNotation.php&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>OK! Now we finally are ready to create the tests. The testing methods must <em>always</em> contain the prefix <strong>test</strong>, i.e., testXXX, testXYZ, &hellip; you got the idea.</p>

<p>The first test we are going to create is for the multiply operation. For this test, we just need two instances of ScientificNotation and call <em>multiply</em> over them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testMultiply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">multiply</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need some asserts to ensure our method is doing what it&rsquo;s supposed to do. The asserts I use most are: <em>testEquals</em> (test if two objects are equal), <em>assertTrue</em> (test if a boolean expression evaluates true) and <em>assertFalse</em>. You can see the complest list <a href="https://phpunit.de/manual/current/en/appendixes.assertions.html">here</a>.</p>

<p>If an assert evaluate false, for example, when I use assertEquals for two objects that are not really equal, then the program will print an error on PHPUnit console denoted by the letter &ldquo;F&rdquo;. Else, it will show the character &ldquo;.&rdquo;, indicating that the test is OK!</p>

<p>I will use assertEquals to compare the expected result with the returned result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testMultiply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">multiply</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quite easy, isn&rsquo;t it? :)</p>

<p>Let&rsquo;s skip the divide method, since it follows the same logic of the multiply. The next method to be tested is the <strong>add</strong>.</p>

<p>The add method must throw an exception case the parameter have a different exponent from the number I&rsquo;m adding. How to test it?</p>

<p>Simple! Surround the call inside a try/catch block, and make the test fail case the code <em>pass</em> through the point where it should throw an exception. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//should throw exception here</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it really throw an exception, then the $this->fail statement will never be called!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//must be ok</span>
</span><span class='line'>  <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">6.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>  <span class="c1">//must throw exception</span>
</span><span class='line'>  <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, here is our complete test unit class:</p>

<figure class='code'><figcaption><span> (ScientificNotationTest.php)</span> <a href='http://PicoleDeLimao.github.io/downloads/code/ScientificNotationTest.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotationTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">require_once</span> <span class="s1">&#39;ScientificNotation.php&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testMultiply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">multiply</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testDivide</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">divide</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//must be ok</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">6.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>      <span class="c1">//must throw exception</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testSubtract</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//must be ok</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">subtract</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>      <span class="c1">//must throw exception</span>
</span><span class='line'>      <span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">subtract</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testNormalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$unmormalizedNumber1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">800.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$unnormalizedNumber2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">0.08</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To run the test, type in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php ./vendor/bin/phpunit ScientificNotationTest.php
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a test suite</h2>

<p>The example above serves us well if we intent to run a single test, but what if we need to run several tests? Then testing file-by-file would be extremely boring.</p>

<p>Gladly, there&rsquo;s a thing called test suite, that allows us to inform a file containing the names of all the tests we want to run and it will run all them for us automatically. How can it be done?</p>

<p>Easy! On your project&rsquo;s folder, create a file called <strong>phpunit.xml</strong>. This file must contain the following structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;phpunit&gt;</span>
</span><span class='line'>    <span class="nt">&lt;testsuites&gt;</span>
</span><span class='line'>      <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/testsuite&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/testsuites&gt;</span>
</span><span class='line'><span class="nt">&lt;/phpunit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each test suite, we just need to add a new node of the type &ldquo;<em>testsuite</em>&rdquo; to the parent node &ldquo;<em>testsuites</em>&rdquo;. It&rsquo;s important to name your test suites in order to be able to distinguish them.</p>

<p>To add a new unit test file to a test suite, we just need to add a new node of the type &ldquo;<em>file</em>&rdquo; to the parent node &ldquo;<em>testsuite</em>&rdquo;. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;phpunit&gt;</span>
</span><span class='line'>  <span class="nt">&lt;testsuites&gt;</span>
</span><span class='line'>      <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;suite1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;file&gt;</span>ScientificNotationTest.php<span class="nt">&lt;/file&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/testsuite&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/testsuites&gt;</span>
</span><span class='line'><span class="nt">&lt;/phpunit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to run the test suite, type in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php ./vendor/bin/phpunit --testsuite &lt;Name_of_the_Test_Suite&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Analyzing the test coverage</h2>

<p>An interesting thing I&rsquo;d like to talk about is test coverage. It is a quite important information, since the greater the coverage, the bigger the confidence you have in your code correctness.</p>

<p>To run the test coverage tool, it&rsquo;s necessary to install <strong>xDebug</strong>. If you use Windows, you can install it through <a href="http://www.xdebug.org/download.php">this link</a>. But if you use Ubuntu, there&rsquo;s an even easier way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>sudo apt-get install php5-xdebug
</span></code></pre></td></tr></table></div></figure>


<p>Now that you&rsquo;ve got the xDebug, to run the analysis you just need to type in the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php ./vendor/bin/phpunit --coverage-&lt;Output_Format&gt; &lt;Output_File&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The <em><code>&lt;Output_Format&gt;</code></em> representantes the format of the analysis result. It can be of different types: HTML, XML, PHP&hellip;</p>

<p>The <em><code>&lt;Output_File&gt;</code></em> is&hellip; the output file! Pretty obvious. :)</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>php ./vendor/bin/phpunit --coverage-html result
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>It will generate a HTML page called result containing the results of the analysis. When I open it, it show me the following informations:</p>

<p><img src="http://PicoleDeLimao.github.io/images/posts/phpunit-coverage.png" alt="" /></p>

<p>:)</p>

<p>That&rsquo;s it guys! I really hopes you&rsquo;ve liked. Unit tests are not so boring, are they? Sometimes it can be pretty fun, I dare to admit. hehe :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PyPac]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/19/python-2-dot-7-pypac/"/>
    <updated>2014-09-19T10:04:09-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/19/python-2-dot-7-pypac</id>
    <content type="html"><![CDATA[<p>Here is another game of my series, this time about the classic Pacman.</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/pypac.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/PicoleDeLimao/892bf12a4a185721485f/raw/22189a1fd7443e29256bef4f2ea2f6dd6a7c9f23/PyPac.py" download="PyPac.py">Click here to download</a></center>




<!-- more -->


<p>Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/892bf12a4a185721485f.js?file=PyPac.py'></script>
<noscript><pre><code>#!/usr/bin/python
# encoding: utf-8
#-----------------------------------------------------------------
# PyPac v1.0
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------------
import thread, time, termios, os, platform, sys, tty, select, math
from random import randint
from copy import copy

&quot;&quot;&quot;
Store a (x, y) coordinate of the terrain
&quot;&quot;&quot;
class Position:
    def __init__(self, x, y):
        self.x = x
        self.y = y 

&quot;&quot;&quot;
Representates the terrain of the map.
The terrain is a bidimensional matrix that is mapped through
a string passed
&quot;&quot;&quot;
class Terrain:
    GHOST = (Position(11, 4), Position(10, 6), Position(11, 6), Position(12, 6))
    PACMAN = Position(10, 8)
    GHOST_CHAR = &#39;^&#39;
    GHOST_WEAKEN_CHAR = &#39;*&#39;
    PACMAN_CHAR = &#39;◔&#39;
    BULLET = &#39;.&#39;
    GREATER_BULLET = &#39;0&#39;
    def __init__(self):
        self.terrain = map(lambda x: list(x), &quot;&quot;&quot;
  —————————————————— 
 |○•••|••••••••|•••○|
 |•——•|•——————•|•——•|
 |•|••••••••••••••|•|
—|•|•——•———-——•——•|•|—
  •••••••|   |••••••  
—|•|•——•——————•——•|•|—
 |•|•••••• •••••••|•|
 |•——•|•——————•|•——•|
 |○•••|••••••••|•••○|
  —————————————————— 
&quot;&quot;&quot;.replace(&quot;•&quot;, Terrain.BULLET).replace(&quot;○&quot;, Terrain.GREATER_BULLET).replace(&quot;—&quot;, &quot;=&quot;).split(&quot;\n&quot;))
    def is_blocked(self, position, direction):
        try:
            if position.x == 11 and position.y == 5 and direction == Direction.UPWARD: return False 
            char = self.terrain[position.y][position.x] 
            return char == &quot;|&quot; or char == &quot;=&quot; or char == &quot;-&quot;
        except: return True
    &quot;&quot;&quot;
    Makes the pacman eats bullets and increment game score in process
    &quot;&quot;&quot;
    def eat(self, context, pacman):
        position = self.terrain[pacman.position.y][pacman.position.x]
        if position == Terrain.BULLET:
            self.terrain[pacman.position.y][pacman.position.x] = &#39; &#39;
            context.context.score += 1 
        elif position == Terrain.GREATER_BULLET: 
            self.terrain[pacman.position.y][pacman.position.x] = &#39; &#39;
            context.context.score += 5  
            return True
        return False
    &quot;&quot;&quot;
    Verify is the terrain has no &#39;bullets&#39;
    &quot;&quot;&quot;
    def is_clear(self):
        for line in self.terrain:
            if &#39;.&#39; in line or &#39;0&#39; in line: return False
        return True
    @staticmethod
    def clear_screen():
        if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
        else: os.system(&quot;clear&quot;)
    &quot;&quot;&quot;
    Render the terrain on the screen
    &quot;&quot;&quot;
    def render(self, pacman, ghosts):
        Terrain.clear_screen()
        matrix = []
        for i in range(len(self.terrain)):
            matrix.append(list(self.terrain[i]))
        matrix[pacman.position.y][pacman.position.x] = Terrain.PACMAN_CHAR
        for ghost in ghosts:
            if ghost.is_weaken():
                matrix[ghost.position.y][ghost.position.x] = Terrain.GHOST_WEAKEN_CHAR
            else:
                matrix[ghost.position.y][ghost.position.x] = Terrain.GHOST_CHAR
        result = &quot;&quot;
        for i in range(len(matrix)):
            result += &quot;&quot;.join(matrix[i]) + &quot;\n&quot;
        print result

&quot;&quot;&quot;
Enumerate the possible directions that a walkable can take
&quot;&quot;&quot;
class Direction:
    FORWARD = 1
    BACKWARD = 2
    UPWARD = 3
    DOWNWARD = 4

&quot;&quot;&quot;
Representates a walkable object in the map (ghost and pacman)
&quot;&quot;&quot;
class Walkable:
    def __init__(self): pass
    def turn(self, direction):
        self.direction = direction
    &quot;&quot;&quot;
    Verify if given movement in a certain direction is possible
    &quot;&quot;&quot;
    def possible_movement(self, direction, terrain):
        if direction == Direction.FORWARD:
            return not terrain.is_blocked(Position(self.position.x + 1, self.position.y), direction)
        elif direction == Direction.BACKWARD:
            return not terrain.is_blocked(Position(self.position.x - 1, self.position.y), direction)
        elif direction == Direction.UPWARD:
            return not terrain.is_blocked(Position(self.position.x, self.position.y - 1), direction)
        elif direction == Direction.DOWNWARD:
            return not terrain.is_blocked(Position(self.position.x, self.position.y + 1), direction)
    &quot;&quot;&quot;
    Move the object toward its direction. Return false case the movement is not possible.
    &quot;&quot;&quot;
    def move(self, terrain):
        if self.direction == Direction.FORWARD and self.position.x &gt;= len(terrain.terrain[self.position.y]) - 1:
            self.position.x = 0
        elif self.direction == Direction.BACKWARD and self.position.x &lt;= 0:
            self.position.x = len(terrain.terrain[self.position.y]) - 1
        elif self.possible_movement(self.direction, terrain): 
            if self.direction == Direction.FORWARD:
                self.position.x += 1
            elif self.direction == Direction.BACKWARD:
                self.position.x -= 1
            elif self.direction == Direction.UPWARD:
                self.position.y -= 1
            elif self.direction == Direction.DOWNWARD:
                self.position.y += 1
        else: return False
        return True

&quot;&quot;&quot;
Representates the ghosts in the map.
A ghost is a walkable
&quot;&quot;&quot;
class Ghost(Walkable):
    def __init__(self, number):
        Walkable.__init__(self)
        self.position = copy(Terrain.GHOST[number])
        self.isWeaken = False
        self.direction = Direction.UPWARD
    &quot;&quot;&quot;
    Verify is ghost is weaken (frightened)
    &quot;&quot;&quot;
    def is_weaken(self):
        return self.isWeaken
    &quot;&quot;&quot;
    Weaken the ghost, making it &#39;eatable&#39; by Pacman
    &quot;&quot;&quot;
    def weaken(self):
        self.isWeaken = True
    &quot;&quot;&quot;
    Strengthen the ghost, making it dangerous to Pacman
    &quot;&quot;&quot;
    def strengthen(self):
        self.isWeaken = False

&quot;&quot;&quot;
Representates the Pacman
&quot;&quot;&quot;
class Pacman(Walkable):
    def __init__(self):
        Walkable.__init__(self)
        self.position = copy(Terrain.PACMAN)
        self.direction = Direction.FORWARD

&quot;&quot;&quot;
Main class of the game.
It receives the input of the user and maps it to its state.
&quot;&quot;&quot;
class Game:
    def __init__(self):
        self.lives = 3
        self.score = 0
        self.level = 1
        self.state = StateInitial(self)
    &quot;&quot;&quot;
    Main loop of the game
    &quot;&quot;&quot;
    def loop(self):
        self.state.loop()
    &quot;&quot;&quot;
    Set a direction of Pacman. Only work in StatePlaying.
    &quot;&quot;&quot;
    def set_direction(self, direction):
        self.state.set_direction(direction)
    &quot;&quot;&quot;
    Start a new game.
    &quot;&quot;&quot;
    def start_new_game(self):
        self.state.start_new_game()

&quot;&quot;&quot;
Superclass of states of a game
&quot;&quot;&quot;
class GameState:
    def __init__(self): pass
    def loop(self):  raise NotImplementedException()
    def set_direction(self, direction): raise NotImplementedException()
    def start_new_game(self): raise NotImplementedException()

&quot;&quot;&quot;
Initial screen of the game.
&quot;&quot;&quot;
class StateInitial(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
        self.context.lives = 3
        self.context.score = 0
        self.context.level = 1
    def loop(self): 
        message = &quot;&quot;&quot;
 ____  __ __  ____   ____    __ 
|    \|  |  ||    \ /    |  /  ]   ──▒▒▒▒▒────▄████▄─────
|  o  )  |  ||  o  )  o  | /  /    ─▒─▄▒─▄▒──███▄█▀──────
|   _/|  ~  ||   _/|     |/  /     ─▒▒▒▒▒▒▒─▐████──█──█──
|  |  |___, ||  |  |  _  /   \_    ─▒▒▒▒▒▒▒──█████▄──────
|  |  |     ||  |  |  |  \     |   ─▒─▒─▒─▒───▀████▀─────
|__|  |____/ |__|  |__|__|\____|
                                
GAME CONTROLS:
-----------------------------
PRESS &#39;N&#39; TO START A NEW GAME.
&#39;A&#39;, &#39;S&#39;, &#39;D&#39;, &#39;W&#39; TO MOVE.
&#39;ESC&#39; TO EXIT GAME.
-----------------------------

CREATED BY:
-----------------------------
ABNER MATHEUS (abner.math.c@gmail.com)
&quot;&quot;&quot;
        Terrain.clear_screen()
        print message
    def set_direction(self, direction): pass
    def start_new_game(self):
        self.context.state = StatePlaying(self.context) 

class StateGameOver(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
    def loop(self): 
        Terrain.clear_screen()
        print &quot;&quot;&quot;
  ____   ____  ___ ___    ___       ___   __ __    ___  ____  
 /    | /    ||   |   |  /  _]     /   \ |  |  |  /  _]|    \ 
|   __||  o  || _   _ | /  [_     |     ||  |  | /  [_ |  D  )
|  |  ||     ||  \_/  ||    _]    |  O  ||  |  ||    _]|    / 
|  |_ ||  _  ||   |   ||   [_     |     ||  :  ||   [_ |    \ 
|     ||  |  ||   |   ||     |    |     | \   / |     ||  .  \ 
|___,_||__|__||___|___||_____|     \___/   \_/  |_____||__|\_|
                                                              
PRESS &#39;N&#39; TO START A NEW GAME.&quot;&quot;&quot;
    def set_direction(self, direction): pass
    def start_new_game(self):
        self.context.state = StateInitial(self.context)

&quot;&quot;&quot;
Main state of the game.
Here is where the stuff happens.
&quot;&quot;&quot;
class StatePlaying(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
        self.start_new_level()
    &quot;&quot;&quot;
    Get the angle between two vectors.
    &quot;&quot;&quot;
    def __get_angle(self, w1, w2):
        return math.degrees(math.atan2((w2.position.y - w1.position.y), (w2.position.x - w1.position.x)))
    &quot;&quot;&quot;
    Convert a given angle in a direction.
    &quot;&quot;&quot;
    def __get_direction(self, angle):
        if 0 &lt;= angle &lt; 45:
            return Direction.FORWARD
        elif 45 &lt;= angle &lt; 135:
            return Direction.UPWARD
        elif 135 &lt;= angle &lt; 225:
            return Direction.BACKWARD
        elif 225 &lt;= angle &lt; 315:
            return Direction.DOWNWARD
        elif 315 &lt;= angle &lt; 360:
            return Direction.FORWARD
        return Direction.FORWARD
    &quot;&quot;&quot;
    Verify is two vectors are equal
    &quot;&quot;&quot;
    def __equals(self, p1, p2):
        return p1.x == p2.x and p1.y == p2.y
    &quot;&quot;&quot;
    Verify if two ghosts occupies the same tile.
    &quot;&quot;&quot;
    def __contains_others(self, movingGhost):
        for ghost in self.ghosts:
            if ghost != movingGhost:
                if self.__equals(ghost.position, movingGhost.position): return True
        return False
    &quot;&quot;&quot;
    Move the ghosts through the map
    &quot;&quot;&quot;
    def __move_ghosts(self):
        for ghost in self.ghosts:
            if (self.count_loop % 2 == 0 or self.count_loop % 3) and ghost.is_weaken(): continue
            if self.count_loop % 2 == 0 and not ghost.is_weaken(): continue
            if self.__equals(ghost.position, Terrain.GHOST[0]):
                ghost.turn(Direction.FORWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[1]):
                ghost.turn(Direction.FORWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[2]):
                ghost.turn(Direction.UPWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[3]):
                ghost.turn(Direction.BACKWARD)    
            else:
                angle = self.__get_angle(ghost, self.pacman)
                if ghost.is_weaken(): 
                    angle += 180
                ghost.turn(self.__get_direction(angle))
            old_position = copy(ghost.position)
            if ghost.direction == Direction.FORWARD:
                forbidden_direction = Direction.BACKWARD
            elif ghost.direction == Direction.BACKWARD:
                forbidden_direction = Direction.FORWARD
            elif ghost.direction == Direction.UPWARD:
                forbidden_direction = Direction.DOWNWARD
            elif ghost.direction == Direction.DOWNWARD:
                forbidden_direction = Direction.UPWARD
            count = 0 
            while self.__equals(ghost.position, old_position) or self.__contains_others(ghost):
                while True:
                    ghost.direction = randint(1, 4) 
                    if (ghost.possible_movement(ghost.direction, self.terrain) and ghost.direction != forbidden_direction) or count &gt; 100: break
                    count += 1
                ghost.move(self.terrain)
    &quot;&quot;&quot;
    Makes the Pacman eat (or being eaten) the ghosts, depending its state.
    &quot;&quot;&quot;
    def __eat_ghosts(self):
        for i in range(len(self.ghosts)):
            if self.__equals(self.ghosts[i].position, self.pacman.position):
                if self.ghosts[i].is_weaken():
                    self.ghosts[i].strengthen()
                    self.ghosts[i].position = copy(Terrain.GHOST[i])
                else:
                    self.lose_live()
    &quot;&quot;&quot;
    Render the screen (terrain + info)
    &quot;&quot;&quot;
    def __render(self):
        self.terrain.render(self.pacman, self.ghosts)
        print (&quot;LIVES: %d    SCORE: %d    LEVEL: %d&quot; % (self.context.lives, self.context.score, self.context.level))
    def loop(self): 
        self.count_loop += 1
        if self.terrain.is_clear():
            print &quot;&quot;&quot;
CONGRATULATIONS! 
A NEW LEVEL WILL START IN FEW SECONDS.&quot;&quot;&quot;
            time.sleep(1)
            self.context.level += 1
            self.start_new_level()
        self.__move_ghosts()
        self.pacman.move(self.terrain)
        self.__eat_ghosts()
        if self.countdown &gt; 0: self.countdown -= 1
        else:
            for ghost in self.ghosts: ghost.strengthen()
        if self.terrain.eat(self, self.pacman):
            for ghost in self.ghosts: ghost.weaken()
            self.countdown = 15
        self.__render()
    def set_direction(self, direction):
        if self.pacman.possible_movement(direction, self.terrain):
            self.pacman.turn(direction)
    def start_new_game(self):
        self.context.state = StateInitial(self.context)
    &quot;&quot;&quot;
    Start a new level. On a new level, lives and points are mantained.
    &quot;&quot;&quot;
    def start_new_level(self):
        self.terrain = Terrain()
        self.pacman = Pacman()
        self.ghosts = []
        for i in range(4): self.ghosts.append(Ghost(i))
        self.count_loop = 0
        self.countdown = 0
    &quot;&quot;&quot;
    Makes Pacman lose a life. 
    &quot;&quot;&quot;
    def lose_live(self):
        self.context.lives -= 1
        if self.context.lives &lt;= 0:
            self.context.state = StateGameOver(self.context)
        else:
            self.__render()
            print &quot;&quot;&quot;
YOU LOST A LIVE.&quot;&quot;&quot;
            time.sleep(2)
            self.pacman = Pacman()
            self.pacman = Pacman()
            self.ghosts = []
            for i in range(4): self.ghosts.append(Ghost(i))
            self.count_loop = 0
            self.countdown = 0

class NonBlockingConsole(object):
    def __enter__(self):
        self.old_settings = termios.tcgetattr(sys.stdin)
        tty.setcbreak(sys.stdin.fileno())
        return self
    def __exit__(self, type, value, traceback):
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
    def get_data(self):
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            return sys.stdin.read(1)
        return False

class Controller:
    SPEED = 0.2
    def __init__(self):
        self.game = Game() 
        self.start_game()
    def press_key(self, nbc):
        key = str(nbc.get_data())
        if key == &#39;\x1b&#39;: #ESC
            return False
        elif key == &#39;n&#39;: #Enter
            self.game.start_new_game()
        elif key == &#39;d&#39;: #Right arrow
            self.game.set_direction(Direction.FORWARD)
        elif key == &#39;a&#39;: #Left arrow
            self.game.set_direction(Direction.BACKWARD)
        elif key == &#39;w&#39;: #Up arrow
            self.game.set_direction(Direction.UPWARD)
        elif key == &#39;s&#39;: #Down arrow
            self.game.set_direction(Direction.DOWNWARD)
        return True
    def loop(self, threadName): 
        while self.running:
            time.sleep(Controller.SPEED)
            self.game.loop()   
    def start_game(self):
        self.running = True
        thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
        try:
            with NonBlockingConsole() as nbc:
                while self.press_key(nbc): pass
        except KeyboardInterrupt: pass
        self.running = False

if __name__ == &#39;__main__&#39;:
    Controller()</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PySnake]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/17/python-2-dot-7-pysnake/"/>
    <updated>2014-09-17T22:26:50-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/17/python-2-dot-7-pysnake</id>
    <content type="html"><![CDATA[<p>Good night, readers. I&rsquo;m on vacation! Wehoo! To comemorate, I came back to do what I like most, that is to create little games on terminal, like this one below:</p>

<p style="text-align:center;"><img src="http://PicoleDeLimao.github.io/images/posts/pysnake.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/PicoleDeLimao/300f93a9820c52e6a243/raw/916d003c2e82ef3d4026f4cf3e40ef31a6fd9f59/PySnake.py" download="PySnake.py">Click here to download</a></center>




<!-- more -->


<p>You can get the source code below. Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/300f93a9820c52e6a243.js?file=PySnake.py'></script>
<noscript><pre><code>#!/usr/bin/python
# encoding: utf-8
#-----------------------------------------------------------
# PyGame v2.0
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------
import os, platform, time, thread, sys, select, tty, termios
from random import randint

&quot;&quot;&quot;
Enumerate the directions that a snake can take
&quot;&quot;&quot;
class Direction:
    forward = 1
    backward = 2
    upward = 3
    downward = 4

&quot;&quot;&quot;
Control the movement and position of a snake
&quot;&quot;&quot;
class Snake:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    &quot;&quot;&quot;
    Turn the snake of direction
    &quot;&quot;&quot;
    def turn(self, direction):
        self.direction = direction
    &quot;&quot;&quot;
    Move the snake toward its direction
    Return false if the movement crossed the wall
    &quot;&quot;&quot;
    def move(self):
        if self.direction == Direction.forward:
            self.x += 1
            if self.x &gt;= self.width:
                self.x = 0
                return False
        elif self.direction == Direction.backward:
            self.x -= 1
            if self.x &lt; 0:
                self.x = self.width - 1
                return False
        elif self.direction == Direction.upward:
            self.y -= 1
            if self.y &lt; 0:
                self.y = self.height - 1
                return False
        elif self.direction == Direction.downward:
            self.y += 1
            if self.y &gt;= self.height:
                self.y = 0 
                return False
        return True
    &quot;&quot;&quot;
    Change snake&#39;s direction and move it at the same time
    &quot;&quot;&quot;
    def turn_and_move(self, direction):
        self.turn(direction)
        return self.move() 

&quot;&quot;&quot;
Keep information of a terrain object (fruit or obstacles
&quot;&quot;&quot;
class TerrainObject:
    &quot;&quot;&quot;
    Verify if given position if empty
    &quot;&quot;&quot;
    def __is_empty(self, x, y, context):
        try:
            for snake in context.snakes:
                if snake.x == x and snake.y == y: return False
            for obstacle in context.obstacles:
                if obstacle.x == x and obstacle.y == y: return False
            if context.fruit.x == x and context.fruit.y == y: return False
        except AttributeError: pass
        return True
    &quot;&quot;&quot;
    Build a object in a random place of the terrain
    &quot;&quot;&quot;
    def __init__(self, context):
        while True:
            x = randint(0, context.width - 1)
            y = randint(0, context.height - 1)
            if self.__is_empty(x, y, context): break
        self.x = x
        self.y = y
    &quot;&quot;&quot;
    Verify if the snake&#39;s head hit that object
    &quot;&quot;&quot;
    def hit(self, snake):
        return self.x == snake.x and self.y == snake.y

&quot;&quot;&quot;
Keep information of the terrain
&quot;&quot;&quot;
class Terrain:
    __WHITE_SPACE = &#39; &#39;
    __SNAKE_BODY = &#39;0&#39;
    __FRUIT = &#39;*&#39;
    __OBSTACLE = &quot;~&quot;
    __HOR_BOUND = &quot;-&quot;
    __VER_BOUND = &quot;|&quot;
    &quot;&quot;&quot;
    Create a terrain of given width and height
    &quot;&quot;&quot;
    def __init__(self, width, height):
        self.width = width
        self.height = height
    &quot;&quot;&quot;
    Update terrain information using passed objects
    &quot;&quot;&quot;
    def __update(self, snakes, fruit, obstacles):
        self.matrix = [] 
        for i in range(self.height):
            self.matrix.append([])
            for j in range(self.width):
                self.matrix[i].append(Terrain.__WHITE_SPACE)
        self.matrix[fruit.y][fruit.x] = Terrain.__FRUIT
        for snake in snakes:
            self.matrix[snake.y][snake.x] = Terrain.__SNAKE_BODY
        for obstacle in obstacles:
            self.matrix[obstacle.y][obstacle.x] = Terrain.__OBSTACLE
    &quot;&quot;&quot;
    Return a string that shows a visual representation of the terrain
    &quot;&quot;&quot;
    def show(self, snakes, fruit, obstacles):
        self.__update(snakes, fruit, obstacles)  
        horizontal_bound = &quot;.&quot; + Terrain.__HOR_BOUND * (self.width) + &quot;.&quot; + &quot;\n&quot;
        result = horizontal_bound
        for line in self.matrix:
            result += Terrain.__VER_BOUND + &quot;&quot;.join(line) + Terrain.__VER_BOUND + &quot;\n&quot;
        result += horizontal_bound
        return result

&quot;&quot;&quot;
Responsible to show elements in the screen
&quot;&quot;&quot;
class View:
    LOGO = &quot;&quot;&quot;
██████╗ ██╗   ██╗███████╗███╗   ██╗ █████╗ ██╗  ██╗███████╗
██╔══██╗╚██╗ ██╔╝██╔════╝████╗  ██║██╔══██╗██║ ██╔╝██╔════╝
██████╔╝ ╚████╔╝ ███████╗██╔██╗ ██║███████║█████╔╝ █████╗  
██╔═══╝   ╚██╔╝  ╚════██║██║╚██╗██║██╔══██║██╔═██╗ ██╔══╝  
██║        ██║   ███████║██║ ╚████║██║  ██║██║  ██╗███████╗
╚═╝        ╚═╝   ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝
&quot;&quot;&quot;
    INITIAL = LOGO + &quot;&quot;&quot;

GAME CONTROLS:
=============================================================
PRESS &#39;N&#39; TO START A NEW GAME.
&#39;A&#39;, &#39;S&#39;, &#39;D&#39; OR &#39;W&#39; KEYS TO MOVE THE SNAKE.
ESC TO EXIT GAME.
=============================================================

CREATED BY: 
-------------------------------------------------------------
ABNER MATHEUS (abner.math.c@gmail.com)
&quot;&quot;&quot;
    DIFFICULTY = LOGO + &quot;&quot;&quot;

CHOOSE A DIFFICULTY BELOW:
=============================================================
1. VERY EASY
2. MEDIUM
3. HARD
=============================================================

OBJECTS:
-------------------------------------------------------------
* Fruit
~ Obstacle
&quot;&quot;&quot;
    GAME_OVER = &quot;&quot;&quot;
  ▄████  ▄▄▄       ███▄ ▄███▓▓█████     ▒█████   ██▒   █▓▓█████  ██▀███  
 ██▒ ▀█▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀    ▒██▒  ██▒▓██░   █▒▓█   ▀ ▓██ ▒ ██▒
▒██░▄▄▄░▒██  ▀█▄  ▓██    ▓██░▒███      ▒██░  ██▒ ▓██  █▒░▒███   ▓██ ░▄█ ▒
░▓█  ██▓░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄    ▒██   ██░  ▒██ █░░▒▓█  ▄ ▒██▀▀█▄  
░▒▓███▀▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒   ░ ████▓▒░   ▒▀█░  ░▒████▒░██▓ ▒██▒
 ░▒   ▒  ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░   ░ ▒░▒░▒░    ░ ▐░  ░░ ▒░ ░░ ▒▓ ░▒▓░
  ░   ░   ▒   ▒▒ ░░  ░      ░ ░ ░  ░     ░ ▒ ▒░    ░ ░░   ░ ░  ░  ░▒ ░ ▒░
░ ░   ░   ░   ▒   ░      ░      ░      ░ ░ ░ ▒       ░░     ░     ░░   ░ 
      ░       ░  ░       ░      ░  ░       ░ ░        ░     ░  ░   ░     
                                                     ░                   
PRESS &#39;N&#39; TO START A NEW GAME.
&quot;&quot;&quot;
    def __init__(self, context):
        self.context = context
        self.terrain = Terrain(self.context.width, self.context.height)
    &quot;&quot;&quot;
    Render terrain and game information in the screen
    &quot;&quot;&quot;
    def render_context(self, context):
    info = &quot;LIVES: %d          SCORE: %d&quot; % (self.context.lives, self.context.score) + &quot;\n&quot;
        terrain = self.terrain.show(self.context.snakes, self.context.fruit, self.context.obstacles)
        View.render(info + terrain)
    &quot;&quot;&quot;&quot;
    Clear the screen (platform dependent)
    &quot;&quot;&quot;
    @staticmethod
    def __clear_screen():
    if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
        else: os.system(&quot;clear&quot;)
    &quot;&quot;&quot;
    Show a message in the screen
    &quot;&quot;&quot;
    @staticmethod
    def render(message):
        View.__clear_screen()
        print message

&quot;&quot;&quot;
Stores the actual state of the game (interface)
&quot;&quot;&quot;
class GameState:
    def loop(self, controller): 
        raise NotImplementedError()
    def new_game(self): 
        raise NotImplementedError()
    def set_difficulty(self, difficulty): 
        raise NotImplementedError()
    def set_direction(self, direction):
        raise NotImplementedError()

&quot;&quot;&quot;
Initial state of the game
&quot;&quot;&quot;
class StateInitial(GameState):
    def __init__(self, context):
        self.context = context
    def loop(self, controller):
        View.render(View.INITIAL)
    def new_game(self): 
        self.context.state = StatePickDifficulty(self.context) 
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction): pass 

&quot;&quot;&quot;
Pick difficulty screen
&quot;&quot;&quot;
class StatePickDifficulty(GameState):
    def __init__(self, context):
        self.context = context
    &quot;&quot;&quot;
    Main loop of the game
    &quot;&quot;&quot;
    def loop(self, controller):
        View.render(View.DIFFICULTY)
    &quot;&quot;&quot;
    Start a new game
    &quot;&quot;&quot;
    def new_game(self): 
        self.context.state = StateInitial(self.context) 
    &quot;&quot;&quot;
    Set game difficulty
    &quot;&quot;&quot;
    def set_difficulty(self, difficulty):
        self.context.difficulty = difficulty
        self.context.state = StatePlaying(self.context)
    &quot;&quot;&quot;
    Change snake&#39;s direction
    &quot;&quot;&quot;
    def set_direction(self, direction): pass

&quot;&quot;&quot;
Here is where the game happens itself
&quot;&quot;&quot;
class StatePlaying(GameState):
    def __init__(self, context):
        self.context = context
        self.width = self.context.width
        self.height = self.context.height
        self.lives = self.context.lives
        self.score = 0 
        self.view = View(self)
        self.snakes = [Snake(self.width / 2, self.height / 2, self.width, self.height)] 
        self.fruit = TerrainObject(self)
        self.direction = Direction.forward 
        self.direction_queue = [] 
        self.snakes_queue = [] 
        self.obstacles = [] 
        number_of_obstacles = randint((context.difficulty - 1) * 2, (self.context.difficulty - 1) * 3)
        for i in range(number_of_obstacles):
            self.obstacles.append(TerrainObject(self))
    &quot;&quot;&quot;
    Stores snakes&#39; movement in a queue
    &quot;&quot;&quot;
    def __queue_movement(self):
        for i in range(1, len(self.snakes)):
            self.direction_queue[i-1].append(self.snakes[i-1].direction)
    &quot;&quot;&quot;
    Update the movement queue
    &quot;&quot;&quot;
    def __dequeue_movement(self):
        for i in range(1, len(self.snakes)):
            self.direction_queue[i-1].pop(0) 
    &quot;&quot;&quot;
    Check if snake&#39;s head hit some obstacle (including itself)
    &quot;&quot;&quot;
    def __hit_obstacle(self):
        for i in range(1, len(self.snakes)):
            if self.snakes[0].x == self.snakes[i].x and self.snakes[0].y == self.snakes[i].y:
                return True
        for obstacle in self.obstacles:
            if self.snakes[0].x == obstacle.x and self.snakes[0].y == obstacle.y:
                return True
        return False
    &quot;&quot;&quot;
    Move all the snake parts towards its direction
    &quot;&quot;&quot;
    def __move(self):
        for i in range(1, len(self.snakes)):
            self.snakes[i].turn_and_move(self.direction_queue[i-1][0]) 
        success = self.snakes[0].turn_and_move(self.direction)
        if self.__hit_obstacle():
            self.lives = 0
            return False
        return success 
    &quot;&quot;&quot;
    Makes the snake grow
    &quot;&quot;&quot;
    def __queue_growth(self):
        x = self.snakes[0].x
        y = self.snakes[0].y
        self.snakes_queue.append(Snake(x, y, self.width, self.height)) 
    &quot;&quot;&quot;
    Check if snake left fruit position (so its new part can be appended)
    &quot;&quot;&quot;
    def __is_free(self, queued_snake): 
        for existing_snake in self.snakes:
            if existing_snake.x == queued_snake.x and existing_snake.y == queued_snake.y:
                return False
        return True 
    &quot;&quot;&quot;
    Append a snake&#39;s part that was in queue
    &quot;&quot;&quot;
    def __dequeue_growth(self):
        for i in range(len(self.snakes_queue)-1,-1,-1):
            if self.__is_free(self.snakes_queue[i]):
                self.snakes.append(self.snakes_queue[i]) 
                self.snakes_queue.pop(i) 
                self.direction_queue.append([])
    def loop(self, controller):
        if controller.speed &gt; 40: 
            controller.speed -= 1
        if self.fruit.hit(self.snakes[0]):
            self.fruit = TerrainObject(self)
            self.score += 1
            self.__queue_growth()
        self.__queue_movement() 
        if not self.__move():
            self.lives -= 1
            if self.lives &lt; 0: 
                self.context.state = StateGameOver(self.context)
                controller.speed = 300
                return
        self.__dequeue_movement() 
        self.__dequeue_growth()
        self.view.render_context(self) 
    def new_game(self):
        self.context.state = StateInitial(self.context)
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction):
        self.direction = direction

&quot;&quot;&quot;
Game over screen
&quot;&quot;&quot;
class StateGameOver(GameState):
    def __init__(self, context):
        self.context = context
    def loop(self, controller):
        View.render(View.GAME_OVER)
    def new_game(self):
        self.context.state = StatePickDifficulty(self.context)
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction): pass

class Game:
    def __init__(self, width, height, lives):
        self.width = width
        self.height = height
        self.lives = lives
        self.state = StateInitial(self) 
    def loop(self, controller):
        self.state.loop(controller)
    def new_game(self):
        self.state.new_game()
    def set_difficulty(self, difficulty):
        self.state.set_difficulty(difficulty)
    def set_direction(self, direction):
        self.state.set_direction(direction)

class NonBlockingConsole(object):
    def __enter__(self):
        self.old_settings = termios.tcgetattr(sys.stdin)
        tty.setcbreak(sys.stdin.fileno())
        return self
    def __exit__(self, type, value, traceback):
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
    def get_data(self):
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            return sys.stdin.read(1)
        return False

class Controller:
    def __init__(self):
        self.game = Game(30, 15, 3) 
        self.speed = 300 
        self.start_game()
    def press_key(self, nbc):
        key = str(nbc.get_data())
        if key == &#39;\x1b&#39;: #ESC
            return False
        elif key == &#39;n&#39;: #Enter
            self.game.new_game()
        elif key == &#39;1&#39; or key == &#39;2&#39; or key == &#39;3&#39;: 
            self.game.set_difficulty(int(key)) 
        elif key == &#39;d&#39;: #Right arrow
            self.game.set_direction(Direction.forward) 
        elif key == &#39;a&#39;: #Left arrow
            self.game.set_direction(Direction.backward)
        elif key == &#39;w&#39;: #Up arrow
            self.game.set_direction(Direction.upward)
        elif key == &#39;s&#39;: #Down arrow
            self.game.set_direction(Direction.downward)
        return True
    def loop(self, threadName): 
        while self.running:
            time.sleep(self.speed/1000.0)
            self.game.loop(self)   
    def start_game(self):
        self.running = True
        thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
        try:
            with NonBlockingConsole() as nbc:
                while self.press_key(nbc): pass
        except KeyboardInterrupt: pass
        self.running = False

if __name__ == &#39;__main__&#39;:
    Controller()
</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Your Own Blog on Github]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/16/creating-your-own-blog-on-github/"/>
    <updated>2014-09-16T23:32:43-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/16/creating-your-own-blog-on-github</id>
    <content type="html"><![CDATA[<p>Hello world! Be welcomed to my newest blog (unhappily, my previous went to space&hellip;). Here you can find tutorials and tips about programming in general, and as it should be, my first post will be just about how to create your own blog on Github!</p>

<h3>Why create a Github blog?</h3>

<p>Github is awesome. It allows you to host your static pages for free, and using few tools, we can create a more professional and powerful blog than on the Blogger platform, for example, with a plus it&rsquo;s just ideal to share code.</p>

<h3>I&rsquo;m interested! Where do I start?</h3>

<p>Well, deploying this blog was a bit troublesome for me at first, but I&rsquo;ve just discovered some simpler ways that I&rsquo;ll tell you right now.</p>

<!-- more -->


<p><strong>Prerequisites</strong></p>

<ul>
<li>Linux (Yea. Unhappily, there isn&rsquo;t a simple way to do that on Windows&hellip;);</li>
<li>Git installed (Kinda obvious).</li>
</ul>


<p>The very first thing you need to do is create a Github repository. However, it must have the following name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Your_Github_Nickname&gt;.github.io</span></code></pre></td></tr></table></div></figure>


<p>Through the <strong>Github pages</strong> mechanism, Github allows you to host your static pages for free, as said previously. The thing is that it only allows one domain for each user, and this domain must have the same nickname of the user, with addition of &ldquo;<em>github.io</em>&rdquo; prefix.</p>

<p>Created the repository, we now need a tool that helps us to create our blog. Basically, a CMS (Content Management System). We&rsquo;re going to use <strong>Jekyll</strong> for this task.</p>

<p>You can install Jekyll and all its dependencies through a single line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>gem install github-pages
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Beyong Jekyll, the command will also try to install Ruby, since it&rsquo;s the language that Jekyll is built.</p>

<p>Even so, Jekyll is still too &ldquo;low-level&rdquo;, and it can be tedious to build all your blog template manually. Because of it, we are going to use another tool called <strong>Octopress</strong>.</p>

<p>Octopress exists to ease some functionalities. Through its rakes we can create posts, change themes, everything by command line.</p>

<p>Configuring Octopress is pretty easy. First you need to clone its repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to install its dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>And finally configure it in a way it can deploy automatically to your Github repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>Done! Now you can start blogging! :D</p>

<p>To create your first post, type the following command on terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so it will generate a file on markdown format inside source/_posts folder. Markdown is a markup language that intends to be a cleaner and easier version of HTML. You can get more info about it <a href="http://en.wikipedia.org/wiki/Markdown">here</a>. It&rsquo;s simple, you can fully learn it in few minutes!</p>

<p><strong>Type #1:</strong>
You can define a <em>preview</em> of yor post (the infamous &ldquo;<em>read more</em>&rdquo;). Just add the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="c">&lt;!-- more --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>wherever you want the post preview ends.</p>

<p><strong>Type #2:</strong>
Octopress provides a code highlighting API (otherwise it wouldn&rsquo;t any good for a programmer :P). Currently it can support more than 100 programming languages. To use it, just follow the syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>` ` ` [Language]
</span><span class='line'>    code here
</span><span class='line'>` ` `
</span></code></pre></td></tr></table></div></figure>


<p><strong>PS:</strong> Remove white spaces between the apostrophes.</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>` ` ` Java
</span><span class='line'>public class HelloWorld {
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      System.out.println(&quot;Hello World&quot;);
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>` ` `
</span></code></pre></td></tr></table></div></figure>


<p>It will generate the following text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So pretty :-)</p>

<p>There are other cool features, like getting your code from a file. To learn more about it, I invite you to access <a href="http://octopress.org/docs/blogging/code/">this link</a>, it&rsquo;s really interesting!</p>

<h3>Viewing our blog</h3>

<p>You can view your blog without deploying it. Just type the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>And so it will be available on address <a href="http://localhost:4000">http://localhost:4000</a>.</p>

<p>You don&rsquo;t need to type it again if you modify anything. It will regenerate automatically.</p>

<h3>Deploying our blog</h3>

<p>Now the more important thing is to deploy the thing! For this task, just type the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>At first it will ask things like your Github repository link, your account name, etc., &hellip; But after that it will just commit everything automatically.</p>

<h3>Applying themes</h3>

<p>For last, although Octopress comes with a beautiful theme, it&rsquo;s possible to install third-parties themes, and it&rsquo;s quite easy!</p>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">This site</a> contains a lot of themes for Octopress. To install them, first you need to clone the theme repository into the .theme folder inside your blog. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>git clone XXX .theme/XXX
</span></code></pre></td></tr></table></div></figure>


<p>After that, just type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>rake install<span class="o">[</span><span class="s1">&#39;XXX&#39;</span><span class="o">]</span>
</span><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>Where &ldquo;XXX&rdquo; is the theme name inside your .theme folder.</p>

<p>After that it will ask if you really wish to override the files, and for that you answer yes (y). And now you can see your new theme! :D</p>

<p>It was pretty simple, wasn&rsquo;t it?!
I really hope you&rsquo;ve liked this tutorial. Here are some interesting links to get depth on this topic:</p>

<ul>
<li><a href="http://jekyllrb.com/docs/home/">http://jekyllrb.com/docs/home/</a></li>
<li><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></li>
<li><a href="https://pages.github.com/">https://pages.github.com/</a></li>
</ul>


<p>Good luck with your new blog! Any question, don&rsquo;t hesitate to use the comments section right below.</p>
]]></content>
  </entry>
  
</feed>
