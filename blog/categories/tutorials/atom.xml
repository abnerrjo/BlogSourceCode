<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorials, | Tango with code]]></title>
  <link href="http://PicoleDeLimao.github.io/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://PicoleDeLimao.github.io/"/>
  <updated>2015-10-13T19:27:02-03:00</updated>
  <id>http://PicoleDeLimao.github.io/</id>
  <author>
    <name><![CDATA[Abner Matheus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a RESTful Web Service in C++ (Is It Even Possible?)]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2015/10/13/building-a-restful-web-service-in-c-plus-plus-is-it-even-possible/"/>
    <updated>2015-10-13T08:38:35-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2015/10/13/building-a-restful-web-service-in-c-plus-plus-is-it-even-possible</id>
    <content type="html"><![CDATA[<p>If you ever thought about building a multi-platform system, you should know which a <a href="https://en.wikipedia.org/wiki/Web_service">Web Service</a> is an essential part of your system. Instead of duplicating common operations among the devices, like registering an user or retrieving a list of items sorted by price, for example, it&rsquo;s better to move all those operations to a common Web Service and establish the communication through <a href="https://en.wikipedia.org/wiki/HTTP">HTTP requests</a>.</p>

<!-- more -->


<p></p>

<p>Recently, a class of web services has become pretty popular: <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">The REST web service</a>. REST stands for <strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>transfer. It&rsquo;s an architectural pattern where the requisitions are totally independent and don&rsquo;t keep any state on server. (It&rsquo;s different from a web service where you must first pass through an &ldquo;authentication phase&rdquo; before any requisition). Another remarking aspect of the REST is the use of common HTTP methods to implement &ldquo;CRUD-like&rdquo; systems.</p>

<p style="text-align:center;"> <img src="https://www.chemaxon.com/app/themes/chemaxon/images/product_pages/jws/rest.jpg" alt="" /></p>

<p>Web services can be implemented in almost any programming language you wish, though somes are more adequated to this task than others, like PHP or Javascript. When we are talking about programming languages which process HTTP requests, it&rsquo;s common the use of the term &ldquo;<a href="http://www.w3.org/CGI/">CGI</a>&rdquo;, which stands for <strong>C</strong>ommon <strong>G</strong>ateway <strong>I</strong>nterface. So here comes the C++ language: Can it be used as a CGI language? The answer is <strong>yes</strong>, THOUGH not recommended, and the reason is simple: Taks which could be easily implemented in languages like PHP would be a hell to be done in C++. But sometimes we have no choice. If that&rsquo;s your case, let&rsquo;s continue.</p>

<p>First, I&rsquo;ll assume which you are using a Unix-Variant SO with <a href="http://www.apache.org/">Apache2</a> installed. For this tutorial, we are going to use the <a href="http://www.nongnu.org/fastcgipp/">FastCGI++</a>.</p>

<p>The very first step is to install mods on Apache2 to enable support for FastCGI. The mods are: <code>mod_fastcgi</code> and <code>mod_fcgid</code> (Download link: <a href="http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html">here</a> and <a href="http://httpd.apache.org/mod_fcgid/">here</a>). On Ubuntu, you can simply call:</p>

<pre><code>
sudo apt-get install libapache2-mod-fastcgi
sudo apt-get install libapache2-mod-fcgid
</code></pre>

<p>Once installed, restart the Apache2 service by using <code>sudo service apache2 restart</code>.</p>

<p>Now it&rsquo;s necessary to download and install Boost. You can do it <a href="http://www.boost.org/">here</a>.</p>

<p>And finally, download FastCGI++ through the following link: <a href="http://www.nongnu.org/fastcgipp/">http://www.nongnu.org/fastcgipp/</a></p>

<p>The procedure to install it is the default one:</p>

<pre><code>
./configure
make
sudo make install
</code></pre>

<p>In order to check if everything is working, let&rsquo;s compile a simple program. Create a new .cpp file named hello_world.cpp and copy/past the following content:</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>hello_world.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;boost/date_time/posix_time/posix_time.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fastcgi++/request.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fastcgi++/manager.hpp&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">error_log</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>   <span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">ofstream</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">error</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/errlog&quot;</span><span class="p">,</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">app</span><span class="p">);</span>
</span><span class='line'>      <span class="n">error</span><span class="p">.</span><span class="n">imbue</span><span class="p">(</span><span class="n">locale</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">getloc</span><span class="p">(),</span> <span class="k">new</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">time_facet</span><span class="p">()));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="n">error</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;[&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">second_clock</span><span class="o">::</span><span class="n">local_time</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;] &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span><span class="o">:</span> <span class="k">public</span> <span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Request</span><span class="o">&lt;</span><span class="kt">wchar_t</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">response</span><span class="p">()</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="n">russian</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span> <span class="mh">0x041f</span><span class="p">,</span> <span class="mh">0x0440</span><span class="p">,</span> <span class="mh">0x0438</span><span class="p">,</span> <span class="mh">0x0432</span><span class="p">,</span> <span class="mh">0x0435</span><span class="p">,</span> <span class="mh">0x0442</span><span class="p">,</span> <span class="mh">0x0020</span><span class="p">,</span> <span class="mh">0x043c</span><span class="p">,</span> <span class="mh">0x0438</span><span class="p">,</span> <span class="mh">0x0440</span><span class="p">,</span> <span class="mh">0x0000</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="n">chinese</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span> <span class="mh">0x4e16</span><span class="p">,</span> <span class="mh">0x754c</span><span class="p">,</span> <span class="mh">0x60a8</span><span class="p">,</span> <span class="mh">0x597d</span><span class="p">,</span> <span class="mh">0x0000</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="n">greek</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span> <span class="mh">0x0393</span><span class="p">,</span> <span class="mh">0x03b5</span><span class="p">,</span> <span class="mh">0x03b9</span><span class="p">,</span> <span class="mh">0x03b1</span><span class="p">,</span> <span class="mh">0x0020</span><span class="p">,</span> <span class="mh">0x03c3</span><span class="p">,</span> <span class="mh">0x03b1</span><span class="p">,</span> <span class="mh">0x03c2</span><span class="p">,</span> <span class="mh">0x0020</span><span class="p">,</span> <span class="mh">0x03ba</span><span class="p">,</span> <span class="mh">0x03cc</span><span class="p">,</span> <span class="mh">0x03c3</span><span class="p">,</span> <span class="mh">0x03bc</span><span class="p">,</span> <span class="mh">0x03bf</span><span class="p">,</span> <span class="mh">0x0000</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="n">japanese</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span> <span class="mh">0x4eca</span><span class="p">,</span> <span class="mh">0x65e5</span><span class="p">,</span> <span class="mh">0x306f</span><span class="p">,</span> <span class="mh">0x4e16</span><span class="p">,</span> <span class="mh">0x754c</span><span class="p">,</span> <span class="mh">0x0000</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="n">runic</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span> <span class="mh">0x16ba</span><span class="p">,</span> <span class="mh">0x16d6</span><span class="p">,</span> <span class="mh">0x16da</span><span class="p">,</span> <span class="mh">0x16df</span><span class="p">,</span> <span class="mh">0x0020</span><span class="p">,</span> <span class="mh">0x16b9</span><span class="p">,</span> <span class="mh">0x16df</span><span class="p">,</span> <span class="mh">0x16c9</span><span class="p">,</span> <span class="mh">0x16da</span><span class="p">,</span> <span class="mh">0x16de</span><span class="p">,</span> <span class="mh">0x0000</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Content-Type: text/html; charset=utf-8</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&#39;Content-Type&#39; content=&#39;text/html; charset=utf-8&#39; /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;title&gt;fastcgi++: Hello World in UTF-8&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;English: Hello World&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Russian: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">russian</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Greek: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">greek</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Chinese: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">chinese</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Japanese: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">japanese</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Runic English?: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">runic</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">err</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello apache error log&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">try</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Manager</span><span class="o">&lt;</span><span class="n">HelloWorld</span><span class="o">&gt;</span> <span class="n">fcgi</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fcgi</span><span class="p">.</span><span class="n">handler</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">catch</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">error_log</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p></input></p>

<p>Now compile it using:</p>

<pre><code class="Bash ">
g++ hello_world.cpp -lfastcgipp -lboost_date_time -lboost_system -lboost_thread -o hello_world.fcgi
</code></pre>

<p>After compiled, try to execute it. If an error similar to this appear:</p>

<pre><code>
hello_world.fcgi: error while loading shared libraries: libfastcgipp.so.2: cannot open shared object file: No such file or directory
</code></pre>

<p>You may need to copy the libraries inside /usr/local/lib to /usr/lib. Copy and past the following statements:</p>

<pre><code>
cd /usr/lib
ln -s /usr/local/lib/libboost_* . 
ln -s /usr/local/lib/libfast* .
</code></pre>

<p>It may solve your problem.</p>

<p>Now create a folder on /var/www/html called &ldquo;hello_world&rdquo; and move the executable to there. Now if you try to access the following URL: <a href="http://localhost/hello_world/hello_world.fcgi,">http://localhost/hello_world/hello_world.fcgi,</a> an error like the following is likely to happen:</p>

<pre><code>
You don't have permission to access /hello_world/hello_world.fcgi on this server.
</code></pre>

<p>In this case, go to <code>/etc/apache2/</code> and edit the file <code>apache2.conf</code>, by substituing:</p>

<pre><code class="XML">
&lt;Directory /&gt;
        Options FollowSymLinks
        AllowOverride None
        Require all granted
&lt;/Directory&gt;

...

&lt;Directory /var/www/&gt;
        Options Indexes FollowSymLinks 
        AllowOverride None
        Require all granted
&lt;/Directory&gt;
</code></pre>

<p>to</p>

<pre><code class="XML">
&lt;Directory /&gt;
        Options  Indexes FollowSymLinks Includes ExecCGI
        AllowOverride All
        Allow from all
&lt;/Directory&gt;

...

&lt;Directory /var/www/&gt;
        Options Indexes FollowSymLinks Includes ExecCGI
        AllowOverride All
        Allow from all 
&lt;/Directory&gt;
</code></pre>

<p>Now restart the Apache2 service by calling <code>sudo service apache2 restart</code> and try to access the link again: <a href="http://localhost/hello_world/hello_world.fcgi.">http://localhost/hello_world/hello_world.fcgi.</a></p>

<p>A message like that must be displayed:</p>

<pre><code>
English: Hello World
Russian: Привет мир
Greek: Γεια σας κόσμο
Chinese: 世界您好
Japanese: 今日は世界
Runic English?: ᚺᛖᛚᛟ ᚹᛟᛉᛚᛞ
</code></pre>

<p>Got the message? Excellent! Now we can continue (otherwise either check the previous steps to verify if you didn&rsquo;t mistake anything or reply with a comment to this tutorial).</p>

<h2>Our dummy system (the comics shop)</h2>

<p>We are going to design a dummy system in order to implementate our RESTful web service in C++. This system is very simple: An owner of a comics shop asked us to implementate a system for him. Our system will have only one entity: The comic itself. A comic has:</p>

<ul>
<li>A name;</li>
<li>A publisher;</li>
<li>A release date;</li>
<li>An edition number.</li>
</ul>


<p>We are going to use MySQL to persist those data. You can dowload MySQL <a href="https://www.MySQL.com/">here</a> (or alternativelly you can use <code>sudo apt-get install MySQL-server</code> on Ubuntu).</p>

<p>Let&rsquo;s initialize MySQL by calling on terminal:</p>

<pre><code>
mysql -u USERNAME -p
</code></pre>

<p>Once logged in, create a new database named &ldquo;comics_shop&rdquo; by calling:</p>

<pre><code class="SQL ">CREATE DATABASE comics_shop;
</code></pre>

<p>Now enter on the recently created database:</p>

<pre><code class="SQL">USE comics_shop;
</code></pre>

<p>And finally let&rsquo;s create a table for &ldquo;comic&rdquo;:</p>

<pre><code class="SQL">CREATE TABLE comic(
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(30) NOT NULL, 
    publisher VARCHAR(30) NOT NULL, 
    date TIMESTAMP, 
    edition INT
);
</code></pre>

<p>And the database part is done for now! Now, in order to establish the communication among our C++ programs and our MySQL database, we need to install the <a href="https://dev.mysql.com/doc/connector-cpp/en/index.html">MySQL C++ connector</a>. You can download it <a href="https://dev.mysql.com/downloads/connector/cpp/1.1.html">here</a>. Once downloaded, unpack it and move the content of &ldquo;lib&rdquo; folder to your /usr/lib folder, while moving the content of &ldquo;include&rdquo; to /usr/local/include/mysqlcppconn folder.</p>

<p>Now go to /var/www/html and create a new folder called &ldquo;comics&rdquo;. The first method we are going to implementate is the CREATE/POST. For that reason, inside the recently created folder, create a new folder named &ldquo;comic&rdquo; and inside of it create a new .cpp file named &ldquo;post.cpp&rdquo;. Let&rsquo;s start by creating the skeleton of our application:</p>

<pre><code class="C++ post.cpp">#include &lt;fstream&gt;

#include &lt;boost/date_time/posix_time/posix_time.hpp&gt;

#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

#include &lt;fastcgi++/request.hpp&gt;
#include &lt;fastcgi++/manager.hpp&gt;

#include &lt;cppconn/driver.h&gt;
#include &lt;cppconn/exception.h&gt;
#include &lt;cppconn/resultset.h&gt;
#include &lt;cppconn/statement.h&gt;

void error_log(const char* msg)
{
    using namespace std;
    using namespace boost;
    static ofstream error;
    if(!error.is_open())
    {
        error.open("/tmp/errlog", ios_base::out | ios_base::app);
        error.imbue(locale(error.getloc(), new posix_time::time_facet()));
    }
    error &lt;&lt; '[' &lt;&lt; posix_time::second_clock::local_time() &lt;&lt; "] " &lt;&lt; msg &lt;&lt; endl;
}

class PostComic : public Fastcgipp::Request&lt;char&gt;
{
    bool response()
    {
        // TODO
        return true;
    }
};

int main()
{
    try 
    {
        Fastcgipp::Manager&lt;PostComic&gt; fcgi;
        fcgi.handler();
    } 
    catch (std::exception&amp; e)
    {
            error_log(e.what());    
    }
    return 0;
}
</code></pre>

<p>The method &ldquo;error_log&rdquo; is one created only for logging reasons. It creates a new file inside the /tmp/errlog folder containing the date and the error message.</p>

<p>The very first thing we are going to implementate is the connection with our database. Since it&rsquo;s something which will be repeated for every HTTP method, let&rsquo;s create a separated file named &ldquo;connector.hpp&rdquo; with the same skeleton as shown above:</p>

<pre><code class="C++ connector.hpp">#include &lt;fstream&gt;

#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

#include &lt;fastcgi++/request.hpp&gt;
#include &lt;fastcgi++/manager.hpp&gt;

#include &lt;cppconn/driver.h&gt;
#include &lt;cppconn/exception.h&gt;
#include &lt;cppconn/resultset.h&gt;
#include &lt;cppconn/statement.h&gt;

class Connector : public Fastcgipp::Request&lt;char&gt;
{

};
</code></pre>

<p>We will then, on constructor, simply initialize a new connection with the database.
<figure class='code'><figcaption><span>connector.hpp</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fstream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fastcgi</span><span class="o">++/</span><span class="n">request</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fastcgi</span><span class="o">++/</span><span class="n">manager</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">driver</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">exception</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">resultset</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">statement</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Connector</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Request</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Connector</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">driver</span> <span class="o">=</span> <span class="n">get_driver_instance</span><span class="p">();</span>
</span><span class='line'>        <span class="n">con</span> <span class="o">=</span> <span class="n">driver</span><span class="o">-&gt;</span><span class="n">connect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">tcp</span><span class="p">:</span><span class="c1">//127.0.0.1:3306&amp;rdquo;, &amp;ldquo;USERNAME&amp;rdquo;, &amp;ldquo;PASSWORD&amp;rdquo;);</span>
</span><span class='line'>        <span class="n">con</span><span class="o">-&gt;</span><span class="n">setSchema</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">comics_shop</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Connector</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">sql</span><span class="o">::</span><span class="n">Driver</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">driver</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sql</span><span class="o">::</span><span class="n">Connection</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">con</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">And</span> <span class="n">after</span> <span class="n">that</span><span class="p">,</span> <span class="n">we</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">modify</span> <span class="n">our</span> <span class="n">PostComic</span> <span class="k">class</span> <span class="nc">to</span> <span class="n">extend</span> <span class="n">the</span> <span class="n">Connector</span> <span class="n">class</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">C</span><span class="o">++</span> <span class="n">post</span><span class="p">.</span><span class="n">cpp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fstream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">date_time</span><span class="o">/</span><span class="n">posix_time</span><span class="o">/</span><span class="n">posix_time</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fastcgi</span><span class="o">++/</span><span class="n">request</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fastcgi</span><span class="o">++/</span><span class="n">manager</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">driver</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">exception</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">resultset</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">cppconn</span><span class="o">/</span><span class="n">statement</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">connector</span><span class="p">.</span><span class="n">hpp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">error_log</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">ofstream</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">errlog</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">app</span><span class="p">);</span>
</span><span class='line'>        <span class="n">error</span><span class="p">.</span><span class="n">imbue</span><span class="p">(</span><span class="n">locale</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">getloc</span><span class="p">(),</span> <span class="k">new</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">time_facet</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">second_clock</span><span class="o">::</span><span class="n">local_time</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;]</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">msg</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">PostComic</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Connector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">response</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// TODO</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Manager</span><span class="o">&lt;</span><span class="n">PostComic</span><span class="o">&gt;</span> <span class="n">fcgi</span><span class="p">;</span>
</span><span class='line'>        <span class="n">fcgi</span><span class="p">.</span><span class="n">handler</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="n">error_log</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Now</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">get</span> <span class="n">the</span> <span class="n">POST</span> <span class="n">parameters</span><span class="p">.</span> <span class="n">We</span> <span class="n">expect</span> <span class="n">the</span> <span class="n">parameters</span> <span class="n">be</span> <span class="n">the</span> <span class="n">same</span> <span class="n">of</span> <span class="n">the</span> <span class="n">table</span> <span class="n">attributes</span> <span class="p">(</span><span class="n">except</span> <span class="k">for</span> <span class="n">ID</span><span class="p">).</span> <span class="n">We</span> <span class="n">can</span> <span class="n">access</span> <span class="n">the</span> <span class="n">post</span> <span class="n">parameters</span> <span class="n">through</span> <span class="n">the</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="err">```</span> <span class="nl">list</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;C++ post.cpp&quot;</span><span class="o">&gt;</span><span class="kt">bool</span> <span class="n">response</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Content-Type: application/json; charset=ISO-8859-1</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">parameters</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Http</span><span class="o">::</span><span class="n">Environment</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">Posts</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">[</span><span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">second</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">the</span> <span class="n">above</span> <span class="n">example</span><span class="p">,</span> <span class="n">we</span> <span class="n">are</span> <span class="n">saving</span> <span class="n">the</span> <span class="n">parameters</span> <span class="n">in</span> <span class="n">a</span> <span class="n">map</span><span class="p">.</span> <span class="n">Now</span> <span class="n">let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">check</span> <span class="k">if</span> <span class="n">all</span> <span class="n">parameters</span> <span class="n">are</span> <span class="nl">OK</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span> <span class="n">post</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">sendError</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">errorMsg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;{ </span><span class="se">\&quot;</span><span class="s">success</span><span class="se">\&quot;</span><span class="s"> : 0, </span><span class="se">\&quot;</span><span class="s">message</span><span class="se">\&quot;</span><span class="s"> : </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">errorMsg</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> }&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">sendSuccess</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;{ </span><span class="se">\&quot;</span><span class="s">success</span><span class="se">\&quot;</span><span class="s"> : 1 }&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">response</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Content-Type: application/json; charset=ISO-8859-1</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">parameters</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Http</span><span class="o">::</span><span class="n">Environment</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">Posts</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">parameters</span><span class="p">[</span><span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">second</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;Name is missing&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;publisher&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;Publisher is missing&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;Date is missing&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;edition&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;Edition is missing&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// TODO</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">As</span> <span class="n">you</span> <span class="n">can</span> <span class="n">notice</span><span class="p">,</span> <span class="n">we</span> <span class="n">are</span> <span class="n">sending</span> <span class="n">a</span> <span class="n">JSON</span> <span class="n">file</span> <span class="n">indicating</span> <span class="k">if</span> <span class="n">the</span> <span class="n">operation</span> <span class="n">was</span> <span class="n">successful</span> <span class="n">or</span> <span class="n">not</span><span class="p">.</span> <span class="n">Using</span> <span class="n">JSON</span> <span class="n">or</span> <span class="n">XML</span> <span class="n">files</span> <span class="n">as</span> <span class="n">a</span> <span class="n">protocol</span> <span class="n">of</span> <span class="n">communitation</span> <span class="n">is</span> <span class="n">another</span> <span class="n">remarking</span> <span class="n">aspect</span> <span class="n">of</span> <span class="n">REST</span> <span class="n">architectures</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Now</span> <span class="n">compile</span> <span class="n">it</span> <span class="k">using</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;Bash&quot;</span><span class="o">&gt;</span><span class="n">sudo</span> <span class="n">g</span><span class="o">++</span> <span class="n">post</span><span class="p">.</span><span class="n">cpp</span> <span class="o">-</span><span class="n">I</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">mysqlcppconn</span><span class="o">/</span> <span class="o">-</span><span class="n">lfastcgipp</span> <span class="o">-</span><span class="n">lboost_date_time</span> <span class="o">-</span><span class="n">lboost_system</span> <span class="o">-</span><span class="n">lboost_thread</span> <span class="o">-</span><span class="n">lmysqlcppconn</span> <span class="o">-</span><span class="n">o</span> <span class="n">post</span><span class="p">.</span><span class="n">fcgi</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">other</span> <span class="n">methods</span> <span class="n">follow</span> <span class="n">a</span> <span class="n">very</span> <span class="n">similar</span> <span class="n">logic</span><span class="p">.</span> <span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">here</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">the</span> <span class="n">PUT</span> <span class="p">(</span><span class="n">edit</span><span class="p">)</span> <span class="nl">method</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;C++ put.cpp&quot;</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fstream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &amp;lt;boost/date_time/posix_time/posix_time.hpp&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &amp;lt;sys/types.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;sys/stat.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;unistd.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &amp;lt;fastcgi++/request.hpp&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;fastcgi++/manager.hpp&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;fastcgi++/http.hpp&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &amp;lt;cppconn/driver.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;cppconn/exception.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;cppconn/resultset.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;cppconn/statement.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;connector.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">error_log</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">ofstream</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/errlog&quot;</span><span class="p">,</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">ios_base</span><span class="o">::</span><span class="n">app</span><span class="p">);</span>
</span><span class='line'>        <span class="n">error</span><span class="p">.</span><span class="n">imbue</span><span class="p">(</span><span class="n">locale</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">getloc</span><span class="p">(),</span> <span class="k">new</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">time_facet</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="sc">&#39;[&#39;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">posix_time</span><span class="o">::</span><span class="n">second_clock</span><span class="o">::</span><span class="n">local_time</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;] &quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">msg</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PutComic</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Connector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">void</span> <span class="n">sendError</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">errorMsg</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;{ </span><span class="se">\&quot;</span><span class="s">success</span><span class="se">\&quot;</span><span class="s"> : 0, </span><span class="se">\&quot;</span><span class="s">message</span><span class="se">\&quot;</span><span class="s"> : </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">errorMsg</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> }&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">void</span> <span class="n">sendSuccess</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;{ </span><span class="se">\&quot;</span><span class="s">success</span><span class="se">\&quot;</span><span class="s"> : 1 }&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">response</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Content-Type: application/json; charset=ISO-8859-1</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">parameters</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Http</span><span class="o">::</span><span class="n">Environment</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">Posts</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">environment</span><span class="p">().</span><span class="n">posts</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">[</span><span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">second</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;id&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;Missing id&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">columns</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">columns</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">parameters</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;publisher&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">columns</span><span class="p">[</span><span class="s">&quot;publisher&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">parameters</span><span class="p">[</span><span class="s">&quot;publisher&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">columns</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;FROM_UNIXTIME(&#39;&quot;</span> <span class="o">+</span> <span class="n">parameters</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">parameters</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;edition&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">columns</span><span class="p">[</span><span class="s">&quot;edition&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">[</span><span class="s">&quot;edition&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">columns</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">sendError</span><span class="p">(</span><span class="s">&quot;There is no column to be updated&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">query</span> <span class="o">=</span> <span class="s">&quot;UPDATE comic SET &quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">columns</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">columns</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">columns</span><span class="p">.</span><span class="n">begin</span><span class="p">())</span> <span class="n">query</span> <span class="o">+=</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">query</span> <span class="o">+=</span> <span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">first</span> <span class="o">+</span> <span class="s">&quot;=&quot;</span> <span class="o">+</span> <span class="n">it</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">query</span> <span class="o">+=</span> <span class="s">&quot; WHERE id=&quot;</span> <span class="o">+</span> <span class="n">parameters</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">];</span>
</span><span class='line'>                <span class="n">sql</span><span class="o">::</span><span class="n">Statement</span><span class="o">*</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">con</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">createStatement</span><span class="p">();</span>
</span><span class='line'>                <span class="n">try</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">stmt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">sendSuccess</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">sql</span><span class="o">::</span><span class="n">SQLException</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">sendError</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">delete</span> <span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Fastcgipp</span><span class="o">::</span><span class="n">Manager</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">PutComic</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">fcgi</span><span class="p">;</span>
</span><span class='line'>        <span class="n">fcgi</span><span class="p">.</span><span class="n">handler</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="n">error_log</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">We</span> <span class="n">are</span> <span class="n">simply</span> <span class="n">getting</span> <span class="n">a</span> <span class="n">row</span> <span class="n">by</span> <span class="n">ID</span> <span class="n">and</span> <span class="n">then</span> <span class="n">updating</span> <span class="n">the</span> <span class="n">columns</span> <span class="n">from</span> <span class="n">which</span> <span class="n">values</span> <span class="n">exist</span> <span class="n">on</span> <span class="n">the</span> <span class="n">POST</span> <span class="n">request</span> <span class="p">(</span><span class="n">unhappily</span><span class="p">,</span> <span class="n">FastCGI</span><span class="o">++</span> <span class="n">doesn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">provide</span> <span class="n">support</span> <span class="k">for</span> <span class="n">PUT</span> <span class="n">requests</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">implement</span> <span class="n">it</span> <span class="n">as</span> <span class="n">a</span> <span class="n">POST</span> <span class="n">request</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">DELETE</span> <span class="n">method</span> <span class="n">is</span> <span class="n">even</span> <span class="nl">simpler</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure> C++ delete.php</p>

<h1>include <fstream></h1>

<h1>include &lt;boost/date_time/posix_time/posix_time.hpp></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/stat.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;fastcgi++/request.hpp></h1>

<h1>include &lt;fastcgi++/manager.hpp></h1>

<h1>include &lt;fastcgi++/http.hpp></h1>

<h1>include &lt;cppconn/driver.h></h1>

<h1>include &lt;cppconn/exception.h></h1>

<h1>include &lt;cppconn/resultset.h></h1>

<h1>include &lt;cppconn/statement.h></h1>

<h1>include &ldquo;connector.hpp&rdquo;</h1>

<p>void error_log(const char* msg)
{
    using namespace std;
    using namespace boost;
    static ofstream error;
    if(!error.is_open())
    {
        error.open(&ldquo;/tmp/errlog&rdquo;, ios_base::out | ios_base::app);
        error.imbue(locale(error.getloc(), new posix_time::time_facet()));
    }
    error &lt;&lt; &lsquo;[&rsquo; &lt;&lt; posix_time::second_clock::local_time() &lt;&lt; &ldquo;] &rdquo; &lt;&lt; msg &lt;&lt; endl;
}</p>

<p>class PutComic : public Connector
{
    inline void sendError(const std::string&amp; errorMsg)
    {
        out &lt;&lt; &ldquo;{ &#34;success\&rdquo; : 0, \&ldquo;message\&rdquo; : \&ldquo;&rdquo; + errorMsg + &ldquo;\&rdquo; }&ldquo; &lt;&lt; std::endl;
    }
    inline void sendSuccess()
    {
        out &lt;&lt; &rdquo;{ \&ldquo;success\&rdquo; : 1 }&ldquo; &lt;&lt; std::endl;
    }
    bool response()
    {
        out &lt;&lt; &#8220;Content-Type: application/json; charset=ISO-8859-1\r\n\r\n&rdquo;;
        std::map&lt;std::string, std::string> parameters;
        for (Fastcgipp::<a href="Http::Environment">Http::Environment</a><char>::Posts::const_iterator it = environment().posts.begin(); it != environment().posts.end(); ++it)
        {
            parameters[it->first] = it->second.value;
        }
        if (parameters.find(&ldquo;id&rdquo;) == parameters.end())
        {
            sendError(&ldquo;Missing id&rdquo;);
        }
        else
        {</p>

<pre><code>        sql::Statement* stmt = con-&gt;createStatement();
        try 
        {
            stmt-&gt;execute("DELETE FROM comic WHERE id = " + parameters["id"]);
            sendSuccess();
        } catch (sql::SQLException&amp; e)
        {
            sendError(e.what());
        }
        delete stmt;
    }
    return true;
}
</code></pre>

<p>};</p>

<p>int main()
{
    try
    {
        Fastcgipp::Manager<PutComic> fcgi;
        fcgi.handler();
    }
    catch (std::exception&amp; e)
    {
            error_log(e.what());  <br/>
    }
    return 0;
}
<code>
Now the only method missing is the GET, to retrieve informations of a comic by ID. That's also very simple:
</code> C++ get.cpp</p>

<h1>include <fstream></h1>

<h1>include &lt;boost/date_time/posix_time/posix_time.hpp></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/stat.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;fastcgi++/request.hpp></h1>

<h1>include &lt;fastcgi++/manager.hpp></h1>

<h1>include &lt;fastcgi++/http.hpp></h1>

<h1>include &lt;cppconn/driver.h></h1>

<h1>include &lt;cppconn/exception.h></h1>

<h1>include &lt;cppconn/resultset.h></h1>

<h1>include &lt;cppconn/statement.h></h1>

<h1>include &ldquo;connector.hpp&rdquo;</h1>

<p>void error_log(const char* msg)
{
    using namespace std;
    using namespace boost;
    static ofstream error;
    if(!error.is_open())
    {
        error.open(&ldquo;/tmp/errlog&rdquo;, ios_base::out | ios_base::app);
        error.imbue(locale(error.getloc(), new posix_time::time_facet()));
    }
    error &lt;&lt; &lsquo;[&rsquo; &lt;&lt; posix_time::second_clock::local_time() &lt;&lt; &ldquo;] &rdquo; &lt;&lt; msg &lt;&lt; endl;
}</p>

<p>class PutComic : public Connector
{
    inline void sendError(const std::string&amp; errorMsg)
    {
        out &lt;&lt; &ldquo;{ &#34;success\&rdquo; : 0, \&ldquo;message\&rdquo; : \&ldquo;&rdquo; + errorMsg + &ldquo;\&rdquo; }&ldquo; &lt;&lt; std::endl;
    }
    bool response()
    {
        out &lt;&lt; &#8220;Content-Type: application/json; charset=ISO-8859-1\r\n\r\n&rdquo;;
        std::map&lt;std::string, std::string> parameters;
        for (Fastcgipp::<a href="Http::Environment">Http::Environment</a><char>::Gets::const_iterator it = environment().gets.begin(); it != environment().gets.end(); ++it)
        {
            parameters[it->first] = it->second;
        }
        if (parameters.find(&ldquo;id&rdquo;) == parameters.end())
        {
            sendError(&ldquo;Missing id&rdquo;);
        }
        else
        {
            sql::Statement<em> stmt = con->createStatement();
            try
            {
                sql::ResultSet</em> res = stmt->executeQuery(&ldquo;SELECT name, publisher, UNIX_TIMESTAMP(date) as date, edition FROM comic WHERE id = &rdquo; + parameters[&ldquo;id&rdquo;]);
                if (!res->next())
                {
                    sendError(&ldquo;Could not found comic with id = &rdquo; + parameters[&ldquo;id&rdquo;]);
                }
                else
                {
                    std::string result = &ldquo;{ &#34;success\&rdquo; : 1, &ldquo;;
                    result += &rdquo;\&ldquo;name\&rdquo;: \&ldquo;&rdquo; + res->getString(&ldquo;name&rdquo;) + &ldquo;\&rdquo;,&ldquo;;
                    result += &rdquo;\&ldquo;publisher\&rdquo;: \&ldquo;&rdquo; + res->getString(&ldquo;publisher&rdquo;) + &ldquo;\&rdquo;,&ldquo;;
                    result += &rdquo;\&ldquo;date\&rdquo;: &ldquo; + res->getString(&#8220;date&rdquo;) + &ldquo;,&rdquo;;
                    result += &ldquo;&#34;edition\&rdquo;: &ldquo; + res->getString(&#8220;edition&rdquo;);
                    result += &ldquo;}&rdquo;;
                    delete res;
                    out &lt;&lt; result &lt;&lt; std::endl;
                }
            } catch (sql::SQLException&amp; e)
            {
                sendError(e.what());
            }
            delete stmt;
        }
        return true;
    }
};</p>

<p>int main()
{
    try
    {
        Fastcgipp::Manager<PutComic> fcgi;
        fcgi.handler();
    }
    catch (std::exception&amp; e)
    {
            error_log(e.what());  <br/>
    }
    return 0;
}
<code>
Instead of</code>environment().posts<code>, now we are using</code>environment().gets<code>. Also, "get" parameters are a pair of string-string (instead of a POST, where the second value of the pair is an object), that's why we don't need to use</code>it->second.value<code>.</code>sql::ResultSet<code>representates a set of retrieved rows. Since we are indexing by the primary key, it will just return 0 or 1 (that's why we don't need to put it on a loop). If the method</code>getNext()&#8220;` return false, it indicates which none row with given ID was found, otherwise, we build a JSON string with the columns values and then output it to the user.</p>

<h2>Rewriting URLs</h2>

<p>So we finally finished our four methods (GET, POST, PUT and DELETE), but one of annoying thing is that you must put the &ldquo;.fcgi&rdquo; extension in order to access the page. A more elegant solution would be, instead of <code>GET /comics/comic.fcgi?id=10</code>, the following: <code>GET /comics/10</code>. It&rsquo;s shorter and now the user don&rsquo;t need to know we are using a FCGI script.  URL rewriting is completely possible on Apache Web Server. You just need to do the following:</p>

<pre><code class="Bash ">sudo a2enmod rewrite
sudo service apache2 restart
</code></pre>

<p>Now, on folder &ldquo;comics&rdquo; located on &ldquo;/var/www/html&rdquo;, create a new <code>.htaccess</code> file, and inside of it write the following:</p>

<pre><code>
RewriteEngine on
RewriteRule comic/([0-9]+)$ comic/get.fcgi?id=$1
</code></pre>

<p>Now if you save it, you&rsquo;ll notice which calling the URL <a href="http://localhost/comics/comic/10">http://localhost/comics/comic/10</a> has the same effect as <a href="http://localhost/comics/comic/get.fcgi?id=10.">http://localhost/comics/comic/get.fcgi?id=10.</a> The reason is simple: We created a mapping rule where, if you call <code>comics/comic/&lt;A number&gt;</code>, it will internally call the right URL defined on RewriteRule. $1 is the Regex ID (1 = the first one), from which the value will be &lsquo;copied&rsquo;.
The other mapping rules are much more easier:</p>

<pre><code>
RewriteEngine on
RewriteRule comic/([0-9]+)$ comic/get.fcgi?id=$1
RewriteRule comic/put comic/put.fcgi
RewriteRule comic/delete comic/delete.fcgi
RewriteRule comic/post comic/post.fcgi
</code></pre>

<h2>Conclusion</h2>

<p>On this tutorial, we learnt about i) Web services ii) RESTful web services iii) CGI scripts iv) An easy way to use C++ as a CGI language v) MySQL connection with C++ vi) A complete dummy system containing all four HTTP methods to manipulate an entity vii) Apache URL rewriting. That was a lot of things! :) I really hope you have enjoyed this tutorial. Until the next!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking Photos From Webcam Using HTML5]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/12/24/taking-photos-from-webcam-using-html5/"/>
    <updated>2014-12-24T11:57:06-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/12/24/taking-photos-from-webcam-using-html5</id>
    <content type="html"><![CDATA[<p>On today&rsquo;s tutorial I&rsquo;ll teach how to take snapshots from webcam using only HTML5.</p>

<p>On the past, accessing user webcam was something onerous, sometimes falling back on Flash. Gladly, HTML5 brought an innovation to this area, thanks to the <code>&lt;video&gt;</code> tag.</p>

<p style="text-align:center;"><img src="/images/posts/webcam-snapshot.png" alt="" /></p>

<!-- more -->


<h2>Getting webcam access</h2>

<p>On our demo we&rsquo;re going to create a tag to display the live stream of webcam, a tag to display a webcam snapshot, and two buttons: One to take a snapshot and another to save (download) the photo.</p>

<pre><code class="HTML">&lt;video id="video" width="640" height="480" autoplay&gt;&lt;/video&gt; &lt;!-- Live stream of webcam --&gt;
&lt;canvas id="canvas" width="640" height="480"&gt;&lt;/canvas&gt; &lt;!-- Snapshot of webcam --&gt;
&lt;button id="snap"&gt;Take snapshot&lt;/button&gt; &lt;!-- Button to take snapshot --&gt;
&lt;a id="save" download&gt;&lt;button&gt;Download photo&lt;/button&gt;&lt;/a&gt; &lt;!-- Button to download photo --&gt;
</code></pre>

<p>However, that alone will not performe anything. We need a bit of Javascript to do the magic.</p>

<p>There are three ways to get access to the user webcam, depending on his browser: getUserMedia (for IE and alike), webkitGetUserMedia (for Chrome and Safari) and mozGetUserMedia (for Firefox), so we need to handle all them.</p>

<pre><code class="Javascript">window.addEventListener("DOMContentLoaded", function() {
    var canvas = document.getElementById("canvas");
    var video = document.getElementById("video");
    if(navigator.getUserMedia) {
        navigator.getUserMedia({ "video": true }, function(stream) {
            video.src = stream;
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    } else if(navigator.webkitGetUserMedia) { 
        navigator.webkitGetUserMedia({ "video": true }, function(stream) {
            video.src = window.webkitURL.createObjectURL(stream);
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    }
    else if(navigator.mozGetUserMedia) { 
        navigator.mozGetUserMedia({ "video": true }, function(stream) {
            video.src = window.URL.createObjectURL(stream);
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    }
});
</code></pre>

<p>First I&rsquo;m creating a listener to when content is loaded. It&rsquo;s important, otherwise Javascript won&rsquo;t be able to find the tags! :-)</p>

<p>Inside the listener there are three &ldquo;if&rdquo;, for compatibility reasons described above.</p>

<p>Each &ldquo;if&rdquo; is similar, just some changes here and there: We are setting &ldquo;video.src&rdquo; to webcam stream (remember: video variable is the <code>&lt;video&gt;</code> tag we set previously) and immediately playing it through the function &ldquo;play()&rdquo;. We also need to pass a callback function in case of error (permission not given or webcam not found, for example).</p>

<h2>Taking a snapshot</h2>

<p>Now we&rsquo;re going to implement the take snapshot functionality. First thing: Create a listener to when button &ldquo;Take snapshot&rdquo; is clicked:</p>

<pre><code class="Javascript">document.getElementById("snap").addEventListener("click", function() {

});
</code></pre>

<p>This listener must be inside &ldquo;DOMContentLoaded&rdquo; listener created previously.</p>

<p>Now, inside this new listener that we&rsquo;ve created, let&rsquo;s draw a webcam frame inside the <code>&lt;canvas&gt;</code> tag that we created on first section of this tutorial. To be able to draw an image inside a canvas, we first need to get its &ldquo;context&rdquo; and through it call the function &ldquo;drawImage(x, y, width, height)&rdquo;, where x, y representates the origin of source image (if you need to translate it&hellip;) and width, height the area you are going to take from source image (if you need to crop it&hellip;).</p>

<pre><code class="Javascript">document.getElementById("snap").addEventListener("click", function() {
    canvas.getContext("2d").drawImage(video, 0, 0, 640, 480);
});
</code></pre>

<p>Aaaaaand it&rsquo;s done! Pretty easy, huh? :-)</p>

<h2>Downloading a photo</h2>

<p>Now we just need to implement the &ldquo;Download photo&rdquo; button. That is easy too. Inside the listener of &ldquo;Take snapshot&rdquo; button, add the following line:</p>

<pre><code class="Javascript">document.getElementById("save").href = canvas.toDataURL("image/jpeg");
</code></pre>

<p>&ldquo;toDataURL()&rdquo; convert canvas image to a URL. We can also define the image extension.</p>

<p>It&rsquo;s simple like that! :)</p>

<p>Now the complete code:</p>

<p>&#8220;` HTML
<video id="video" width="640" height="480" autoplay></video> <!-- Live stream of webcam -->
<canvas id="canvas" width="640" height="480"></canvas> <!-- Snapshot of webcam -->
<button id="snap">Take snapshot</button> <!-- Button to take snapshot -->
<a id="save" download><button>Download photo</button></a> <!-- Button to download photo --></p>

<script type="text/javascript">
window.addEventListener("DOMContentLoaded", function() {
    var canvas = document.getElementById("canvas");
    var video = document.getElementById("video");
    if(navigator.getUserMedia) {
        navigator.getUserMedia({ "video": true }, function(stream) {
            video.src = stream;
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    } else if(navigator.webkitGetUserMedia) { 
        navigator.webkitGetUserMedia({ "video": true }, function(stream) {
            video.src = window.webkitURL.createObjectURL(stream);
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    }
    else if(navigator.mozGetUserMedia) { 
        navigator.mozGetUserMedia({ "video": true }, function(stream) {
            video.src = window.URL.createObjectURL(stream);
            video.play();
        }, function(error) {
            console.log("Video capture error: ", error.code); 
        });
    }
    document.getElementById("snap").addEventListener("click", function() {
        canvas.getContext("2d").drawImage(video, 0, 0, 640, 480);
        document.getElementById("save").href = canvas.toDataURL("image/jpeg");
    });
});
</script>


<p>&#8220;`</p>

<p style="text-align:center;"><img src="/images/posts/webcam-snapshot.png" alt="" /></p>

<p>I hope you&rsquo;ve enjoyed and Merry Christmas! :-)</p>
]]></content>
  </entry>
  
</feed>
