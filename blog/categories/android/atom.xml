<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Tango with code]]></title>
  <link href="http://PicoleDeLimao.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://PicoleDeLimao.github.io/"/>
  <updated>2015-11-14T17:43:11-03:00</updated>
  <id>http://PicoleDeLimao.github.io/</id>
  <author>
    <name><![CDATA[Abner Matheus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Custom Widget on Android: The Loading Button]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2015/01/04/creating-a-custom-widget-on-android-the-loading-button/"/>
    <updated>2015-01-04T18:57:51-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2015/01/04/creating-a-custom-widget-on-android-the-loading-button</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;ll ilustrate the creation of a custom widget
through a pratical example: A Loading Button. A loading button is a
button with a spinning indicator. It&rsquo;s useful for buttons that
trigger servers requests.</p>

<p style="text-align:center;"><img src="/images/posts/spinning_button.png" alt="" /></p>

<p style="text-align:center;"><a href="/downloads/code/TutorialButton.zip">Click here to download the example</a></p>

<!-- more -->


<p>As our first step, let&rsquo;s create a Java class called &ldquo;LoadingButton&rdquo;
that extends of RelativeLayout view. You may be asking why we are
extending of RelativeLayout instead of Button class. The quick answer
is Button doesn&rsquo;t allow views inside of it, Layouts does, and we&rsquo;re
going to need that functionality. :) (But don&rsquo;t worry, that won&rsquo;t make
our button less than a button!).</p>

<pre><code class="Java LoadingButton.java">
import android.content.Context;
import android.util.AttributeSet;
import android.widget.RelativeLayout;

public class LoadingButton extends RelativeLayout {

    public LoadingButton(Context context) {
        super(context);
    }

    public LoadingButton(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public LoadingButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

}
</code></pre>

<p>Notice we need the three constructors to make our custom widgets
work. They all are necessary.</p>

<p>Now let&rsquo;s &ldquo;draw&rdquo; our widget. Create a method called &ldquo;init&rdquo; and
call it inside the all constructors.</p>

<pre><code class="Java LoadingButton.java">
public class LoadingButton extends RelativeLayout {

    private void init() {

    }

    public LoadingButton(Context context) {
        super(context);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

}
</code></pre>

<p>Now, inside this method, let&rsquo;s begin defining our layout as
&ldquo;clickable&rdquo; (it&rsquo;s false as default) and setting its background as the
same as a button background.</p>

<pre><code class="Java LoadingButton.java">
    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
    }
</code></pre>

<p>For our button, we need two children: A TextView and a ProgressBar.
The TextView will display the button text, while the progressbar will
display the spinning indicator.</p>

<pre><code class="Java LoadingButton.java">
    private TextView mTextView;
    private ProgressBar mProgressBar;

    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
        mTextView = new TextView(getContext());
        mProgressBar = new ProgressBar(getContext());
        addView(mTextView);
        addView(mProgressBar);
    }
</code></pre>

<p>Simple like that! By using the &ldquo;addView&rdquo; method we are adding a new view to
our layout. But we still need to define things like: width,
height and style. For width and height, we&rsquo;re going to use something called
LayoutParams, that acts the same as android:layout_* attributes on XML
Layout files.</p>

<pre><code class="Java LoadingButton.java">
    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
        LayoutParams textViewParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        textViewParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        LayoutParams progressBarParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        progressBarParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        mTextView = new TextView(getContext());
        mTextView.setLayoutParams(textViewParams);
        mProgressBar = new ProgressBar(getContext());
        mProgressBar.setLayoutParams(progressBarParams);
        mProgressBar.setVisibility(View.INVISIBLE);
        addView(mTextView);
        addView(mProgressBar);
    }
</code></pre>

<p>It&rsquo;s pretty straight-forward. We&rsquo;re here setting width and height to
&ldquo;wrap_content&rdquo; and centering both widgets. Of course, we&rsquo;re not going
to show both at the same time, that&rsquo;s why I hid the progressbar using
the &ldquo;setVisibility&rdquo; method.</p>

<p>Now we just need two others methods, that either will display the spinning
indicator either will display the text.</p>

<pre><code class="Java LoadingButton.java">
    public void startLoading() {
        mProgressBar.setVisibility(View.VISIBLE);
        mTextView.setVisibility(View.INVISIBLE);
    }

    public void stopLoading() {
        mProgressBar.setVisibility(View.INVISIBLE);
        mTextView.setVisibility(View.VISIBLE);
    }
</code></pre>

<p>And here&rsquo;s the complete class:</p>

<pre><code class="Java LoadingButton.java">
import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class LoadingButton extends RelativeLayout {

    private TextView mTextView;
    private ProgressBar mProgressBar;

    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
        LayoutParams textViewParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        textViewParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        LayoutParams progressBarParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        progressBarParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        mTextView = new TextView(getContext());
        mTextView.setLayoutParams(textViewParams);
        mProgressBar = new ProgressBar(getContext());
        mProgressBar.setLayoutParams(progressBarParams);
        mProgressBar.setVisibility(View.INVISIBLE);
        addView(mTextView);
        addView(mProgressBar);
    }

    public void startLoading() {
        mProgressBar.setVisibility(View.VISIBLE);
        mTextView.setVisibility(View.INVISIBLE);
    }

    public void stopLoading() {
        mProgressBar.setVisibility(View.INVISIBLE);
        mTextView.setVisibility(View.VISIBLE);
    }

    public LoadingButton(Context context) {
        super(context);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

}
</code></pre>

<blockquote><p>Wait! Something is missing! We are using a RelativeLayout to simulate
a button, but layouts don&rsquo;t have the attribute &ldquo;android:text&rdquo;. So how
do you set the text?</p></blockquote>

<p>For that we&rsquo;re going to need a styleable.</p>

<p>Styleable is, in short, a set of custom attributes. For example, when
you declare in your layouts xml files on your top-parent view the
following attribute:
<code>xmlns:android="http://schemas.android.com/apk/res/android"</code>, you are
actually saying where are Android default styleables and naming it &ldquo;android&rdquo;,
so you can access the attributes through the prefix &ldquo;android:&rdquo;.</p>

<p>To create a new styleable, go to res > values > attrs.xml. If this
file is not created yet, create it with the following structure:</p>

<pre><code class="XML attrs.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
&lt;/resources&gt;
</code></pre>

<p>Now, inside of the newly created file, type the following structure:</p>

<pre><code class="XML attrs.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;declare-styleable name="LoadingButton"&gt;
    &lt;/declare-styleable&gt;

&lt;/resources&gt;
</code></pre>

<p>Through the tag <code>&lt;declare-styleable&gt;</code> we are setting a new styleable
and its name attribute defines its&hellip; name (it has no impact, it&rsquo;s
just a matter of identification).</p>

<p>Now let&rsquo;s define a custom attribute called &ldquo;text&rdquo; to serve as a way to
set our button text.</p>

<pre><code class="XML attrs.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;declare-styleable name="LoadingButton" &gt;
        &lt;attr name="text" format="string" /&gt;
    &lt;/declare-styleable&gt;

&lt;/resources&gt;
</code></pre>

<p>To create a new attribute just create a new tag of type <code>&lt;attr&gt;</code>
inside the <code>&lt;declare-styleable&gt;</code> tag. A tag has a name (the attribute
name) and a format, namely the input type it accepts. The format can
be of the several types, among them: string, integer, boolean, &hellip;</p>

<p>And we are done with styleables! If we need to pass more informations
for our button beyond its text, like, for example, text color, just
create a new attribute!</p>

<p>Now let&rsquo;s go back to our Java class. Now we need to link our newly
created styleble to our class. For that create a method called
&ldquo;setAttributes&rdquo; that receives as parameter a variable of kind &ldquo;Context&rdquo;
and another of kind &ldquo;AttributeSet&rdquo; and returns void and calls this
method inside all constructors except the one that just receives one
parameter.</p>

<pre><code class="Java LoadingButton.java">
    private void setAttributes(Context context, AttributeSet attrs) {

    }

    public LoadingButton(Context context) {
        super(context);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
        setAttributes(context, attrs);
    }

    public LoadingButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
        setAttributes(context, attrs);
    }
</code></pre>

<p>Now, inside this method, we are going to link to our styleable
throught the following code:</p>

<pre><code class="Java LoadingButton.java">
    private String mText;

    private void setAttributes(Context context, AttributeSet attrs) {
        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.LoadingButton, 0, 0);
        try {
            mText = ta.getString(R.styleable.LoadingButton_text);
        } finally {
            ta.recycle();
        }
    }
</code></pre>

<p>I created a new class member called &ldquo;mText&rdquo; to store the string we are
going to get through the attribute &ldquo;text&rdquo;. To link to our styleable se
use the method &ldquo;obtainStyledAttributes&rdquo;, that receives as parameter
the set of attributes (attrs) and the styleable name. Finally, we
extract an attribute value calling the called &ldquo;get*&rdquo;, where * is the
type of attribute we want to extract. This type is related to the
&ldquo;format&rdquo; we defined on our XML file.</p>

<p>Now we just need to adjust the method &ldquo;init&rdquo; to now set the text of
EditText to our variable &ldquo;mText&rdquo;.</p>

<pre><code class="Java LoadingButton.java">
    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
        LayoutParams textViewParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        textViewParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        LayoutParams progressBarParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        progressBarParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        mTextView = new TextView(getContext());
        mTextView.setLayoutParams(textViewParams);
        mTextView.setText(mText);
        mProgressBar = new ProgressBar(getContext());
        mProgressBar.setLayoutParams(progressBarParams);
        mProgressBar.setVisibility(View.INVISIBLE);
        addView(mTextView);
        addView(mProgressBar);
    }
</code></pre>

<p>And now here is our fully completed class:</p>

<pre><code class="Java LoadingButton.java">
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class LoadingButton extends RelativeLayout {

    private TextView mTextView;
    private ProgressBar mProgressBar;
    private String mText;

    private void init() {
        setClickable(true);
        setBackgroundResource(android.R.drawable.btn_default);
        LayoutParams textViewParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        textViewParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        LayoutParams progressBarParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        progressBarParams.addRule(RelativeLayout.CENTER_IN_PARENT);
        mTextView = new TextView(getContext());
        mTextView.setLayoutParams(textViewParams);
        mTextView.setText(mText);
        mProgressBar = new ProgressBar(getContext());
        mProgressBar.setLayoutParams(progressBarParams);
        mProgressBar.setVisibility(View.INVISIBLE);
        addView(mTextView);
        addView(mProgressBar);
    }

    public void startLoading() {
        mProgressBar.setVisibility(View.VISIBLE);
        mTextView.setVisibility(View.INVISIBLE);
    }

    public void stopLoading() {
        mProgressBar.setVisibility(View.INVISIBLE);
        mTextView.setVisibility(View.VISIBLE);
    }

    private void setAttributes(Context context, AttributeSet attrs) {
        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.LoadingButton, 0, 0);
        try {
            mText = ta.getString(R.styleable.LoadingButton_text);
        } finally {
            ta.recycle();
        }
    }

    public LoadingButton(Context context) {
        super(context);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        setAttributes(context, attrs);
        init();
    }

    public LoadingButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        setAttributes(context, attrs);
        init();
    }

}
</code></pre>

<p>And now it&rsquo;s ready to be used!</p>

<pre><code class="XML">
    &lt;PACKAGE_NAME.LoadingButton
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:id="@+id/loading_button"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        app:text="Hello world!" /&gt;
</code></pre>

<p>You must replace &ldquo;PACKAGE_NAME&rdquo; for the package where the
LoadingButton class is within. Also, notice I must define to where my
styleable is before using its attribute. You could pass the real path
(<a href="http://schemas.android.com/apk/res/values/attrs.xml">http://schemas.android.com/apk/res/values/attrs.xml</a>), but the res-auto
automatically redirects to &ldquo;attrs.xml&rdquo;. After naming it &ldquo;app&rdquo;, I could
have access to the &ldquo;text&rdquo; attribute through the prefix &ldquo;app:&rdquo;.</p>

<p>And here&rsquo;s a snippet to demonstrate it working:</p>

<pre><code class="Java MyActivity.java">
    private LoadingButton button;
    private boolean loading = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        button = (LoadingButton) findViewById(R.id.loading_button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (loading) {
                    button.stopLoading();
                    loading = false;
                } else {
                    button.startLoading();
                    loading = true;
                }
            }
        });
    }
</code></pre>

<p style="text-align:center;"><img src="/images/posts/spinning_button.png" alt="" /></p>

<p style="text-align:center;"><a href="/downloads/code/TutorialButton.zip">Click here to download the example</a></p>
]]></content>
  </entry>
  
</feed>
