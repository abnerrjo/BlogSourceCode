<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutoriais | The bug is on the table]]></title>
  <link href="http://PicoleDeLimao.github.io/blog/categories/tutoriais/atom.xml" rel="self"/>
  <link href="http://PicoleDeLimao.github.io/"/>
  <updated>2014-10-27T00:36:24-03:00</updated>
  <id>http://PicoleDeLimao.github.io/</id>
  <author>
    <name><![CDATA[Abner Matheus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pequenas Coisas Que Podem Tornar Seus Programas Em Java Melhores]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/10/18/pequenas-coisas-que-podem-tornar-seus-programas-em-java-melhores/"/>
    <updated>2014-10-18T11:17:45-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/10/18/pequenas-coisas-que-podem-tornar-seus-programas-em-java-melhores</id>
    <content type="html"><![CDATA[<p>Há alguns meses venho lendo o livro <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672">Refactoring: Improving the design of existing code</a>, de Martin Fowler.
O livro é clássico, e de certa forma mudou minha maneira de pensar em design de software, principalmente nas linguagens orientadas a objetos.</p>

<p>No livro existem dezenas ou até centenas de exemplos e dicas. Eu aqui reuni <strong>cinco</strong> dicas que considero mais fáceis e simples de serem aplicadas mas que ainda assim possuam algum impacto sobre a qualidade do software. Essas dicas, embora tenham a influência do livro, também contam com minha própria experiência.</p>

<p>Usarei Java porque tanto é a linguagem usada como modelo no livro quanto é a que eu mais tenho familiaridade.</p>

<!-- more -->


<h2>1. Não crie um método &ldquo;set&rdquo; para um atributo se você não vai alterá-lo</h2>

<p>Essa dica parece ser besta, e é mesmo, mas muuuuitas pessoas acabam criando métodos &ldquo;get&rdquo; e &ldquo;set&rdquo; desnecessariamente.
Embora isso não vá causar uma catástrofe à curto prazo, isso acaba violando um dos princípios do paradigma orientado a objetos, que é o controle da informação.</p>

<p>Quando você permite que seus dados sejam abertos à modificação sem necessidade, e que a alteração até cause algum mau-funcionamento, então você está deixando uma brecha para um possível bug no futuro.</p>

<h2>2. Não permita classes modificarem coleções de outras</h2>

<p>Essa dica parece ser contraditória e até errônea a princípio. Na verdade, classes podem e devem modificar coleções e dados de outra classe (dentro de um limite), o que não é <em>legal</em> é que essa modificação seja feita de maneira <strong>direta</strong>. Nada melhor do que um exemplo para ilustrar o que quero dizer.</p>

<pre><code class="Java Sistema.java">public class Sistema {

    private Set&lt;Usuario&gt; usuarios;

    public void setUsers(Set&lt;Usuario&gt; usuarios) {
        this.usuarios = usuarios;
    }

    public Set&lt;Usuario&gt; getUsuarios() {
        return this.usuarios;
    }

    ...

}
</code></pre>

<pre><code class="Java InvasorDePrivacidade.java">public class InvasorDePrivacidade {

    private Sistema sistema;

    public boolean adicionaUsuario(String login, String senha) {
        return sistema.getUsuarios().add(new Usuario(login, senha));
    }

    public boolean removeUsuario(Usuario usuario) {
        return sistema.getUsuarios().remove(usuario);
    }

    ...

}
</code></pre>

<p>Esse foi um exemplo bem simples. Qual o problema desse design?</p>

<p>O problema é que a classe &ldquo;InvasorDePrivacidade&rdquo; está adicionando e removendo elementos da coleção &ldquo;usuarios&rdquo; de Sistema de maneira direta. O que isso pode acarretar? Um grande decréscimo de <strong>segurança</strong>. Agora qualquer classe do programa pode remover ou adicionar usuários no sistema! Não existe mais controle ou &ldquo;sentinela&rdquo; do que é permitido ser adicionado ou removido.</p>

<p>Outro problema presente ali, desta vez um pouco mais sutil, é a criação do objeto do tipo &ldquo;Usuario&rdquo; dentro de um local inapropriado. Se formos espalhar a construção de objetos em vários pontos do nosso programa, o que acontecerá se quisermos alterar o construtor, adicionando ou removendo parâmetros? Usaríamos overload para usar o &ldquo;novo&rdquo; construtor nas novas chamadas? Procuraríamos e atualizariamos as chamadas antigas ao construtor um por um? E se o construtor lançar exceções? Também teríamos que tratar essas exceções em todos os pontos onde o construtor é chamado?</p>

<p>Tudo isso poderia ser resolvido se passarsemos a responsabilidade de adicionar ou remover usuários exclusivamente à classe &ldquo;Sistema&rdquo;, proibindo outras classes de fazer isso.</p>

<pre><code class="Java Sistema.java">public class Sistema {

    private Set&lt;Usuario&gt; usuarios;

    public void setUsers(Set&lt;Usuario&gt; usuarios) {
        this.usuarios = usuarios;
    }

    public Set&lt;Usuario&gt; getUsuarios() {
        return this.usuarios;
    }

    public boolean adicionaUsuario(String login, String senha) {
        return this.usuarios.add(new Usuario(login, senha));
    }

    public boolean removeUsuario(Usuario usuario) {
        return this.usuarios.remove(usuario);
    }

    ...

}
</code></pre>

<pre><code class="Java InvasorDePrivacidade.java">public class InvasorDePrivacidade {

    private Sistema sistema;

    public boolean adicionaUsuario(String login, String senha) {
        return sistema.adicionaUsuario(login, senha);
    }

    public boolean removeUsuario(Usuario usuario) {
        return sistema.remove(usuario);
    }

    ...

}
</code></pre>

<p>O problema de segurança foi resolvido na classe &ldquo;InvasorDePrivacidade&rdquo;, mas a brecha ainda existe para outras classes através dos métodos &ldquo;set&rdquo; e &ldquo;get&rdquo; da classe &ldquo;Sistema&rdquo;.</p>

<p>O problema do &ldquo;set&rdquo; recai à dica #1 deste tutorial. Ele é realmente necessário? A resposta é <strong>não</strong>. Métodos &ldquo;set&rdquo; para coleções quase nunca são necessários.</p>

<p>O &ldquo;get&rdquo; realmente parece ser inevitável. Em uma hora ou outra teremos que acessar a lista de usuários. Porém, podemos minimizar o problema ao fazer com que a lista retornada pelo método &ldquo;get&rdquo; seja:</p>

<ol>
<li>Uma cópia da original. Portanto, modificações feitas através do método get não irão afetar em nada.</li>
<li>Uma <em>unmodifiable collection</em>.</li>
</ol>


<p>A segunda opção parece ser a mais elegante. Java permite o uso de uma <em>unmodifiable collection</em>, que basicamente é uma cópia da coleção original, com a diferença de que ele não apenas não permite que se altere a lista como lança exceção ao fazê-lo. Isso já é um grande auxílio na hora de debugar o programa.</p>

<p>Se você acessar a classe &ldquo;Collections&rdquo;, verá vários métodos utilitários que tornam coleções do tipo &ldquo;unmodifiable&rdquo;. Os métodos mais comuns são:</p>

<ul>
<li>Collections.unmodifiableList(listaOriginal);</li>
<li>Collections.unmodifiableSet(setOriginal);</li>
<li>Collections.unmodifiableMap(mapaOriginal);</li>
<li>Collections.unmodifiableCollection(collectionOriginal);</li>
</ul>


<p>Com isto nossa classe ficará assim:</p>

<pre><code class="Java Sistema.java">import java.util.Collections;

public class Sistema {

  private Set&lt;Usuario&gt; usuarios;

  public Set&lt;Usuario&gt; getUsuarios() {
      return Collections.unmodifiableSet(this.usuarios);
  }

  public boolean adicionaUsuario(String login, String senha) {
      return this.usuarios.add(new Usuario(login, senha));
  }

  public boolean removeUsuario(Usuario usuario) {
      return this.usuarios.remove(usuario);
  }

  ...

}
</code></pre>

<h2>3. Marque um método como público apenas se for estritamente necessário</h2>

<p>O valor de uma classe poderia ser definido como o valor de sua interface. Interface não representando uma estrutura de dados abstrata, mas o conjunto de métodos e atributos que compõe uma classe. Quanto mais significativa e simples essa interface, maiores são as chances dela ser reutilizada, o que é muito bom por si só.</p>

<p>Uma maneira de simplificar a interface das classes é esconder tudo que não é essencial para outras classes.</p>

<p>Claro, métodos auxiliares são importantes, até para simplificar a lógica de outros métodos, mas eles só possuem razão de ser dentro daquela classe. Não há porque mostrar ao mundo que eles existem.</p>

<p>Para esses casos, use &ldquo;private&rdquo; ou quando não for possível, &ldquo;protected&rdquo;.</p>

<h2>4. Saiba quando usar Enum e quando usar herança</h2>

<p>Enum é um grande aliado. Ele permite criar uma quantidade definida de constantes. Entretanto, é comum usar enum dentro de condicionais (geralmente um <em>switch case</em>) para variar um comportamento de um método. Aqui vai um exemplo:</p>

<pre><code class="Java Cargo.java">public enum Cargo {

    ESTAGIARIO, JUNIOR, EXPERT, PLENO

}
</code></pre>

<pre><code class="Java Desenvolvedor.java ">public class Desenvolvedor {

    private Cargo cargo;

    public double getSalario() {
        switch(this.cargo) {
            case ESTAGIARIO:
                return 500;
            case JUNIOR:
                return 1000;
            case EXPERT:
                return 2000;
            case PLENO:
                return 4000;
            default:
                throw new CargoException("Cargo inválido.");
        }
    }

    public boolean promove() {
        switch(this.cargo) {
            case ESTAGIARIO:
                this.cargo = Cargo.JUNIOR;
                break;
            case JUNIOR:
                this.cargo = Cargo.EXPERT;
                break;
            case EXPERT:
                this.cargo = Cargo.PLENO;
                break;
            default:
                return false;
        }
        return true;
    }

    ... 

} 
</code></pre>

<p>Esse problema poderia ser resolvido de maneira diferente usando herança e polimorfismo:</p>

<pre><code class="Java Cargo.java">public interface Cargo {

    public double getSalario();
    public boolean promove(Desenvolvedor contexto);

}
</code></pre>

<pre><code class="Java Estagiario.java">public class Estagiario implements Cargo {

    @Override
    public double getSalario() {
        return 500;
    }

    @Override
    public boolean promove(Desenvolvedor contexto) {
        contexto.setCargo(Cargo.JUNIOR);
        return true;
    }

}
</code></pre>

<pre><code class="Java Junior.java">public class Junior implements Cargo {

    @Override
    public double getSalario() {
        return 1000;
    }

    @Override
    public boolean promove(Desenvolvedor contexto) {
        contexto.setCargo(Cargo.EXPERT);
        return true;
    }

}
</code></pre>

<pre><code class="Java Expert.java">public class Expert implements Cargo {

    @Override
    public double getSalario() {
        return 2000;
    }

    @Override
    public boolean promove(Desenvolvedor contexto) {
        contexto.setCargo(Cargo.PLENO);
        return true;
    }

}
</code></pre>

<pre><code class="Java Pleno.java">public class Pleno implements Cargo {

    @Override
    public double getSalario() {
        return 4000;
    }

    @Override
    public boolean promove(Desenvolvedor contexto) {
        return false;
    }

}
</code></pre>

<pre><code class="Java Desenvolvedor.java">public class Desenvolvedor {

    private Cargo cargo;

    protected void setCargo(Cargo cargo) {
        this.cargo = cargo;
    }

    public double getSalario() {
        return this.cargo.getSalario();
    }

    public boolean promove() {
        return this.cargo.promove(this);
    }

}
</code></pre>

<p>Como você pode ver, este exemplo usa o <em>design pattern</em> <strong>State</strong> do Gang of Four.
A maioria dos enums que implementam uma hierarquia podem ser convertidos para esse padrão, que em suma é composição + polimorfismo.</p>

<p>A questão é: Qual das duas soluções é a melhor?</p>

<p>A resposta é: <strong>depende</strong>. É verdade que a segunda solução deixou a classe &ldquo;Desenvolvedor&rdquo; mais simples, mas por outro lado aumentou o número de classes do sistema. O enum, embora mais enxulto, é menos flexível: Se você quiser adicionar mais uma constante, terá que alterar todas as condicionais que envolvam aquele enum. E isso é <strong>muito</strong> ruim.</p>

<p>Portanto, um bom <em>rule of thumb</em> é o seguinte: Use enum quando você tiver <strong>certeza</strong> que as constantes daquele tipo não irão mudar. Caso contrário, polimorfismo é a melhor solução, pois para adicionar um novo valor, basta criar uma nova classe que implementa aquela interface, não afetando nenhum outro lugar.</p>

<h2>5. Use afirmações ao invés de negações em condicionais</h2>

<p>Essa dica é realmente muito simples. Ela não vai alterar diretamente a qualidade de seu código, mas vai torná-lo mais legível, o que é importante também!</p>

<p>A questão aqui é que orações afirmativas são mais fáceis de se entender do que várias negativas coglomeradas. Exemplo:</p>

<pre><code>Não é o caso que eu não queira ir ao shopping.
</code></pre>

<p>Poderia ser reescrito da seguinte forma:</p>

<pre><code>Eu quero ir ao shopping.
</code></pre>

<p>Claro, ao custo de um pouco da perda de semântica, um efeito coleteral que não existe em linguagens de programação. Exemplo:</p>

<pre><code class="Java">public String getMensagemDeErro() {
    if (!(this.getPessoa() instanceof Programador)) {
        return "Estamos em manutenção. Volte em breve.";
    } else  {
        return "Erro 303. Linha 202. NullPointerException.";
    }
}
</code></pre>

<p>Poderia ser reescrito da seguinte forma:</p>

<pre><code class="Java">public String getMensagemDeErro() {
    if (this.getPessoa() instanceof Programador) {
        return "Erro 303. Linha 202. NullPointerException.";
    } else  {
        return "Estamos em manutenção. Volte em breve.";
    }
}
</code></pre>

<p>Obviamente o efeito é quase imperceptível, mas isso por minha falta de criatividade em pensar em exemplos mais elaborados. :)</p>

<h2>Conclusão</h2>

<p>Algumas dicas foram bem óbvias e intuitivas, outras nem tanto. Eu também evitei extrair os exemplos diretamente do livro, queria misturar um pouco da minha experiência. O livro do Martin Fowler é fantástico, e recomendo fortamente que todos leiam.</p>

<p>Até a próxima, e lembrem-se: Refatoramento hoje, refatoramento amanhã, refatoramento sempre!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Autentificação De Usuários Em PHP Usando CodeIgniter]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/30/criando-autentificacao-de-usuarios-em-php-usando-codeigniter/"/>
    <updated>2014-09-30T07:45:45-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/30/criando-autentificacao-de-usuarios-em-php-usando-codeigniter</id>
    <content type="html"><![CDATA[<p>Sou um completo novato em PHP. Já tentei desenvolver sites sem o uso de frameworks, e até tive algum sucesso, mas a experiência foi um tanto traumatizante, pra dizer o mínimo. Precisava de um framework que me ajudasse nessa tarefa, mas que também não fosse preciso passar mais tempo aprendendo a manipulá-lo do que aprendendo a própria linguagem em si.</p>

<p>CodeIgniter é esse framework! Ele é totalmente <em>clean</em> e intuitivo, contém apenas as funcionalidades realmente básicas. Hoje aprenderemos a criar autentificação de usuários (cadastrar e logar) usando ele! <em>Let&rsquo;s rock, baby!</em></p>

<p><strong> Sem paciência pra ler? <a href="/downloads/code/auth.zip">Clique aqui para baixar o exemplo completo</a> </strong></p>

<!-- more -->


<p>Tentei projetar este tutorial para uma pessoa totalmente leiga neste framework, portanto, se você já sabe um pouco, peço desculpa pela redundância de informações.</p>

<p>E como pré-requisito básico pressuponho que você já tenha um servidor local instalado que suporte PHP. Se não tiver, não se preocupe, é fácilimo de instalar <a href="https://www.apachefriends.org/pt_br/index.html">com algum software LAMP</a>.</p>

<h2>&ldquo;Instalando&rdquo; o framework</h2>

<p>Vamos baixar o CodeIgniter agora! :D <br/>
Acesse o <a href="https://ellislab.com/codeigniter">site do CodeIgniter</a> e clique em download.</p>

<p>Para criar um novo projeto com esse framework, basta copiar e colar a pasta do CodeIgniter. Mais simples impossível!</p>

<h2>Configurando o banco de dados</h2>

<p>E antes de mais nada, vamos montar as tabelas do nosso banco de dados. Nosso simples usuário terá apenas nome, login e senha, por isso nosso banco de dados terá uma única tabela, e ela é bem simples:</p>

<pre><code class="SQL">CREATE TABLE IF NOT EXISTS `User` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `login` varchar(30) NOT NULL,
  `password` varchar(100) NOT NULL,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `login` (`login`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;
</code></pre>

<p>Para linkar nosso banco de dados ao CodeIgniter, vá à pasta do projeto > application > config > database.php</p>

<p>Nas linhas 52 à 54, você encontrará o seguinte trecho de código:</p>

<pre><code class="PHP">$db['default']['username'] = '';
$db['default']['password'] = '';
$db['default']['database'] = '';
</code></pre>

<p>Basta preencher com as informações referentes ao seu banco de dados.</p>

<h2>Criando as views</h2>

<p>CodeIgniter segue o padrão MVC: Ele separa a visualização dos dados (views: HTML, CSS&hellip;) da lógica de negócio (models: PHP em si, incluindo pesquisas ao banco de dados) e tem um controlador que faz a comunicação entre os dois (controller).</p>

<p>Vamos começar criando as views, depois os models e por último colar tudo usando um controller.</p>

<p>Para criar uma nova view, vá até a pasta do projeto > views e crie um novo arquivo HTML ou PHP lá dentro. Por motivos de organização, é legal organizar suas views em subpastas. Crie as telas de logar e cadastrar numa subpasta chamada &ldquo;<em>auth</em>&rdquo;.</p>

<p>Dentro dessa subpasta crie quatro arquivos: <em>login.php</em>, <em>register.php</em>, <em>success.php</em> e <em>fail.php</em>. A princípio, alguém seria tentado a criar algo assim em um deles:</p>

<pre><code class="HTML">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
...
&lt;/head&gt;
&lt;/html&gt;
</code></pre>

<p>Mas não faz sentido repetir o <em>header</em> em vários arquivos HTML! Não agora que temos um framework para nos auxiliar nessa tarefa! :D</p>

<p>Portanto, crie o header em outro arquivo separado chamado <em>header.php</em>. Também crie um arquivo chamado <em>footer.php</em> para lá colocar todo o rodapé da página, incluindo fechamento de tags.</p>

<p>Com isto, meu arquivo header ficou dessa maneira:</p>

<pre><code class="PHP header.php">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;title&gt;Autentificação no CodeIgniter&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
</code></pre>

<p>E meu arquivo footer, desta maneira:</p>

<pre><code class="PHP footer.php">    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>E assim nossos arquivos HTML terão apenas o necessário.</p>

<p>O arquivo de login poderia bem ser dessa maneira:</p>

<pre><code class="PHP login.php">&lt;?php echo form_open('login'); ?&gt;
    &lt;input type="text" name="login" placeholder="Digite seu login" required /&gt;
    &lt;input type="password" name="password" placeholder="Digite sua senha" required /&gt;
    &lt;button type="submit"&gt;Entrar&lt;/button&gt;
&lt;/form&gt;     
&lt;a href="&lt;?php echo base_url(); ?&gt;index.php/register"&gt;Não possuí conta? Clique aqui para se cadastrar!&lt;/a&gt;    
</code></pre>

<p>Considerando que a rota para logar seja <strong>login</strong>. Falaremos mais sobre isso mais a frente. Como você pode ver, é um form dos mais simples, o que há de diferente é o método &ldquo;form_open&rdquo;. Ele é um método utilitário do CodeIgniter que cria um form já com o roteamento correto para nós.</p>

<p>E o arquivo register poderia ser dessa maneira:</p>

<pre><code class="PHP register.php">&lt;?php echo form_open('new_register'); ?&gt;
    &lt;input type="text" name="name" placeholder="Digite seu nome" required maxlength="100" autofocus /&gt; 
    &lt;input type="text" name="login" placeholder="Digite seu login" required maxlength="30" /&gt;
    &lt;input type="password" name="password" placeholder="Digite sua senha" required maxlength="30" /&gt;
    &lt;button type="submit"&gt;Cadastrar&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>Considerando que a rota para cadastrar seja <strong>new_register</strong>. Perceba que coloquei alguns atributos adicionais nos campos como &ldquo;maxlength&rdquo;. Isso foi apenas para coincidir com as <em>constraints</em> que defini lá no banco de dados. Não é essencial.</p>

<p>E, por fim, o arquivos sucess e fail, que irão mostrar mensagens ao usuário dependendo de seu sucesso em logar. Esses não têm muito mistério:</p>

<pre><code class="PHP fail.php">Falha ao logar. &lt;a href="index"&gt;Tente novamente.&lt;/a&gt;
</code></pre>

<pre><code class="PHP success.php">Olá, &lt;?php echo $usuario; ?&gt;. Você logou com sucesso!
&lt;a href="logout"&gt;Clique aqui para deslogar.&lt;/a&gt;
</code></pre>

<p>Ops! Uma pegadinha no arquivo <em>success</em>: De onde vem essa variável &ldquo;$usuario&rdquo;? Ahá! Isso que é legal. Você pode usar alguns dados externos para montar suas views, no meu caso usei a variável &ldquo;$usuario&rdquo;, que eu imagino que deva armazenar o nome do usuário logado, mas quem irá se encarregar de mandar esses dados é o controller. Veremos isso mais a frente.</p>

<p>Perceba também que usamos a rota <strong>logout</strong> para o usuário se deslogar.</p>

<p>Com isto terminamos as views. Apenas conferindo os arquivos criados:</p>

<ul>
<li>views

<ul>
<li>auth

<ul>
<li>header.php</li>
<li>footer.php</li>
<li>login.php</li>
<li>register.php</li>
<li>fail.php</li>
<li>success.php</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Criando os models</h2>

<p>Os models, no CodeIgniter, ficam em application > models. PHP em si é <em>stateless</em>, portanto, a noção de models é um pouco diferente do usual.</p>

<p>Ele não é como Java, onde você tem uma classe com vários atributos, carrega esses atributos do banco de dados e passa a acessá-los da memória.</p>

<p>Em PHP, as classes têm poucos atributos, sendo que a maioria deles são acessados diretamente do banco de dados.</p>

<p>É importante manter isso em mente.</p>

<p>Vamos criar então nosso model! Vamos necessitar apenas de um, que é o usuário em si. Crie um arquivo chamado <strong>usermodel.php</strong>. Todo model no CodeIgniter tem essa estrutura básica:</p>

<pre><code class="PHP">&lt;?php
class NOME extends CI_Model {

}?&gt;
</code></pre>

<p>Para o nosso caso, seria assim:</p>

<pre><code class="PHP usermodel.php">&lt;?php
class UserModel extends CI_Model {

}?&gt;
</code></pre>

<p>Outra coisa importante é que podemos e devemos inicializar nosso banco de dados já no construtor da classe. Isso pode ser feito da seguinte maneira:</p>

<pre><code class="PHP usermodel.php">&lt;?php
class UserModel extends CI_Model {

    public function __construct() {
        $this-&gt;load-&gt;database();
    }

}?&gt;
</code></pre>

<p>Nosso singelo model terá apenas dois métodos: login e register.</p>

<pre><code class="PHP usermodel.php">&lt;?php
class UserModel extends CI_Model {

    public function __construct() {
        $this-&gt;load-&gt;database();
    }

    function login($login, $password) {

    }

    function register($name, $login, $password) {

    }

}?&gt;
</code></pre>

<p>O que eles fazem é, por incŕivel que pareça, logar e registrar! hehe</p>

<p>Vamos começar pelo método de logar. O que ele faz é simples: Vasculha o banco de dados por um usuário que possuam o login e a senha informados. Caso seja encontrado, retorna true.</p>

<p>E aqui, devo ressaltar a importância de não colocar a senha no banco de dados da forma original que ela é, né. Use pelo menos uma forma de encriptação. Irei user o <a href="http://pt.wikipedia.org/wiki/MD5">MD5</a>.</p>

<p>Agora nos concentremos no banco de dados. Isto é trivial usando o <a href="https://ellislab.com/codeigniter/user-guide/database/active_record.html">Active Record</a>.</p>

<pre><code class="PHP usermodel.php">function login($login, $password) {
    $this-&gt;db-&gt;select("*");
    $this-&gt;db-&gt;from("User");
    $this-&gt;db-&gt;where("login", $login);
    $this-&gt;db-&gt;where("password", md5($password));
}
</code></pre>

<p>O que o código acima está fazendo? Simplesmente está fazendo um SELECT no banco de dados na tabela indicada pelo método &ldquo;from&rdquo; e com duas cláusulas WHERE. Em outras palavras, selecionando um usuário que possua o mesmo login e a mesma senha (encriptografada) passada.</p>

<p>Vamos agora executar a query usando o método &ldquo;get&rdquo; e verificando se alguma linha foi retornada usando o método &ldquo;num_rows&rdquo;.</p>

<pre><code class="PHP usermodel.php">function login($login, $password) {
    $this-&gt;db-&gt;select("*");
    $this-&gt;db-&gt;from("User");
    $this-&gt;db-&gt;where("login", $login);
    $this-&gt;db-&gt;where("password", md5($password));
    $query = $this-&gt;db-&gt;get();
    return $query-&gt;num_rows() &gt; 0;
}
</code></pre>

<p>E assim o método login está pronto! Fácil, não é?</p>

<p>Vamos para o método register agora. Ele funciona de maneira semelhante, só que agora não estamos preocupados em selecionar usuários, mas sim em inserí-los. Felizmente, também existe um método mágico para esta tarefa:</p>

<pre><code class="PHP usermodel.php">private function exists($login) {
    $this-&gt;db-&gt;select("*");
    $this-&gt;db-&gt;from("User");
    $this-&gt;db-&gt;where("login", $login);
    $query = $this-&gt;db-&gt;get();
    return $query-&gt;num_rows() &gt; 0;
}

function register($name, $login, $password) {
    if ($this-&gt;exists($login)) return;
    $this-&gt;db-&gt;insert('User', array(
        'name' =&gt; $name,
        'login' =&gt; $login,
        'password' =&gt; md5($password)
    ));
}
</code></pre>

<p>E aí foi criado um método auxiliar chamado &ldquo;exists&rdquo; para verificar se um dado login já está sendo usado. Ele é quase igualzinho ao login, só que desta vez não leva em consideração a senha.</p>

<p>O método register é ridiculamente fácil: Se não existir, ele insere no banco de dados. No método &ldquo;db->insert&rdquo; é passando o nome da tabela e uma array associativa, onde as chaves são os nomes das colunas e os valores serão os valores dessas colunas.</p>

<p>Nossa classe por completo está assim:</p>

<pre><code class="PHP usermodel.php">&lt;?php
class UserModel extends CI_Model {

    public function __construct() {
        $this-&gt;load-&gt;database();
    }

    function login($login, $password) {
        $this-&gt;db-&gt;select("*");
        $this-&gt;db-&gt;from("User");
        $this-&gt;db-&gt;where("login", $login);
        $this-&gt;db-&gt;where("password", md5($password));
        $query = $this-&gt;db-&gt;get();
        return $query-&gt;num_rows() &gt; 0;
    }

    private function exists($login) {
        $this-&gt;db-&gt;select("*");
        $this-&gt;db-&gt;from("User");
        $this-&gt;db-&gt;where("login", $login);
        $query = $this-&gt;db-&gt;get();
        return $query-&gt;num_rows() &gt; 0;
    }

    function register($name, $login, $password) {
        if ($this-&gt;exists($login)) return;
        $this-&gt;db-&gt;insert('User', array(
            'name' =&gt; $name,
            'login' =&gt; $login,
            'password' =&gt; md5($password)
        ));
    }

}?&gt;
</code></pre>

<p>E com isso terminamos nosso model.</p>

<h2>Criando o controller</h2>

<p>E agora vamos juntar tudo através de um controller. Controller é uma classe como qualquer outra, que tem seus métodos. Vamos começar criando um novo arquivo em application > controllers chamado <strong>usuario.php</strong>.</p>

<p>Esse arquivo tem a seguinte estrutura:</p>

<pre><code class="PHP user.php">&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class User extends CI_Controller {

    public function __construct() {
        parent::__construct();
        }

}
</code></pre>

<p>Que, aliás, é a estrutura básica de todo controller. Todos eles devem herdar de CI_Controller.</p>

<p>Também podemos e devemos especificar que models iremos usar. Isto deve ser feito no construtor da classe do controller da seguinte maneira:</p>

<pre><code class="PHP user.php">public function __construct() {
    parent::__construct();  
    $this-&gt;load-&gt;model("usermodel");
}
</code></pre>

<p>Se precisar de mais models, basta criar mais linhas como essa, substituindo user_model pelo nome da classe do model em minúscula.</p>

<p>Também precisamos carregar alguns utilitários:</p>

<pre><code class="PHP user.php">public function __construct() {
    parent::__construct();
        $this-&gt;load-&gt;helper(array('url', 'form'));
        $this-&gt;load-&gt;model("usermodel");
}
</code></pre>

<p>Agora vamos criar o método &ldquo;view&rdquo;, que irá receber uma página da views e renderizará ela na tela. O CodeIgniter nos proporciona um método interessante para esta tarefa, chamado &ldquo;load->view&rdquo;.</p>

<pre><code class="PHP user.php">private function view($page) {
    $this-&gt;load-&gt;view("auth/header");
    $this-&gt;load-&gt;view($page);
    $this-&gt;load-&gt;view("auth/footer");
}
</code></pre>

<p>E aí nos aproveitamos para não só mostrar a página indicada, mas encapsulá-la entre o &ldquo;header&rdquo; e o &ldquo;footer&rdquo; criados anteriormente. É dessa maneira que reutilizamos código HTML no CodeIgniter. :)</p>

<p>Agora que temos um método para visualização, vamos criar mais um método, o index, que irá mostrar a página inicial da nossa aplicação.</p>

<pre><code class="PHP user.php">public function index() {
    $this-&gt;view("auth/login");
}
</code></pre>

<p>Também precisamos de métodos para mostrar as páginas de registrar, sucesso e falha:</p>

<pre><code class="PHP user.php">public function register() {
    $this-&gt;view("auth/register");
}

public function fail() {
    $this-&gt;view("auth/fail");
}

public function success() {
    $this-&gt;view("auth/success");
}
</code></pre>

<p>Esses métodos estão bacanas, mas como iremos acessá-los? Chegou a hora de falar sobre rotamento. Roteamento, neste contexto, é o processo de associar uma URL à um método do controller.</p>

<p>Por padrão, cada método público do controller é acessível através da seguinte url:</p>

<pre><code class="HTML">&lt;url_base&gt;/index.php/&lt;nome_do_controller&gt;/&lt;nome_do_metodo&gt;
</code></pre>

<p>Para o nosso controller User, queremos reduzir essa URL para:</p>

<pre><code class="HTML">&lt;url_base&gt;/index.php/&lt;nome_do_metodo&gt;
</code></pre>

<p>Para quando o usuário digitar: <url_base>/, ele seja redirecionado automaticamente para o método &ldquo;index&rdquo; de User. Para isto, vá até o arquivo application > config > routes.php</p>

<p>Na linha 41, mude &ldquo;default_controller&rdquo; para user.</p>

<pre><code class="PHP routes.php">$route['default_controller'] = "user";
</code></pre>

<p>E agora vamos criar as rotas pros métodos já existentes no Controller:</p>

<pre><code class="PHP routes.php">$route['index'] = "user/index";
$route['success'] = "user/success";
$route['fail'] = "user/fail";
$route['register'] = "user/register";
</code></pre>

<p>A síntaxe descrita ali encima é a seguinte:</p>

<pre><code class="PHP">$route['&lt;rota&gt;'] = "&lt;nome_do_controller&gt;/&lt;nome_do_metodo&gt;";
</code></pre>

<p>Precisamos também definir as rotas que falamos anteriormente, que são: <strong>login</strong> (método que irá permitir logar), <strong>logout</strong> (método que irá permitir deslogar) e <strong>new_register</strong> (método que irá permitir registrar um novo usuário).</p>

<pre><code class="PHP routes.php">$route['login'] = "user/login";
$route['logout'] = "user/logout";
$route['new_register'] = "user/new_register";
</code></pre>

<p>Claro, ainda não temos os métodos &ldquo;login&rdquo;, &ldquo;logout&rdquo; e &ldquo;new_register&rdquo;. Vamos então criá-los!</p>

<p>Primeiro o de login. Sabemos que o form irá mandar uma requisição POST para este método. Precisamos pegar as informações desta requisições. Isso pode ser feito da seguinte maneira:</p>

<pre><code class="PHP user.php">public function login() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
}
</code></pre>

<p>Com isto estamos pegando os valores dos campos de nome &ldquo;login&rdquo; e &ldquo;password&rdquo; e atribuindo às suas respectivas variáveis. Com esses valores em mãos, vamos chamar o método do model &ldquo;usermodel&rdquo; que irá permitir logar:</p>

<pre><code class="PHP user.php">public function login() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
    if ($this-&gt;usermodel-&gt;login($login, $password)) {

    } else {

    }
}
</code></pre>

<p>Interessante aqui é que não criamos uma instância do model (pelo menos não de forma explicita). Quando importamos o model no construtor, todos os seus métodos são acessíveis através de $this->(nome do model).</p>

<p>Sabendo disso, chamamos o método login, e lembrando que ele retorna true caso o login seja efetuado com sucesso, colocamos a chamada de método dentro de um condicional.</p>

<p>Precisamos agora criar uma nova <strong>seção</strong>, um local onde iremos colocar pequenas informações que indiquem que usuário está logado naquele momento, um pouco parecido com cookies.</p>

<p>Para poder utilizá-la, primeiro importe a seguinte biblioteca no construtor do controller:</p>

<pre><code class="PHP user.php">public function __construct() {
    ...
    $this-&gt;load-&gt;library('session');
}
</code></pre>

<p>Vá até o arquivo application > config > config.php, e na linha 227 defina o valor da variável <strong>$config[&lsquo;encription_key&rsquo;]</strong> para qualquer número aleatório realmente grande.</p>

<p>Agora volte para nosso controller, e adicione a seguinte linha de código ao método &ldquo;login&rdquo;:</p>

<pre><code class="PHP user.php">public function login() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
    if ($this-&gt;usermodel-&gt;login($login, $password)) {
        $this-&gt;session-&gt;set_userdata("user", $login);
    } else {

    }
}
</code></pre>

<p>Feito isto, agora podemos acessar a informação do usuário que está logado naquele momento através do método:</p>

<pre><code class="PHP">$this-&gt;session-&gt;userdata("user");
</code></pre>

<p>Você pode definir mais informações caso queira, basta nomeá-las com uma chave diferente de &ldquo;user&rdquo;.</p>

<p>Agora que criamos essa seção, vamos redirecionar o usuário para a tela de sucesso.</p>

<pre><code class="PHP user.php">public function login() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
    if ($this-&gt;usermodel-&gt;login($login, $password)) {
        $this-&gt;session-&gt;set_userdata("user", $login);
        redirect("success", "refresh");
    } else {

    }
}
</code></pre>

<p>O primeiro argumento do método &ldquo;redirect&rdquo; é a URL. O roteamento irá redirecionar pro método do controller equivalente. :)</p>

<p>E caso o usuário não tenha conseguido logar, vamos redirecioná-lo para tela de falha.</p>

<pre><code class="PHP user.php">public function login() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
    if ($this-&gt;usermodel-&gt;login($login, $password)) {
        $this-&gt;session-&gt;set_userdata("user", $login);
        redirect("success", "refresh");
    } else {
        redirect("fail", "refresh");
    }
}
</code></pre>

<p>Agora você se lembra que no arquivo &ldquo;success.php&rdquo; havia uma pegadinha, onde usávamos uma variável chamada $usuario e que eu disse que quem iria definir quem ela é seria o controller? Pois bem, chegou a hora.</p>

<p>Modifique o método &ldquo;view&rdquo;, aquele responsável por renderizar a página, para receber um parâmetro opcional: $data, e faça com que as chamas de &ldquo;load->view&rdquo; passem esse parâmetro também.</p>

<pre><code class="PHP user.php">private function view($page, $data=false) {
    $this-&gt;load-&gt;view("auth/header.php", $data);
    $this-&gt;load-&gt;view($page, $data);
    $this-&gt;load-&gt;view("auth/footer.php", $data);
}
</code></pre>

<p>Agora no método &ldquo;success&rdquo;, adicione a seguinte linha antes de chamar o método &ldquo;view&rdquo;:</p>

<pre><code class="PHP user.php">$data["usuario"] = $this-&gt;session-&gt;userdata("user");
</code></pre>

<p>E passe essa variável quando for chamar o &ldquo;view&rdquo;:</p>

<pre><code class="PHP user.php">$this-&gt;load-&gt;view($page, $data);
</code></pre>

<p>Com isto, a array $data é passada para as views, só que lá dentro os valores dessa array são acessíveis através de variáveis independentes. Exemplo: $data[&ldquo;usuario&rdquo;] torna-se $usuario. :)</p>

<p>Agora vamos fazer com que, se logado, o usuário seja redirecionado para a tela de sucesso automaticamente. Para isto, basta criar a seguinte condição no método &ldquo;index&rdquo;:</p>

<pre><code class="PHP user.php">public function index() {
    if ($this-&gt;session-&gt;userdata("user")) {
        redirect("success", "refresh");
        return;
    }
    $this-&gt;view("auth/login");
}
</code></pre>

<p>Com isso terminamos a ação de logar! Falta-nos o de deslogar e o de registrar. Vamos pelo de registrar.</p>

<p>Registrar é muito parecido com o de logar, veja:</p>

<pre><code class="PHP user.php">public function new_register() {
    $login = $this-&gt;input-&gt;post("login");
    $password = $this-&gt;input-&gt;post("password");
    $password = $this-&gt;input-&gt;post("name");
    $this-&gt;usermodel-&gt;register($name, $login, $password);
    redirect("index", "refresh");
}
</code></pre>

<p>Acho que não há nada de novo aqui em relação ao método &ldquo;login&rdquo;.</p>

<p>E, por último, o método de deslogar:</p>

<pre><code class="PHP user.php">public function logout() {
    $this-&gt;session-&gt;unset_userdata('user');
    session_destroy();
    redirect('index', 'refresh');
}
</code></pre>

<p>Basicamente, ele está destruindo a seção e redirecionando para tela inicial.</p>

<p>Com isso, nossa classe, por completo, está assim:</p>

<pre><code class="PHP user.php">&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class User extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this-&gt;load-&gt;helper(array('url', 'form'));
        $this-&gt;load-&gt;model("usermodel");
        $this-&gt;load-&gt;library('session');
    }

    private function view($page, $data=false) {
        $this-&gt;load-&gt;view("auth/header.php");
        $this-&gt;load-&gt;view($page, $data);
        $this-&gt;load-&gt;view("auth/footer.php");
    }

    public function index() {
        if ($this-&gt;session-&gt;userdata("user")) {
            redirect("success", "refresh");
            return;
        }
        $this-&gt;view("auth/login");
    }

    public function register() {
        $this-&gt;view("auth/register");
    }

    public function fail() {
        $this-&gt;view("auth/fail");
    }

    public function success() {
        $data["usuario"] = $this-&gt;session-&gt;userdata("user");
        $this-&gt;view("auth/success", $data);
    }

    public function login() {
        $login = $this-&gt;input-&gt;post("login");
        $password = $this-&gt;input-&gt;post("password");
        if ($this-&gt;usermodel-&gt;login($login, $password)) {
            $this-&gt;session-&gt;set_userdata("user", $login);
            redirect("success", "refresh");
        } else {
            redirect("fail", "refresh");
        }
    }

    public function new_register() {
        $login = $this-&gt;input-&gt;post("login");
        $password = $this-&gt;input-&gt;post("password");
        $name = $this-&gt;input-&gt;post("name");
        $this-&gt;usermodel-&gt;register($name, $login, $password);
        redirect("index", "refresh");
    }

     public function logout() {
        $this-&gt;session-&gt;unset_userdata('user');
        session_destroy();
        redirect('index', 'refresh');
    }

}
</code></pre>

<p><strong>Uhuuu!!</strong> E concluímos nossa aplicação! Se você rodar agora, verá que está tudo rodando perfeitamente (assim espero hehe).</p>

<p style="text-align:center;"> <img src="/images/posts/igniter-auth-1.png" alt="" /></p>

<p style="text-align:center;"> <img src="/images/posts/igniter-auth-2.png" alt="" /></p>

<p style="text-align:center;"> <a href="/downloads/code/auth.zip">Clique aqui para baixar o exemplo completo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Testes De Unidade Em PHP Com O PHPUnit]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/26/criando-testes-de-unidade-em-php-com-o-phpunit/"/>
    <updated>2014-09-26T19:04:37-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/26/criando-testes-de-unidade-em-php-com-o-phpunit</id>
    <content type="html"><![CDATA[<p>Olá, pessoas e alienígenas (estou na esperança de que este post seja preservado como tesouro histórico da humanidade e esteja sendo lido por outras civilizações extraterrestres neste momento).</p>

<p>Neste post aprenderemos a fazer algo que toooodo mundo gosta, é praticamente como comer bolo (existe alguém que não goste de bolo?!) do mundo da programação: TESTES! Uhuu! Me emocionei só de falar.</p>

<p>Nosso foco, porém, são os testes em PHP usando a ferramente PHPUnit. É mamão com açúcar, acompanha comigo.</p>

<!-- more -->


<h2>Instalando a ferramenta</h2>

<p>Instalar a ferramenta é fácil fácil&hellip; Se você usa Linux, é claro. ;) (Mas se não usa também!)</p>

<p>Estou presumindo aqui que você já tenha PHP instalado, juntamente com um servidor e blablabla.</p>

<p>Para instalar o PHPUnit, usaremos o incrível <strong>Composer</strong>, um gerenciador de dependência bastante popular na comunidade PHP.</p>

<p>Baixe o Composer através <a href="https://getcomposer.org/download/">desse site</a> (lá embaixo, em Manual Download), e coloque-o dentro da pasta de seu projeto.</p>

<p>Agora crie um arquivo dentro da pasta de seu projeto chamado <strong>composer.json</strong>, e coloque dentro dele o seguinte texto:</p>

<pre><code class="Javascript">{
    "require-dev": {
        "phpunit/phpunit": "4.2.*",
    "phpunit/php-invoker": "*"
    }
}
</code></pre>

<p>Explico! Para instalar as dependência (no nosso caso, o PHPUnit), o Composer recebe um arquivo no formato JSON, onde você simplesmente só precisa colocar o nome da dependência como <em>node</em> de &ldquo;<em>require-dev</em>&rdquo; e ele irá automagicamente instalá-lo pra você. Fantástico, não é? :D</p>

<p>Bem, feito isso, abra o terminal, vá até a pasta de seu projeto, e digite a seguinte linha de comando:</p>

<pre><code class="Bash">php composer.phar install
</code></pre>

<p>E pronto! O Composer vá se encarregar agora de instalar pra você.</p>

<p>Para rodar a ferramenta, basta digitar no terminal:</p>

<pre><code class="Bash">php ./vendor/bin/phpunit &lt;Arquivo_De_Teste&gt;
</code></pre>

<p>Mas como ainda não temos nenhum teste, nada de especial irá acontecer.</p>

<h2>Criando testes</h2>

<p>Agora a parte que nos interessa de fato. Criar testes também é muito fácil com o PHPUnit. Qualquer pessoa que já usou alguma ferramenta como o JUnit vai se sentir muito a vontade. Vamos lá!</p>

<blockquote><p>Mas, ô seu idiota, não temos nada o que testar!</p></blockquote>

<p>Calma, jovem gafanhoto. Já me encarregarei disto. Por motivos didáticos, vamos testar essa simples classe escrita em PHP que representa um número em notação científica.</p>

<p><figure class='code'><figcaption><span> (ScientificNotation.php)</span> <a href='/downloads/code/ScientificNotation.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotation</span> <span class="p">{</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">private</span> <span class="nv">$mantissa</span><span class="p">;</span>
</span><span class='line'>	<span class="k">private</span> <span class="nv">$exponent</span><span class="p">;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">,</span> <span class="nv">$exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setMantissa</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setExponent</span><span class="p">(</span><span class="nv">$exponent</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">getMantissa</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">setMantissa</span><span class="p">(</span><span class="nv">$mantissa</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">=</span> <span class="nv">$mantissa</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">getExponent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">setExponent</span><span class="p">(</span><span class="nv">$exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">=</span> <span class="nv">$exponent</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">()</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Can&#39;t add two numbers with different exponents.&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">+=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">subtract</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">()</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Can&#39;t subtract two numbers with different exponents.&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">-=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">multiply</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">*=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">+=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">divide</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">/=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">();</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">-=</span> <span class="nv">$number</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">normalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">while</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">while</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mantissa</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exponent</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Como você pode ver, esta é uma classe bem simples. Vamos lembrar um pouquinho de matemática de ensino médio para entender seu comportamento&hellip; (<a href="#tests">Clique aqui</a> caso queira pular essa parte)</p>

<p>Primeiro, todo número em notação científica é composto por duas partes: A mantissa (a parte &ldquo;literal&rdquo; do número) e o exponente. Por exemplo, no número:</p>

<p>2,5 x 10<sup>8</sup></p>

<p>A mantissa é 2,5 e o exponente é 8.</p>

<p>Segundo, na multiplicação entre números em notação científica, multiplicamos as mantissas e somamos os expoentes. Por exemplo:</p>

<p>(2,5 x 10<sup>8</sup>) x (2,0 x 10<sup>2</sup>) = (5,0 x 10<sup>10</sup>)</p>

<p>E a divisão segue o mesmo princípio, divindo as mantissas e subtraindo os expoentes.</p>

<p>A adição e a subtração é um pouco problemática, porque ela só é permitida entre números que possuem o mesmo expoente. Neste caso, simplesmente somamos ou subtraímos as mantissas e mantemos os expoentes.</p>

<p>A normalização de um número em notação científica é transformar sua mantissa em um número de um digito. Ao fazer isso, incrementamos ou decrementamos seu expoente.</p>

<div id="tests"></div>


<p><strong>Done</strong>! Agora vamos criar os testes.</p>

<p>Crie um arquivo chamado <strong>ScientificNotationTest.php</strong>. Este arquivo deve ter a seguinte estrutura:</p>

<pre><code class="PHP ">&lt;?php
class ScientificNotationTest extends PHPUnit_Framework_TestCase {

}
?&gt;
</code></pre>

<p>Essa é a estrutura padrão de um teste em PHP. Perceba que ele deve herdar da classe <strong>PHPUnit_Framework_TestCase</strong>.</p>

<p>Além disso, é importante importar o arquivo onde está a classe que será testada. Isso geralmente é feita dentro do método <strong>setUp</strong>, um método especial que é chamado antes de cada teste. Nossa classe de teste então deve estar assim:</p>

<pre><code class="PHP ">&lt;?php
class ScientificNotationTest extends PHPUnit_Framework_TestCase {

    public function setUp() {
        require_once 'ScientificNotation.php';
    }

}
?&gt;
</code></pre>

<p>OK! Agora vamos criar os testes propriamente ditos. Os métodos que contém os testes devem <em>sempre</em> ter o prefixo <strong>test</strong>. Exemplo: testXXX, testXYZ, &hellip;</p>

<p>O primeiro teste que vamos criar é para a multiplicação. Primeiro, criemos duas instâncias quaisquer da classe e chamemos o método <em>multiply</em>.</p>

<pre><code class="PHP ">public function testMultiply() {
    $number1 = new ScientificNotation(2.0, 3);
    $number2 = new ScientificNotation(4.0, 2);
    $number1-&gt;multiply($number2);
}
</code></pre>

<p>Agora vamos testar algumas asserções. As asserções que eu mais uso são: <em>testEquals</em> (testa de dois objetos são iguais), <em>assertTrue</em> (testa se uma condição é verdadeira) e <em>assertFalse</em>. Você pode ver uma lista completa <a href="https://phpunit.de/manual/current/en/appendixes.assertions.html">aqui</a>. Logo, nosso método ficou assim:</p>

<pre><code class="PHP ">public function testMultiply() {
    $number1 = new ScientificNotation(2.0, 3);
    $number2 = new ScientificNotation(4.0, 2);
    $number1-&gt;multiply($number2);
    $this-&gt;assertEquals(8.0, $number1-&gt;getMantissa());
    $this-&gt;assertEquals(5, $number1-&gt;getExponent());
}
</code></pre>

<p>Fácil, não é? :)</p>

<p>Vamos pular a divisão, que possuí uma lógica análoga ao da multiplicação, e vamos direto ao da adição.</p>

<p>O método da adição deve lançar uma exceção caso o número passado seja de uma base diferente do número atual. Como testar isso?</p>

<p>Simples! Encapsule a chamada de método em um try/catch, e faça com que o teste falhe caso o código <em>passe</em> do ponto onde deveria lançar exceção. Exemplo:</p>

<pre><code class="PHP">try {
    //should throw exception here
    $this-&gt;fail();
} catch(Exception $e) { } 
</code></pre>

<p>Com isso, nosso método de testar adição está assim:</p>

<pre><code class="PHP ">public function testAdd() {
    //must be ok
    $number1 = new ScientificNotation(2.0, 5);
    $number2 = new ScientificNotation(4.0, 5);
    $number1-&gt;add($number2);
    $this-&gt;assertEquals(6.0, $number1-&gt;getMantissa());
    $this-&gt;assertEquals(5, $number1-&gt;getExponent());
    //must throw exception
    $number1 = new ScientificNotation(3.0, 4);
    $number2 = new ScientificNotation(2.0, 3);
    try {
        $number1-&gt;add($number2);
        $this-&gt;fail();
    } catch(Exception $e) { } 
}
</code></pre>

<p>No final, éis nossa classe de testes completa:</p>

<p><figure class='code'><figcaption><span> (ScientificNotationTest.php)</span> <a href='/downloads/code/ScientificNotationTest.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ScientificNotationTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="p">{</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">require_once</span> <span class="s1">&#39;ScientificNotation.php&#39;</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">testMultiply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">multiply</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">testDivide</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">divide</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="c1">//must be ok</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">6.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>		<span class="c1">//must throw exception</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>		<span class="k">try</span> <span class="p">{</span>
</span><span class='line'>			<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">testSubtract</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="c1">//must be ok</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">subtract</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>		<span class="c1">//must throw exception</span>
</span><span class='line'>		<span class="nv">$number1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$number2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>		<span class="k">try</span> <span class="p">{</span>
</span><span class='line'>			<span class="nv">$number1</span><span class="o">-&gt;</span><span class="na">subtract</span><span class="p">(</span><span class="nv">$number2</span><span class="p">);</span>
</span><span class='line'>			<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">public</span> <span class="k">function</span> <span class="nf">testNormalize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="nv">$unmormalizedNumber1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">800.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$unnormalizedNumber2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScientificNotation</span><span class="p">(</span><span class="mf">0.08</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">();</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nv">$unmormalizedNumber1</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">();</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mf">8.0</span><span class="p">,</span> <span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">getMantissa</span><span class="p">());</span>
</span><span class='line'>		<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="nv">$unnormalizedNumber2</span><span class="o">-&gt;</span><span class="na">getExponent</span><span class="p">());</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Para rodar o teste, digite no terminal:</p>

<pre><code class="Bash">php ./vendor/bin/phpunit ScientificNotationTest.php
</code></pre>

<h2>Criando uma suite de testes</h2>

<p>O exemplo acima serve se quisermos rodar apenas um teste, mas e quando queremos rodar vários testes de uma só vez? Bem, você poderia criar uma pasta, colocar os testes lá e mandar o PHPUnit rodar a pasta como arquivo de teste. Entretanto, a maneira mais <em>elegante</em> de se fazer isso é com um arquivo de configuração.</p>

<p>É fácil! Na raiz do projeto, crie um arquivo chamado <strong>phpunit.xml</strong>. Este arquivo deve ter a seguinte estrutura:</p>

<pre><code class="XML">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;phpunit&gt;
    &lt;testsuites&gt;
        &lt;testsuite name=""&gt;
        &lt;/testsuite&gt;
  &lt;/testsuites&gt;
&lt;/phpunit&gt;
</code></pre>

<p>Para cada suite de testes, basta adicionar um novo nó do tipo &ldquo;<em>testsuite</em>&rdquo; ao nó &ldquo;<em>testsuites</em>&rdquo;. É importante nomear as suites para que seja possível distinguí-las.
Para adicionar um arquivo à uma suite, basta adicionar um novo nó do tipo &ldquo;<em>file</em>&rdquo; ao nó &ldquo;<em>testsuite</em>&rdquo;. Exemplo:</p>

<pre><code class="XML">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;phpunit&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="suite1"&gt;
            &lt;file&gt;ScientificNotationTest.php&lt;/file&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;
</code></pre>

<p>Agora para rodar o test suite, basta digitar no terminal:</p>

<pre><code class="Bash">php ./vendor/bin/phpunit --testsuite &lt;Nome&gt;
</code></pre>

<p>Onde <em><code>&lt;Nome&gt;</code></em> é o nome do test suite.</p>

<h2>Verificando a cobertura dos testes</h2>

<p>Uma coisa interessante que gostaria de ressaltar também neste tutorial é a cobertura dos testes. Essa é uma informação importante, tanto para você quanto para seu chefe/cliente. Quanto maior a cobertura, maior a confiança que seus testes passam.</p>

<p>Para rodar a ferramenta de cobertura de testes, é necessário instalar o <strong>XDebug</strong>. Se você usa o Windows, você pode instalá-lo facilmente através <a href="http://www.xdebug.org/download.php">desse link</a>. Caso use o Ubuntu, você pode instalá-lo de maneira ainda mais fácil:</p>

<pre><code class="Bash">sudo apt-get install php5-xdebug
</code></pre>

<p>Agora que você já tem o xDebug, para rodar a análise, simplesmente digite no terminal:</p>

<pre><code class="Bash">php ./vendor/bin/phpunit --coverage-&lt;TIpo_De_Saida&gt; &lt;Arquivo_de_Saida&gt;
</code></pre>

<p>O <em><code>&lt;Tipo_de_Saida&gt;</code></em> pode ser em vários formatos. Por exemplo: HTML, XML, PHP&hellip; É como você irá visualizar os resultados, e <em><code>&lt;Arquivo_de_Saida&gt;</code></em> é o&hellip; arquivo de saída! Exemplo:</p>

<pre><code class="Bash">php ./vendor/bin/phpunit --coverage-html resultado
</code></pre>

<p>Irá gerar uma página HTML com os resultados. Quando abro ela análise os testes que fiz acima, visualizo a seguinte análise:</p>

<p><img src="/images/posts/phpunit-coverage.png" alt="" /></p>

<p>:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Seu Blog No Github]]></title>
    <link href="http://PicoleDeLimao.github.io/blog/2014/09/16/criando-seu-blog-no-github/"/>
    <updated>2014-09-16T23:32:43-03:00</updated>
    <id>http://PicoleDeLimao.github.io/blog/2014/09/16/criando-seu-blog-no-github</id>
    <content type="html"><![CDATA[<p>Olá, mundo! Sejam bem-vindos ao meu novíssimo blog (infelizmente, o antigo foi pro espaço&hellip;). Aqui vocês poderão encontrar tutoriais e dicas sobre programação em geral. E como não poderia deixar de ser, meu primeiro post tratará justamente de como criar seu blog no Github!</p>

<h3>Por que criar um blog no Github?</h3>

<p>O Github é fantástico. Ele permite que você hospede páginas estáticas de graça. E utilizando poucas ferramentas, podemos criar um blog muito mais profissional e poderoso que o Blogger, ideal para compartilhar código. Claro, não chega a ser tão bom quanto o Wordpress, mas acho que para os propósitos de um programador cai bem.</p>

<h3>Estou interessado! Por onde começo?</h3>

<p>Bem, eu penei bastante até conseguir dar deploy neste blog, mas depois algumas noites acabei descobrindo passos bem simples, que são esses que irei descrever agora.</p>

<!-- more -->


<p><strong>Requisitos necessários:</strong>
- Linux (Sim. Infelizmente, ainda não há uma maneira simples de fazer isso no Windows&hellip;);
- Git instalado (Meio óbvio).</p>

<p>A primeira coisa a se fazer é criar um repositório no Github. Mas não basta ser qualquer repositório, deve ser um repositório que tenha a seguinte nomenclatura:</p>

<pre><code>&lt;Seu_Nick_No_Github&gt;.github.io
</code></pre>

<p>Explico! Através do mecanismo <strong>Github pages</strong>, o Github permite a hospedagem de sites estáticos de graça, como bem falado anteriormente. O problema é que ele só permite uma página por usuário, e por padrão essa página deve estar em um repositório de mesmo nome do usuário, com adição do &ldquo;<em>github.io</em>&rdquo; que juntos representam o endereço do site.</p>

<p>Criado o repositório, precisamos de uma ferramenta que crie a estrutura básica de um blog e que nos permita criar postagens com facilidade. Essa ferramenta se chama <strong>Jekyll</strong>.</p>

<p>Podemos instalar o Jekyll e todas as suas dependências através de uma simples linha de comando:</p>

<pre><code class="Bash">gem install github-pages
</code></pre>

<p>Além do Jekyll, o comando acima tentará também instalar o Ruby, já que ele é construído sob essa linguagem.</p>

<p>Mesmo assim, o Jekyll ainda é muito simples, e pode ser tedioso construir todo o template de seu blog manualmente. Por isso, usaremos mais uma ferramenta, chamada <strong>Octopress</strong>.</p>

<p>O Octopress existe para facilitar diversas operações. Através de seu Rake podemos criar posts, trocar temas, tudo com uma linha de comando.</p>

<p>Configurar o Octopress é bastante simples. Primeiro você deve clonar seu repositório.</p>

<pre><code class="Bash">git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p>Em seguida, instale suas dependências.</p>

<pre><code class="Bash">bundle install
</code></pre>

<p>E por fim configure-o para que ele possa dar deploy para o Github de maneira automática.</p>

<pre><code class="Bash">rake setup_github_pages
</code></pre>

<p>Pronto! Com isto já podemos começar a blogar! :D</p>

<p>Para criar seu primeiro post, digite o seguinte comando no terminal:</p>

<pre><code class="Bash">rake new_post["Titulo"] 
</code></pre>

<p>Com isto ele irá gerar um arquivo no formato markdown dentro da pasta source/_posts. Markdown é uma linguagem de marcação que serve como uma versão mais limpa e simples do HTML. Você pode obter mais informações sobre ele <a href="http://en.wikipedia.org/wiki/Markdown">aqui</a>. É simples, não demora muito pegar o jeito da coisa!</p>

<p><strong>Dica 1:</strong>
Você pode configurar um <i>preview</i> do post (o famoso <i>&ldquo;read more&rdquo;</i>). Basta adicionar a linha</p>

<p>&#8220;` HTML</p>

<!-- more -->


<pre><code>
onde você quiser que acabe o preview.

**Dica 2:**
Claro, não poderia defender que o Octopress é uma ótima plataforma para programadores se não desse surporte à highlight de código. Atualmente ele suporte mais de 100 linguagens de programação. Adicionar um bloco de código é bem simples. Basta usar a seguinte síntaxe:
</code></pre>

<p><code></code> <code>[Linguagem]
    codigo2
</code> <code></code>
&#8220;`
<strong>PS:</strong> Remova os espaços em branco entre os apóstrofos.</p>

<p>Exemplo:</p>

<pre><code>` ` ` Java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
` ` `
</code></pre>

<p>Irá gerar o seguinte texto:</p>

<pre><code class="Java">public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
</code></pre>

<p>Que bonitinho. :-)</p>

<p>Existem outras maneiras legais, você pode até copiar o código-fonte de um arquivo. Para aprender mais, convido vocês a acessarem <a href="http://octopress.org/docs/blogging/code/">esse link</a>, é realmente interessante!</p>

<h3>Visualizando nosso blog</h3>

<p>Visualizar nosso blog durante a produção é importante. O Jekyll nos fornece uma maneira de testar nosso blog através do <i>localhost</i>. Para isso, dentro da pasta do blog, digite o seguinte comando:</p>

<pre><code class="Bash">rake preview
</code></pre>

<p>E a partir daí basta acessar o endereço <a href="http://localhost:4000">http://localhost:4000</a> e ver o blog rodando! :D</p>

<h3>Dando deploy no blog</h3>

<p>Agora precisamos colocá-lo no ar! Para isso, basta dar o seguinte comando:</p>

<pre><code class="Bash">rake generate
rake deploy
</code></pre>

<p>Na primeira vez ele irá perguntar coisas como o link do seu repositório e sua conta, mas a partir daí ele irá commitar tudo de maneira automática.</p>

<h3>Aplicando temas</h3>

<p>Por fim, acho importante destacar esta parte. Apesar de que o Octopress já venha com um belo tema, é possível instalar temas de terceiros, e é bem simples!</p>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Esse site</a> contém uma lista de vários temas para o Octopress. Instalá-los seguem uma metodologia semelhante:
Clone-os para dentro da pasta .theme, que existe dentro da pasta de seu blog. Exemplo:</p>

<pre><code>git clone XXX .theme/XXX
</code></pre>

<p>Após ter feito isto, basta digitar:</p>

<pre><code class="Bash">rake install['XXX']
rake generate
</code></pre>

<p>Ele irá perguntar se você realmente deseja substituir os arquivos, o qual você dirá que sim (y). E a partir daí é só desfrutar do novo tema! :D</p>

<p>É muito simples, não é não?!
Espero que tenham gostado desse tutorial. Aqui vai alguns links interessantes para aprofundar as coisas que falamos aqui.</p>

<ul>
<li><a href="http://jekyllrb.com/docs/home/">http://jekyllrb.com/docs/home/</a></li>
<li><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></li>
<li><a href="https://pages.github.com/">https://pages.github.com/</a></li>
</ul>


<p>Boa sorte com seu novo blog! Qualquer dúvida, caso algum passo tenha ficado obscura ou não tenha funcionado, os comentários estão sempre abertos!</p>
]]></content>
  </entry>
  
</feed>
